package traz_aqui;/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 20 00:32:14 GMT 2020
 */

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Voluntario_ESTest extends Voluntario_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario((String) null, "", 0.0, coordenadas0, 0.0, true, (-1367.106974), (String) null, (String) null, (-1021));
      voluntario0.dimCap();
      assertEquals((-1022), voluntario0.getCap());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-356.18), (-356.18));
      Voluntario voluntario0 = new Voluntario("", "", (-356.18), coordenadas0, (-356.18), false, (-356.18), "", "", 0);
      voluntario0.changeR((-1443.21548993));
      assertEquals((-1799.3954899300002), voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1909.0, 0.0);
      Coordenadas coordenadas1 = new Coordenadas(coordenadas0);
      coordenadas1.setX(154.1648740808);
      Voluntario voluntario0 = new Voluntario("+wI;$.e", "+wI;$.e", 1909.0, coordenadas1, 0.0, false, 1909.0, ":xy+`*$:jz:", "+wI;$.e", 1);
      Double double0 = new Double(0.0);
      double double1 = voluntario0.calcTemp(coordenadas1, coordenadas0, double0);
      assertEquals(1909.0, voluntario0.getRange(), 0.01);
      assertEquals("+wI;$.e", voluntario0.getNome());
      assertFalse(voluntario0.isMed());
      assertEquals(1, voluntario0.getCap());
      assertEquals(":xy+`*$:jz:", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals(0.9192431251541121, double1, 0.01);
      assertEquals("+wI;$.e", voluntario0.getPass());
      assertEquals("+wI;$.e", voluntario0.getCod());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-129.69570177081246), (-129.69570177081246));
      Voluntario voluntario0 = new Voluntario("- Y:", "", (-129.69570177081246), coordenadas0, (-129.69570177081246), true, (-129.69570177081246), "- Y:", "- Y:", (-265));
      Double double0 = new Double(318.72);
      voluntario0.isRangeV(coordenadas0, double0);
      assertEquals("- Y:", voluntario0.getPass());
      assertEquals((-129.69570177081246), voluntario0.getRange(), 0.01);
      assertEquals("- Y:", voluntario0.getEmail());
      assertEquals((-265), voluntario0.getCap());
      assertTrue(voluntario0.isMed());
      assertEquals("", voluntario0.getNome());
      assertEquals((-129.69570177081246), voluntario0.getVkm(), 0.01);
      assertEquals((-129.69570177081246), voluntario0.getClas(), 0.01);
      assertEquals("- Y:", voluntario0.getCod());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario("- Y:", "- Y:", 0.0, coordenadas0, 0.0, false, 110.85118009, "- Y:", (String) null, 0);
      boolean boolean0 = voluntario0.isMed();
      assertEquals(110.85118009, voluntario0.getVkm(), 0.01);
      assertEquals(0, voluntario0.getCap());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2.0, 2.0);
      Voluntario voluntario0 = new Voluntario("E>xY=vW~DKMU", ".=&vZx", 2.0, coordenadas0, 2.0, false, 0.0, "", "", 0);
      double double0 = voluntario0.getVkm();
      assertEquals("", voluntario0.getEmail());
      assertEquals(2.0, voluntario0.getClas(), 0.01);
      assertEquals("E>xY=vW~DKMU", voluntario0.getCod());
      assertFalse(voluntario0.isMed());
      assertEquals(".=&vZx", voluntario0.getNome());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, voluntario0.getCap());
      assertEquals("", voluntario0.getPass());
      assertEquals(2.0, voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario((String) null, "", 0.0, coordenadas0, 0.0, true, (-1367.106974), (String) null, (String) null, (-1021));
      double double0 = voluntario0.getVkm();
      assertEquals((-1021), voluntario0.getCap());
      assertTrue(voluntario0.isMed());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals((-1367.106974), double0, 0.01);
      assertEquals(0.0, voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 40.49741976187);
      Voluntario voluntario0 = new Voluntario("s8W'7UJdsQc_Xu>U", (String) null, 0.0, coordenadas0, 40.49741976187, true, 0.0, (String) null, "s8W'7UJdsQc_Xu>U", 0);
      double double0 = voluntario0.getRange();
      assertTrue(voluntario0.isMed());
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(40.49741976187, voluntario0.getClas(), 0.01);
      assertEquals(0, voluntario0.getCap());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 40.49741976187);
      Voluntario voluntario0 = new Voluntario("s8W'7UJdsQc_Xu>U", (String) null, 0.0, coordenadas0, 40.49741976187, true, 0.0, (String) null, "s8W'7UJdsQc_Xu>U", 0);
      voluntario0.setRange(1346.0);
      double double0 = voluntario0.getRange();
      assertEquals(1346.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario((String) null, "", 0.0, coordenadas0, 0.0, true, (-1367.106974), (String) null, (String) null, (-1021));
      String string0 = voluntario0.getPass();
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertNull(string0);
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals((-1021), voluntario0.getCap());
      assertEquals((-1367.106974), voluntario0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2.0, 2.0);
      Voluntario voluntario0 = new Voluntario((String) null, "traz_aqui.Voluntario", 2.0, coordenadas0, 1.0, true, (-818.65669953105), "l4Gz*~&.Tgu;=fe[N{Y", "", (-911));
      String string0 = voluntario0.getPass();
      assertNotNull(string0);
      assertEquals((-818.65669953105), voluntario0.getVkm(), 0.01);
      assertEquals("traz_aqui.Voluntario", voluntario0.getNome());
      assertEquals(1.0, voluntario0.getClas(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals((-911), voluntario0.getCap());
      assertEquals("", string0);
      assertEquals(2.0, voluntario0.getRange(), 0.01);
      assertEquals("l4Gz*~&.Tgu;=fe[N{Y", voluntario0.getEmail());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), (-1.0));
      Voluntario voluntario0 = new Voluntario("yJG`9oVgCMP';c!Sq)", "yJG`9oVgCMP';c!Sq)", (-1.0), coordenadas0, 0.0, false, 1.0, (String) null, "yJG`9oVgCMP';c!Sq)", 749);
      voluntario0.setNome((String) null);
      voluntario0.getNome();
      assertEquals(1.0, voluntario0.getVkm(), 0.01);
      assertFalse(voluntario0.isMed());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals((-1.0), voluntario0.getRange(), 0.01);
      assertEquals(749, voluntario0.getCap());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2278.631781053679, 0.0);
      Voluntario voluntario0 = new Voluntario("", "", 0.0, coordenadas0, (-1249.2994536968981), true, 0.0, "P:p", "P:p", (-2718));
      String string0 = voluntario0.getNome();
      assertTrue(voluntario0.isMed());
      assertEquals((-1249.2994536968981), voluntario0.getClas(), 0.01);
      assertEquals("P:p", voluntario0.getPass());
      assertEquals((-2718), voluntario0.getCap());
      assertEquals("P:p", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals("", voluntario0.getCod());
      assertEquals("", string0);
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 40.49741976187);
      Voluntario voluntario0 = new Voluntario("s8W'7UJdsQc_Xu>U", (String) null, 0.0, coordenadas0, 40.49741976187, true, 0.0, (String) null, "s8W'7UJdsQc_Xu>U", 0);
      String string0 = voluntario0.getEmail();
      assertEquals(40.49741976187, voluntario0.getClas(), 0.01);
      assertEquals(0, voluntario0.getCap());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertNull(string0);
      assertTrue(voluntario0.isMed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 3497.4623575525);
      Voluntario voluntario0 = new Voluntario("", "", 2.0, coordenadas0, 3497.4623575525, false, 3497.4623575525, "", "", 3550);
      voluntario0.getEmail();
      assertEquals(2.0, voluntario0.getRange(), 0.01);
      assertEquals(3497.4623575525, voluntario0.getVkm(), 0.01);
      assertEquals(3550, voluntario0.getCap());
      assertEquals(3497.4623575525, voluntario0.getClas(), 0.01);
      assertFalse(voluntario0.isMed());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("YbM5[[A)K%", "YbM5[[A)K%", 0.0, (Coordenadas) null, (-3724.910556), true, (-1572.5666), "YbM5[[A)K%", "", (-1));
      voluntario0.getCord();
      assertTrue(voluntario0.isMed());
      assertEquals("YbM5[[A)K%", voluntario0.getCod());
      assertEquals((-1572.5666), voluntario0.getVkm(), 0.01);
      assertEquals("YbM5[[A)K%", voluntario0.getNome());
      assertEquals("", voluntario0.getPass());
      assertEquals((-1), voluntario0.getCap());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals("YbM5[[A)K%", voluntario0.getEmail());
      assertEquals((-3724.910556), voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2333.579, (-36.29379));
      Voluntario voluntario0 = new Voluntario("\" W+]FM:?d,<", "\" W+]FM:?d,<", 2333.579, coordenadas0, 0.0, false, 1.0, "\" W+]FM:?d,<", "\" W+]FM:?d,<", (-1));
      voluntario0.getCord();
      assertEquals(2333.579, voluntario0.getRange(), 0.01);
      assertEquals(1.0, voluntario0.getVkm(), 0.01);
      assertEquals((-1), voluntario0.getCap());
      assertFalse(voluntario0.isMed());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 1.0);
      Voluntario voluntario0 = new Voluntario("", "9pi6", 0.0, coordenadas0, 0.0, false, 1.0, "", "", (-260));
      coordenadas0.setX(1.0);
      voluntario0.getCord();
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals("9pi6", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals((-260), voluntario0.getCap());
      assertEquals(1.0, voluntario0.getVkm(), 0.01);
      assertEquals("", voluntario0.getCod());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertFalse(voluntario0.isMed());
      assertEquals("", voluntario0.getPass());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2.0, 2.0);
      coordenadas0.setX((-3092.767129858994));
      Voluntario voluntario0 = new Voluntario((String) null, "traz_aqui.Voluntario", 2.0, coordenadas0, 1.0, true, (-818.65669953105), "l4Gz*~&.Tgu;=fe[N{Y", "", (-911));
      voluntario0.getCord();
      assertEquals("traz_aqui.Voluntario", voluntario0.getNome());
      assertEquals("", voluntario0.getPass());
      assertEquals((-911), voluntario0.getCap());
      assertEquals(1.0, voluntario0.getClas(), 0.01);
      assertEquals((-818.65669953105), voluntario0.getVkm(), 0.01);
      assertEquals("l4Gz*~&.Tgu;=fe[N{Y", voluntario0.getEmail());
      assertEquals(2.0, voluntario0.getRange(), 0.01);
      assertTrue(voluntario0.isMed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2.0, 2.0);
      Voluntario voluntario0 = new Voluntario((String) null, "traz_aqui.Voluntario", 2.0, coordenadas0, 1.0, true, (-818.65669953105), "l4Gz*~&.Tgu;=fe[N{Y", "", (-911));
      String string0 = voluntario0.getCod();
      assertEquals("l4Gz*~&.Tgu;=fe[N{Y", voluntario0.getEmail());
      assertEquals(2.0, voluntario0.getRange(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals((-818.65669953105), voluntario0.getVkm(), 0.01);
      assertEquals("", voluntario0.getPass());
      assertEquals((-911), voluntario0.getCap());
      assertEquals(1.0, voluntario0.getClas(), 0.01);
      assertNull(string0);
      assertEquals("traz_aqui.Voluntario", voluntario0.getNome());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "", 0.0, (Coordenadas) null, 1.0, false, 1.0, "", "", 0);
      voluntario0.getCod();
      assertFalse(voluntario0.isMed());
      assertEquals(1.0, voluntario0.getVkm(), 0.01);
      assertEquals(1.0, voluntario0.getClas(), 0.01);
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals(0, voluntario0.getCap());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario((String) null, "", 0.0, coordenadas0, 0.0, true, (-1367.106974), (String) null, (String) null, (-1021));
      double double0 = voluntario0.getClas();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1021), voluntario0.getCap());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals((-1367.106974), voluntario0.getVkm(), 0.01);
      assertTrue(voluntario0.isMed());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2.0, 2.0);
      Voluntario voluntario0 = new Voluntario("E>xY=vW~DKMU", ".=&vZx", 2.0, coordenadas0, 2.0, false, 0.0, "", "", 0);
      double double0 = voluntario0.getClas();
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertEquals(".=&vZx", voluntario0.getNome());
      assertFalse(voluntario0.isMed());
      assertEquals(2.0, double0, 0.01);
      assertEquals("E>xY=vW~DKMU", voluntario0.getCod());
      assertEquals("", voluntario0.getEmail());
      assertEquals(2.0, voluntario0.getRange(), 0.01);
      assertEquals("", voluntario0.getPass());
      assertEquals(0, voluntario0.getCap());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 40.49741976187);
      Voluntario voluntario0 = new Voluntario("s8W'7UJdsQc_Xu>U", (String) null, 0.0, coordenadas0, 40.49741976187, true, 0.0, (String) null, "s8W'7UJdsQc_Xu>U", 0);
      voluntario0.aumCap();
      int int0 = voluntario0.getCap();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario((String) null, "", 0.0, coordenadas0, 0.0, true, (-1367.106974), (String) null, (String) null, (-1021));
      int int0 = voluntario0.getCap();
      assertEquals((-1021), int0);
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals((-1367.106974), voluntario0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(812.16777, 812.16777);
      coordenadas0.setX((-1.0));
      Coordenadas coordenadas1 = new Coordenadas(coordenadas0);
      coordenadas1.setX(812.16777);
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, (-1.0), coordenadas1, 0.0, false, (-1.0), "traz_aqui.Coordenadas", (String) null, (-969));
      voluntario0.distanceV(coordenadas0);
      assertEquals((-1.0), voluntario0.getRange(), 0.01);
      assertEquals((-1.0), voluntario0.getVkm(), 0.01);
      assertEquals((-969), voluntario0.getCap());
      assertFalse(voluntario0.isMed());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2790.2633637145195), (-2790.2633637145195));
      Voluntario voluntario0 = new Voluntario("", "", (-2790.2633637145195), coordenadas0, (-2790.2633637145195), false, (-2790.2633637145195), "", "", 1);
      voluntario0.setVkm(0.0);
      voluntario0.clone();
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1909.0, 0.0);
      Voluntario voluntario0 = new Voluntario("+wI;$.e", "+wI;$.e", 1909.0, coordenadas0, 0.0, false, 1909.0, ":xy+`*$:jz:", "+wI;$.e", 1);
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals(":xy+`*$:jz:", voluntario1.getEmail());
      assertEquals(1, voluntario1.getCap());
      assertEquals(1909.0, voluntario1.getRange(), 0.01);
      assertEquals("+wI;$.e", voluntario1.getNome());
      assertEquals(1909.0, voluntario1.getVkm(), 0.01);
      assertEquals(1909.0, voluntario0.getVkm(), 0.01);
      assertEquals("+wI;$.e", voluntario1.getCod());
      assertEquals(1, voluntario0.getCap());
      assertEquals(1909.0, voluntario0.getRange(), 0.01);
      assertFalse(voluntario1.isMed());
      assertEquals("+wI;$.e", voluntario1.getPass());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario(" tE W", "&e]b4]{  ZXk}0.", (-2423.981), coordenadas0, 1.0, true, (-2423.981), "traz_aqui.Coordenadas", "- Y:", 1244);
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals(1244, voluntario1.getCap());
      assertEquals(" tE W", voluntario1.getCod());
      assertEquals((-2423.981), voluntario0.getVkm(), 0.01);
      assertTrue(voluntario1.isMed());
      assertEquals(1.0, voluntario1.getClas(), 0.01);
      assertEquals(1.0, voluntario0.getClas(), 0.01);
      assertEquals("traz_aqui.Coordenadas", voluntario1.getEmail());
      assertEquals(1244, voluntario0.getCap());
      assertEquals((-2423.981), voluntario1.getVkm(), 0.01);
      assertEquals("&e]b4]{  ZXk}0.", voluntario1.getNome());
      assertEquals((-2423.981), voluntario0.getRange(), 0.01);
      assertEquals((-2423.981), voluntario1.getRange(), 0.01);
      assertEquals("- Y:", voluntario1.getPass());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2790.2633637145195), (-2790.2633637145195));
      Voluntario voluntario0 = new Voluntario("", "", (-2790.2633637145195), coordenadas0, (-2790.2633637145195), false, (-2790.2633637145195), "", "", 1);
      assertEquals(1, voluntario0.getCap());
      
      voluntario0.dimCap();
      voluntario0.clone();
      assertEquals(0, voluntario0.getCap());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario((String) null, "", 0.0, coordenadas0, 0.0, true, (-1367.106974), (String) null, (String) null, (-1021));
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals((-1367.106974), voluntario1.getVkm(), 0.01);
      assertEquals((-1367.106974), voluntario0.getVkm(), 0.01);
      assertEquals((-1021), voluntario1.getCap());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertTrue(voluntario1.isMed());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals((-1021), voluntario0.getCap());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Voluntario voluntario0 = new Voluntario("q7S:ouUzXpBY|SWrZ", "q7S:ouUzXpBY|SWrZ", 3116.0, coordenadas0, 3116.0, true, 3116.0, "_T$?XUx4Htb.M4[", "q7S:ouUzXpBY|SWrZ", (-3690));
      Double double0 = new Double(0.0);
      double double1 = voluntario0.calcTemp(coordenadas0, coordenadas0, double0);
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getCod());
      assertEquals(0.0, double1, 0.01);
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getNome());
      assertEquals(3116.0, voluntario0.getClas(), 0.01);
      assertEquals((-3690), voluntario0.getCap());
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getPass());
      assertEquals(3116.0, voluntario0.getVkm(), 0.01);
      assertEquals("_T$?XUx4Htb.M4[", voluntario0.getEmail());
      assertTrue(voluntario0.isMed());
      assertEquals(3116.0, voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario("- Y:", "- Y:", 0.0, coordenadas0, 0.0, false, 110.85118009, "- Y:", (String) null, 0);
      Double double0 = new Double(1997.0);
      double double1 = voluntario0.calcTemp(coordenadas0, coordenadas0, double0);
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals(1997.0, double1, 0.01);
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertFalse(voluntario0.isMed());
      assertEquals(110.85118009, voluntario0.getVkm(), 0.01);
      assertEquals(0, voluntario0.getCap());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(999.9939473921, 0.0);
      Voluntario voluntario0 = new Voluntario("", "zY", (-1280.37899), coordenadas0, 0.0, false, 160.565816711, "", "", 4526);
      // Undeclared exception!
      try { 
        voluntario0.isRangeV(coordenadas0, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("!yQDE7-a~(B)P", (String) null, 0.0, (Coordenadas) null, 0.0, true, (-6433.5011443943), "", (String) null, 2032);
      // Undeclared exception!
      try { 
        voluntario0.distanceV((Coordenadas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Voluntario voluntario0 = new Voluntario("q7S:ouUzXpBY|SWrZ", "q7S:ouUzXpBY|SWrZ", 3116.0, coordenadas0, 3116.0, true, 3116.0, "_T$?XUx4Htb.M4[", "q7S:ouUzXpBY|SWrZ", (-3690));
      Double double0 = new Double((-940.161189201));
      // Undeclared exception!
      try { 
        voluntario0.calcTemp(coordenadas0, (Coordenadas) null, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Voluntario voluntario0 = null;
      try {
        voluntario0 = new Voluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-356.18), (-356.18));
      Voluntario voluntario0 = new Voluntario("", "", (-356.18), coordenadas0, (-356.18), false, (-356.18), "", "", 0);
      int int0 = voluntario0.getCap();
      assertEquals(0, int0);
      assertEquals((-356.18), voluntario0.getRange(), 0.01);
      assertFalse(voluntario0.isMed());
      assertEquals((-356.18), voluntario0.getVkm(), 0.01);
      assertEquals((-356.18), voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Voluntario voluntario0 = new Voluntario("q7S:ouUzXpBY|SWrZ", "q7S:ouUzXpBY|SWrZ", 3116.0, coordenadas0, 3116.0, true, 3116.0, "_T$?XUx4Htb.M4[", "q7S:ouUzXpBY|SWrZ", (-3690));
      String string0 = voluntario0.getEmail();
      assertEquals("_T$?XUx4Htb.M4[", string0);
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getNome());
      assertEquals(3116.0, voluntario0.getVkm(), 0.01);
      assertEquals(3116.0, voluntario0.getClas(), 0.01);
      assertEquals((-3690), voluntario0.getCap());
      assertEquals(3116.0, voluntario0.getRange(), 0.01);
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getPass());
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getCod());
      assertTrue(voluntario0.isMed());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-356.18), (-356.18));
      Voluntario voluntario0 = new Voluntario("", "", (-356.18), coordenadas0, (-356.18), false, (-356.18), "", "", 0);
      double double0 = voluntario0.getRange();
      assertEquals((-356.18), double0, 0.01);
      assertFalse(voluntario0.isMed());
      assertEquals((-356.18), voluntario0.getVkm(), 0.01);
      assertEquals(0, voluntario0.getCap());
      assertEquals((-356.18), voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, 0.0, coordenadas0, 0.0, true, 135.451177777, (String) null, "eD{N*v!F ;S[.I", (-2983));
      double double0 = voluntario0.getVkm();
      assertEquals(135.451177777, double0, 0.01);
      assertEquals((-2983), voluntario0.getCap());
      assertTrue(voluntario0.isMed());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals(0.0, voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2.0, 2.0);
      Voluntario voluntario0 = new Voluntario("E>xY=vW~DKMU", ".=&vZx", 2.0, coordenadas0, 2.0, false, 0.0, "", "", 0);
      String string0 = voluntario0.getCod();
      assertEquals(2.0, voluntario0.getClas(), 0.01);
      assertEquals(".=&vZx", voluntario0.getNome());
      assertEquals("E>xY=vW~DKMU", string0);
      assertEquals("", voluntario0.getPass());
      assertEquals(0, voluntario0.getCap());
      assertFalse(voluntario0.isMed());
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals(2.0, voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-129.69570177081246), (-129.69570177081246));
      Voluntario voluntario0 = new Voluntario("- Y:", "", (-129.69570177081246), coordenadas0, (-129.69570177081246), true, (-129.69570177081246), "- Y:", "- Y:", (-265));
      String string0 = voluntario0.getPass();
      assertEquals("- Y:", string0);
      assertEquals("- Y:", voluntario0.getEmail());
      assertEquals((-129.69570177081246), voluntario0.getRange(), 0.01);
      assertEquals("- Y:", voluntario0.getCod());
      assertEquals((-129.69570177081246), voluntario0.getClas(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertTrue(voluntario0.isMed());
      assertEquals((-129.69570177081246), voluntario0.getVkm(), 0.01);
      assertEquals((-265), voluntario0.getCap());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), (-1.0));
      Voluntario voluntario0 = new Voluntario("yJG`9oVgCMP';c!Sq)", "yJG`9oVgCMP';c!Sq)", (-1.0), coordenadas0, 0.0, false, 1.0, (String) null, "yJG`9oVgCMP';c!Sq)", 749);
      Voluntario voluntario1 = new Voluntario(voluntario0);
      assertEquals((-1.0), voluntario1.getRange(), 0.01);
      assertEquals((-1.0), voluntario0.getRange(), 0.01);
      assertFalse(voluntario1.isMed());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals(1.0, voluntario1.getVkm(), 0.01);
      assertEquals(1.0, voluntario0.getVkm(), 0.01);
      assertEquals(749, voluntario0.getCap());
      assertEquals(749, voluntario1.getCap());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-448.7355531010157));
      Voluntario voluntario0 = new Voluntario("", "", (-2654.2739700311), coordenadas0, (-474.54375833401264), false, (-448.7355531010157), "- Y:", "- Y:", 0);
      double double0 = voluntario0.getClas();
      assertEquals((-474.54375833401264), double0, 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals((-448.7355531010157), voluntario0.getVkm(), 0.01);
      assertEquals("", voluntario0.getCod());
      assertEquals("- Y:", voluntario0.getEmail());
      assertEquals(0, voluntario0.getCap());
      assertEquals("- Y:", voluntario0.getPass());
      assertFalse(voluntario0.isMed());
      assertEquals((-2654.2739700311), voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, 0.0, coordenadas0, 0.0, true, 135.451177777, (String) null, "eD{N*v!F ;S[.I", (-2983));
      voluntario0.getCord();
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals((-2983), voluntario0.getCap());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals(135.451177777, voluntario0.getVkm(), 0.01);
      assertTrue(voluntario0.isMed());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario((String) null, "", 0.0, coordenadas0, 0.0, true, (-1367.106974), (String) null, (String) null, (-1021));
      boolean boolean0 = voluntario0.isMed();
      assertTrue(boolean0);
      assertEquals((-1021), voluntario0.getCap());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals((-1367.106974), voluntario0.getVkm(), 0.01);
      assertEquals(0.0, voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2579.4303825, 0.0);
      Voluntario voluntario0 = new Voluntario("traz_aqui.Coordenadas", "traz_aqui.Coordenadas", 0.0, coordenadas0, (-2006.566081617), false, 2.0, "- Y:", "", 3232);
      String string0 = voluntario0.getNome();
      assertEquals("traz_aqui.Coordenadas", string0);
      assertEquals("traz_aqui.Coordenadas", voluntario0.getCod());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals(3232, voluntario0.getCap());
      assertEquals(2.0, voluntario0.getVkm(), 0.01);
      assertEquals((-2006.566081617), voluntario0.getClas(), 0.01);
      assertEquals("", voluntario0.getPass());
      assertEquals("- Y:", voluntario0.getEmail());
      assertFalse(voluntario0.isMed());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2790.2633637145195), (-2790.2633637145195));
      Voluntario voluntario0 = new Voluntario("", "", (-2790.2633637145195), coordenadas0, (-2790.2633637145195), false, (-2790.2633637145195), "", "", 1);
      assertEquals(1, voluntario0.getCap());
      
      voluntario0.dimCap();
      voluntario0.dimCap();
      assertEquals(0, voluntario0.getCap());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(4609.678323704, 4609.678323704);
      Voluntario voluntario0 = new Voluntario("", "", 4609.678323704, coordenadas0, (-1.0), true, (-1.0), "", "", 3363);
      voluntario0.changeR((-1.0));
      assertEquals((-1.0), voluntario0.getClas(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals(4609.678323704, voluntario0.getRange(), 0.01);
      assertEquals((-1.0), voluntario0.getVkm(), 0.01);
      assertEquals(3363, voluntario0.getCap());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("!yQDE7-a~(B)P", (String) null, 0.0, (Coordenadas) null, 0.0, true, (-6433.5011443943), "", (String) null, 2032);
      voluntario0.changeR((-1887.432184534439));
      assertEquals((-1887.432184534439), voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2790.2633637145195), (-2790.2633637145195));
      Voluntario voluntario0 = new Voluntario("", "", (-2790.2633637145195), coordenadas0, (-2790.2633637145195), false, (-2790.2633637145195), "", "", 1);
      voluntario0.setEmail("X: -2790.2633637145195- Y:-2790.2633637145195");
      assertEquals((-2790.2633637145195), voluntario0.getRange(), 0.01);
      assertFalse(voluntario0.isMed());
      assertEquals((-2790.2633637145195), voluntario0.getClas(), 0.01);
      assertEquals(1, voluntario0.getCap());
      assertEquals((-2790.2633637145195), voluntario0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("!yQDE7-a~(B)P", (String) null, 0.0, (Coordenadas) null, 0.0, true, (-6433.5011443943), "", (String) null, 2032);
      voluntario0.setMed(true);
      assertEquals((-6433.5011443943), voluntario0.getVkm(), 0.01);
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals(2032, voluntario0.getCap());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals("!yQDE7-a~(B)P", voluntario0.getCod());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(724.375, 724.375);
      Voluntario voluntario0 = new Voluntario(">zkZW\"/", ">zkZW\"/", 724.375, coordenadas0, 724.375, true, 724.375, ">zkZW\"/", ">zkZW\"/", 557);
      voluntario0.setPass(">zkZW\"/");
      assertEquals(724.375, voluntario0.getClas(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals(557, voluntario0.getCap());
      assertEquals(724.375, voluntario0.getVkm(), 0.01);
      assertEquals(724.375, voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2790.2633637145195), (-2790.2633637145195));
      Voluntario voluntario0 = new Voluntario("", "", (-2790.2633637145195), coordenadas0, (-2790.2633637145195), false, (-2790.2633637145195), "", "", 1);
      voluntario0.setClas((-2790.2633637145195));
      assertEquals((-2790.2633637145195), voluntario0.getRange(), 0.01);
      assertFalse(voluntario0.isMed());
      assertEquals(1, voluntario0.getCap());
      assertEquals((-2790.2633637145195), voluntario0.getClas(), 0.01);
      assertEquals((-2790.2633637145195), voluntario0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Voluntario voluntario0 = new Voluntario("q7S:ouUzXpBY|SWrZ", "q7S:ouUzXpBY|SWrZ", 3116.0, coordenadas0, 3116.0, true, 3116.0, "_T$?XUx4Htb.M4[", "q7S:ouUzXpBY|SWrZ", (-3690));
      voluntario0.setCap((-3690));
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getNome());
      assertEquals(3116.0, voluntario0.getClas(), 0.01);
      assertEquals("_T$?XUx4Htb.M4[", voluntario0.getEmail());
      assertTrue(voluntario0.isMed());
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getPass());
      assertEquals(3116.0, voluntario0.getRange(), 0.01);
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getCod());
      assertEquals((-3690), voluntario0.getCap());
      assertEquals(3116.0, voluntario0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2790.2633637145195), (-2790.2633637145195));
      Voluntario voluntario0 = new Voluntario("", "", (-2790.2633637145195), coordenadas0, (-2790.2633637145195), false, (-2790.2633637145195), "", "", 1);
      voluntario0.distanceV(coordenadas0);
      assertEquals((-2790.2633637145195), voluntario0.getRange(), 0.01);
      assertEquals((-2790.2633637145195), voluntario0.getVkm(), 0.01);
      assertEquals(1, voluntario0.getCap());
      assertFalse(voluntario0.isMed());
      assertEquals((-2790.2633637145195), voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1.0);
      Voluntario voluntario0 = new Voluntario("traz_aquc.C(ordenada", "traz_aquc.C(ordenada", 1.0, coordenadas0, 1.0, false, 1.0, "traz_aquc.C(ordenada", "traz_aquc.C(ordenada", 1576);
      voluntario0.setCod("traz_aquc.C(ordenada");
      assertEquals(1.0, voluntario0.getClas(), 0.01);
      assertEquals(1576, voluntario0.getCap());
      assertFalse(voluntario0.isMed());
      assertEquals(1.0, voluntario0.getVkm(), 0.01);
      assertEquals(1.0, voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Voluntario voluntario0 = new Voluntario("q7S:ouUzXpBY|SWrZ", "q7S:ouUzXpBY|SWrZ", 3116.0, coordenadas0, 3116.0, true, 3116.0, "_T$?XUx4Htb.M4[", "q7S:ouUzXpBY|SWrZ", (-3690));
      Double double0 = new Double((-940.161189201));
      double double1 = voluntario0.calcTemp(coordenadas0, coordenadas0, double0);
      assertTrue(voluntario0.isMed());
      assertEquals("_T$?XUx4Htb.M4[", voluntario0.getEmail());
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getPass());
      assertEquals(3116.0, voluntario0.getRange(), 0.01);
      assertEquals(3116.0, voluntario0.getClas(), 0.01);
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getNome());
      assertEquals((-940.161189201), double1, 0.01);
      assertEquals((-3690), voluntario0.getCap());
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getCod());
      assertEquals(3116.0, voluntario0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Voluntario voluntario0 = new Voluntario("q7S:ouUzXpBY|SWrZ", "q7S:ouUzXpBY|SWrZ", 3116.0, coordenadas0, 3116.0, true, 3116.0, "_T$?XUx4Htb.M4[", "q7S:ouUzXpBY|SWrZ", (-3690));
      Double double0 = new Double((-940.161189201));
      voluntario0.isRangeV(coordenadas0, double0);
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getPass());
      assertEquals((-3690), voluntario0.getCap());
      assertEquals(3116.0, voluntario0.getRange(), 0.01);
      assertEquals("_T$?XUx4Htb.M4[", voluntario0.getEmail());
      assertTrue(voluntario0.isMed());
      assertEquals(3116.0, voluntario0.getVkm(), 0.01);
      assertEquals(3116.0, voluntario0.getClas(), 0.01);
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getCod());
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getNome());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2790.2633637145195), (-2790.2633637145195));
      Voluntario voluntario0 = new Voluntario("", "", (-2790.2633637145195), coordenadas0, (-2790.2633637145195), false, (-2790.2633637145195), "", "", 1);
      voluntario0.setCord(coordenadas0);
      assertEquals(1, voluntario0.getCap());
      assertEquals((-2790.2633637145195), voluntario0.getClas(), 0.01);
      assertFalse(voluntario0.isMed());
      assertEquals((-2790.2633637145195), voluntario0.getRange(), 0.01);
      assertEquals((-2790.2633637145195), voluntario0.getVkm(), 0.01);
  }
}
