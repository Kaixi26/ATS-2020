/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 20 00:36:34 GMT 2020
 */

package traz_aqui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import traz_aqui.LinhaEncomenda;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinhaEncomenda_ESTest extends LinhaEncomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("31:[-Fa9D=,c4", "", 0.0, 0.0);
      double double0 = linhaEncomenda0.getQnt();
      assertEquals("31:[-Fa9D=,c4", linhaEncomenda0.getCproduto());
      assertEquals(0.0, double0, 0.01);
      assertEquals("", linhaEncomenda0.getDesc());
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", (-1334.0), (-1334.0));
      double double0 = linhaEncomenda0.getQnt();
      assertEquals((-1334.0), double0, 0.01);
      assertEquals((-1334.0), linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("pH", "pH", 851.1219, 0.0);
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(851.1219, linhaEncomenda0.getQnt(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("=*W", "", (-2741.668691089), (-2913.7349699));
      double double0 = linhaEncomenda0.getPreco();
      assertEquals((-2741.668691089), linhaEncomenda0.getQnt(), 0.01);
      assertEquals((-2913.7349699), double0, 0.01);
      assertEquals("", linhaEncomenda0.getDesc());
      assertEquals("=*W", linhaEncomenda0.getCproduto());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 1.0, 1.0);
      linhaEncomenda0.getDesc();
      assertEquals(1.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(1.0, linhaEncomenda0.getQnt(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 1.0, 1.0);
      linhaEncomenda0.setDesc("");
      linhaEncomenda0.getDesc();
      assertEquals(1.0, linhaEncomenda0.getQnt(), 0.01);
      assertEquals(1.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, (-2078.508), (-2078.508));
      linhaEncomenda0.getCproduto();
      assertEquals((-2078.508), linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-2078.508), linhaEncomenda0.getQnt(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "v", 0.0, 0.0);
      String string0 = linhaEncomenda0.getCproduto();
      assertEquals("v", linhaEncomenda0.getDesc());
      assertEquals("", string0);
      assertEquals(0.0, linhaEncomenda0.getQnt(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("pH", "pH", 851.1219, 0.0);
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(851.1219, linhaEncomenda0.getQnt(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(851.1219, linhaEncomenda1.getQnt(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 0.0, 0.0);
      linhaEncomenda0.setPreco(4322.997172281411);
      linhaEncomenda0.clone();
      assertEquals(4322.997172281411, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = null;
      try {
        linhaEncomenda0 = new LinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 1.0, 1.0);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      assertEquals(1.0, linhaEncomenda0.getQnt(), 0.01);
      assertEquals(1.0, linhaEncomenda1.getPreco(), 0.01);
      assertEquals(1.0, linhaEncomenda1.getQnt(), 0.01);
      assertEquals(1.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 1.0, 1.0);
      double double0 = linhaEncomenda0.getQnt();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Linha Encomenda: ", "", 1402.52963218895, 1402.52963218895);
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(1402.52963218895, double0, 0.01);
      assertEquals(1402.52963218895, linhaEncomenda0.getQnt(), 0.01);
      assertEquals("Linha Encomenda: ", linhaEncomenda0.getCproduto());
      assertEquals("", linhaEncomenda0.getDesc());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "v", 0.0, 0.0);
      String string0 = linhaEncomenda0.getDesc();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals("v", string0);
      assertEquals("", linhaEncomenda0.getCproduto());
      assertEquals(0.0, linhaEncomenda0.getQnt(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("pH", "pH", 851.1219, 0.0);
      linhaEncomenda0.getCproduto();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(851.1219, linhaEncomenda0.getQnt(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(", ", ", ", (-1172.6523169139439), (-1172.6523169139439));
      linhaEncomenda0.setQnt((-1172.6523169139439));
      assertEquals((-1172.6523169139439), linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-1172.6523169139439), linhaEncomenda0.getQnt(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(", ", ", ", (-1172.6523169139439), (-1172.6523169139439));
      String string0 = linhaEncomenda0.toString();
      assertEquals("Linha Encomenda: , , , , -1172.6523169139439, -1172.6523169139439", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(", ", ", ", (-1172.6523169139439), (-1172.6523169139439));
      linhaEncomenda0.setCproduto(", ");
      assertEquals((-1172.6523169139439), linhaEncomenda0.getQnt(), 0.01);
      assertEquals((-1172.6523169139439), linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(", ", ", ", (-1172.6523169139439), (-1172.6523169139439));
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals((-1172.6523169139439), linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-1172.6523169139439), linhaEncomenda1.getQnt(), 0.01);
      assertEquals((-1172.6523169139439), linhaEncomenda1.getPreco(), 0.01);
      assertEquals((-1172.6523169139439), linhaEncomenda0.getQnt(), 0.01);
  }
}
