package traz_aqui;/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 20 00:31:17 GMT 2020
 */

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transportadoras_ESTest extends Transportadoras_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-3580.420658592), (-2359.6442032171));
      Transportadoras transportadoras0 = new Transportadoras("", "Ga@F", coordenadas0, (-320.0), (-2359.6442032171), 0.0, (-1.0), false, (-3044.7645921), "", "", (-3580.420658592), (-1));
      transportadoras0.dimCap();
      assertEquals((-2), transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2867.549395797932), (-300.27));
      Transportadoras transportadoras0 = new Transportadoras("27 R*lMM'p", "27 R*lMM'p", coordenadas0, (-300.27), (-2867.549395797932), (-1.0), (-2867.549395797932), true, (-1.0), "27 R*lMM'p", "", 1824.2646796764482, 1252);
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      transportadoras1.changeR((-1860.909138651114));
      assertEquals((-1860.909138651114), transportadoras1.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-3123.966), (-3123.966));
      Coordenadas coordenadas1 = new Coordenadas(coordenadas0);
      coordenadas0.setX(6155.59);
      Transportadoras transportadoras0 = new Transportadoras("(gK", "", coordenadas1, (-2334.832), 1.0, (-3123.966), 0.0, true, 2.0, (String) null, "", 1.0, 3577);
      Double double0 = new Double(0.0);
      double double1 = transportadoras0.calcTemp(coordenadas0, coordenadas1, double0);
      assertEquals(9279.556, double1, 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals("", transportadoras0.getPass());
      assertEquals((-2334.832), transportadoras0.getRange(), 0.01);
      assertEquals("(gK", transportadoras0.getCod());
      assertEquals("", transportadoras0.getNome());
      assertEquals(1.0, transportadoras0.getKmp(), 0.01);
      assertEquals(3577, transportadoras0.getCap());
      assertTrue(transportadoras0.isMed());
      assertEquals(1.0, transportadoras0.getPrkm(), 0.01);
      assertEquals((-3123.966), transportadoras0.getNif(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), 0.0);
      Coordenadas coordenadas1 = new Coordenadas(coordenadas0);
      Transportadoras transportadoras0 = new Transportadoras("0>L)iUvUy;6?L", "shS ", coordenadas1, 0.0, 0.5, 0.0, (-1.0), false, (-1.0), "0>L)iUvUy;6?L", "0>L)iUvUy;6?L", 0.0, 0);
      // Undeclared exception!
      try { 
        transportadoras0.calcTemp(coordenadas0, coordenadas1, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2190.821742831), 0.0);
      Transportadoras transportadoras0 = new Transportadoras("G,qLXxl'QU<p}ZNT5N", "", coordenadas0, (-1087.187761099764), 0.0, 0.0, 0.0, false, 0.0, "G,qLXxl'QU<p}ZNT5N", "G,qLXxl'QU<p}ZNT5N", (-1087.187761099764), 0);
      transportadoras0.setKmp(0.0);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals((-1087.187761099764), transportadoras0.getKmp(), 0.01);
      assertEquals((-1087.187761099764), transportadoras0.getRange(), 0.01);
      assertEquals(0, transportadoras0.getCap());
      assertFalse(transportadoras0.isMed());
      assertEquals("G,qLXxl'QU<p}ZNT5N", transportadoras0.getPass());
      assertEquals("G,qLXxl'QU<p}ZNT5N", transportadoras0.getCod());
      assertEquals("", transportadoras0.getNome());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals("G,qLXxl'QU<p}ZNT5N", transportadoras0.getEmail());
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(645.369073882, 0.5);
      Transportadoras transportadoras0 = new Transportadoras("traz_aqui.Transportadoras", "traz_aqui.Transportadoras", coordenadas0, 0.5, 1552.10724, 0.5, 0.0, false, 1.0, "~-UO(a\",.\"a37", "t0m<Lux}0aY3y`s2yQ", 0.5, (-1));
      Double double0 = new Double(0.0);
      transportadoras0.isRangeT(coordenadas0, double0);
      assertEquals(0.5, transportadoras0.getNif(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(0.5, transportadoras0.getKmp(), 0.01);
      assertEquals(1552.10724, transportadoras0.getPrkm(), 0.01);
      assertEquals("t0m<Lux}0aY3y`s2yQ", transportadoras0.getPass());
      assertEquals((-1), transportadoras0.getCap());
      assertEquals("traz_aqui.Transportadoras", transportadoras0.getCod());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals(0.5, transportadoras0.getRange(), 0.01);
      assertEquals(1.0, transportadoras0.getVkm(), 0.01);
      assertEquals("traz_aqui.Transportadoras", transportadoras0.getNome());
      assertEquals("~-UO(a\",.\"a37", transportadoras0.getEmail());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2836.0), 1732.552);
      Transportadoras transportadoras0 = new Transportadoras("51<lgw`", "- Y:", coordenadas0, 3587.96748, (-2836.0), 3587.96748, 1732.552, false, 0.0, "- Y:", "]x=E2j.ww", (-863.0), 1);
      boolean boolean0 = transportadoras0.isMed();
      assertEquals((-863.0), transportadoras0.getKmp(), 0.01);
      assertEquals((-2836.0), transportadoras0.getPrkm(), 0.01);
      assertEquals(3587.96748, transportadoras0.getNif(), 0.01);
      assertEquals(1, transportadoras0.getCap());
      assertEquals("- Y:", transportadoras0.getEmail());
      assertEquals("]x=E2j.ww", transportadoras0.getPass());
      assertFalse(boolean0);
      assertEquals("- Y:", transportadoras0.getNome());
      assertEquals(3587.96748, transportadoras0.getRange(), 0.01);
      assertEquals(1732.552, transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals("51<lgw`", transportadoras0.getCod());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 2371.8);
      Transportadoras transportadoras0 = new Transportadoras("w%6=", "w%6=", coordenadas0, 2371.8, 2371.8, 2371.8, 1611.744, true, 1611.744, "w%6=", "w%6=", 1.0, 2257);
      double double0 = transportadoras0.getVkm();
      assertEquals(1611.744, double0, 0.01);
      assertEquals(2371.8, transportadoras0.getRange(), 0.01);
      assertEquals(1.0, transportadoras0.getKmp(), 0.01);
      assertEquals(2257, transportadoras0.getCap());
      assertTrue(transportadoras0.isMed());
      assertEquals(1611.744, transportadoras0.getClas(), 0.01);
      assertEquals(2371.8, transportadoras0.getPrkm(), 0.01);
      assertEquals(2371.8, transportadoras0.getNif(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 0.0, 0.0, 0.0, 0.0, true, (-1104.2), "_vU^o,Z", (String) null, (-1104.2), 1338);
      double double0 = transportadoras0.getVkm();
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(1338, transportadoras0.getCap());
      assertEquals((-1104.2), double0, 0.01);
      assertEquals("", transportadoras0.getNome());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals((-1104.2), transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals("_vU^o,Z", transportadoras0.getEmail());
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals("", transportadoras0.getCod());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 0.0, 0.0, 0.0, 0.0, true, (-1104.2), "_vU^o,Z", (String) null, (-1104.2), 1338);
      double double0 = transportadoras0.getRange();
      assertEquals("_vU^o,Z", transportadoras0.getEmail());
      assertEquals((-1104.2), transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(1338, transportadoras0.getCap());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals("", transportadoras0.getNome());
      assertEquals(0.0, double0, 0.01);
      assertEquals("", transportadoras0.getCod());
      assertTrue(transportadoras0.isMed());
      assertEquals((-1104.2), transportadoras0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1560.14407511), (-1560.14407511));
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, (-1560.14407511), (-2901.7209315), (-2901.7209315), (-1560.14407511), true, (-1560.14407511), (String) null, (String) null, (-467.0), 618);
      double double0 = transportadoras0.getRange();
      assertEquals((-1560.14407511), transportadoras0.getClas(), 0.01);
      assertEquals((-1560.14407511), double0, 0.01);
      assertEquals((-2901.7209315), transportadoras0.getNif(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals((-2901.7209315), transportadoras0.getPrkm(), 0.01);
      assertEquals(618, transportadoras0.getCap());
      assertEquals((-1560.14407511), transportadoras0.getVkm(), 0.01);
      assertEquals((-467.0), transportadoras0.getKmp(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, (-1.0), 377.7108, 0.0, 0.0, false, (-1.0), "", "=*pDAjtX:q?Y<a 3", (-1.0), (-1));
      double double0 = transportadoras0.getPrkm();
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals("", transportadoras0.getNome());
      assertEquals((-1.0), transportadoras0.getVkm(), 0.01);
      assertEquals("", transportadoras0.getCod());
      assertEquals(377.7108, double0, 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals((-1.0), transportadoras0.getRange(), 0.01);
      assertEquals("", transportadoras0.getEmail());
      assertEquals((-1.0), transportadoras0.getKmp(), 0.01);
      assertEquals("=*pDAjtX:q?Y<a 3", transportadoras0.getPass());
      assertEquals((-1), transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.5, 0.5);
      Transportadoras transportadoras0 = new Transportadoras("traz_aqui.Transportadoras", "", coordenadas0, (-2492.400167482), (-1.0), (-1.0), (-2492.400167482), false, 2101.126, "traz_aqui.Transportadoras", "", 377.10626, 0);
      double double0 = transportadoras0.getPrkm();
      assertEquals(0, transportadoras0.getCap());
      assertEquals(2101.126, transportadoras0.getVkm(), 0.01);
      assertEquals((-2492.400167482), transportadoras0.getClas(), 0.01);
      assertEquals("traz_aqui.Transportadoras", transportadoras0.getCod());
      assertEquals((-1.0), transportadoras0.getNif(), 0.01);
      assertEquals("traz_aqui.Transportadoras", transportadoras0.getEmail());
      assertEquals("", transportadoras0.getNome());
      assertFalse(transportadoras0.isMed());
      assertEquals(377.10626, transportadoras0.getKmp(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-2492.400167482), transportadoras0.getRange(), 0.01);
      assertEquals("", transportadoras0.getPass());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1828.864, 1828.864);
      Transportadoras transportadoras0 = new Transportadoras("jFe613Q^", (String) null, coordenadas0, (-1.0), (-1.0), 0.0, (-1.0), true, 1.0, "!H~*X\"P)R;V", (String) null, 1828.864, (-3019));
      String string0 = transportadoras0.getPass();
      assertEquals((-1.0), transportadoras0.getPrkm(), 0.01);
      assertEquals(1828.864, transportadoras0.getKmp(), 0.01);
      assertEquals((-3019), transportadoras0.getCap());
      assertTrue(transportadoras0.isMed());
      assertEquals((-1.0), transportadoras0.getRange(), 0.01);
      assertEquals((-1.0), transportadoras0.getClas(), 0.01);
      assertNull(string0);
      assertEquals("!H~*X\"P)R;V", transportadoras0.getEmail());
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(1.0, transportadoras0.getVkm(), 0.01);
      assertEquals("jFe613Q^", transportadoras0.getCod());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras(";m5V5", "- Y:", coordenadas0, 0.0, (-4431.595600246045), (-598.3946138), 0.0, true, 0.0, "", "B.,v%!g3_", 0.0, 1);
      String string0 = transportadoras0.getPass();
      assertEquals("", transportadoras0.getEmail());
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals((-4431.595600246045), transportadoras0.getPrkm(), 0.01);
      assertEquals(1, transportadoras0.getCap());
      assertEquals(";m5V5", transportadoras0.getCod());
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals("- Y:", transportadoras0.getNome());
      assertTrue(transportadoras0.isMed());
      assertEquals((-598.3946138), transportadoras0.getNif(), 0.01);
      assertEquals("B.,v%!g3_", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1560.14407511), (-1560.14407511));
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, (-1560.14407511), (-2901.7209315), (-2901.7209315), (-1560.14407511), true, (-1560.14407511), (String) null, (String) null, (-467.0), 618);
      transportadoras0.getNome();
      assertEquals((-2901.7209315), transportadoras0.getPrkm(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals((-1560.14407511), transportadoras0.getClas(), 0.01);
      assertEquals(618, transportadoras0.getCap());
      assertEquals((-2901.7209315), transportadoras0.getNif(), 0.01);
      assertEquals((-1560.14407511), transportadoras0.getRange(), 0.01);
      assertEquals((-467.0), transportadoras0.getKmp(), 0.01);
      assertEquals((-1560.14407511), transportadoras0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1085.5, 1085.5);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 1085.5, 789.89, 789.89, 789.89, false, 789.89, "", "", 1085.5, (-1475));
      transportadoras0.getNome();
      assertEquals(789.89, transportadoras0.getClas(), 0.01);
      assertEquals(1085.5, transportadoras0.getKmp(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(789.89, transportadoras0.getPrkm(), 0.01);
      assertEquals(789.89, transportadoras0.getNif(), 0.01);
      assertEquals(1085.5, transportadoras0.getRange(), 0.01);
      assertEquals(789.89, transportadoras0.getVkm(), 0.01);
      assertEquals((-1475), transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, (-180.69831), 0.0, 0.0, 1342.17965, false, 0.0, "}h", "}h", 0.0, (-1));
      double double0 = transportadoras0.getNif();
      assertEquals((-1), transportadoras0.getCap());
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals((-180.69831), transportadoras0.getRange(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1342.17965, transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 0.0, 0.0, 3728.0454, 0.0, true, 2228.5, "I*;H42=%cPrD%M0", "I*;H42=%cPrD%M0", 0.0, 1337);
      double double0 = transportadoras0.getNif();
      assertEquals(3728.0454, double0, 0.01);
      assertEquals(2228.5, transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals("", transportadoras0.getCod());
      assertEquals("I*;H42=%cPrD%M0", transportadoras0.getEmail());
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals(1337, transportadoras0.getCap());
      assertEquals("I*;H42=%cPrD%M0", transportadoras0.getPass());
      assertEquals("", transportadoras0.getNome());
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("#t", "#t", (Coordenadas) null, (-2355.19), (-2355.19), (-2355.19), 0.0, false, (-1.0), "F", "", 0.0, (-2837));
      double double0 = transportadoras0.getKmp();
      assertFalse(transportadoras0.isMed());
      assertEquals("#t", transportadoras0.getCod());
      assertEquals("F", transportadoras0.getEmail());
      assertEquals((-2837), transportadoras0.getCap());
      assertEquals("#t", transportadoras0.getNome());
      assertEquals((-1.0), transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2355.19), transportadoras0.getRange(), 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals("", transportadoras0.getPass());
      assertEquals((-2355.19), transportadoras0.getNif(), 0.01);
      assertEquals((-2355.19), transportadoras0.getPrkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-102.6036309), (-102.6036309));
      Transportadoras transportadoras0 = new Transportadoras("", (String) null, coordenadas0, (-102.6036309), (-102.6036309), (-102.6036309), 0.5, true, 151.0134743, "v-!n%A", (String) null, 0.5, 1);
      double double0 = transportadoras0.getKmp();
      assertEquals("", transportadoras0.getCod());
      assertTrue(transportadoras0.isMed());
      assertEquals(0.5, double0, 0.01);
      assertEquals((-102.6036309), transportadoras0.getNif(), 0.01);
      assertEquals(1, transportadoras0.getCap());
      assertEquals((-102.6036309), transportadoras0.getPrkm(), 0.01);
      assertEquals("v-!n%A", transportadoras0.getEmail());
      assertEquals((-102.6036309), transportadoras0.getRange(), 0.01);
      assertEquals(151.0134743, transportadoras0.getVkm(), 0.01);
      assertEquals(0.5, transportadoras0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.5);
      Transportadoras transportadoras0 = new Transportadoras("s=", "s=", coordenadas0, 2.0, 2.0, (-1261.777181), 568.5, false, 0.0, (String) null, "", 2549.55036657785, (-248));
      String string0 = transportadoras0.getEmail();
      assertEquals(2.0, transportadoras0.getPrkm(), 0.01);
      assertEquals("", transportadoras0.getPass());
      assertEquals("s=", transportadoras0.getCod());
      assertEquals(2.0, transportadoras0.getRange(), 0.01);
      assertEquals(568.5, transportadoras0.getClas(), 0.01);
      assertEquals("s=", transportadoras0.getNome());
      assertEquals((-1261.777181), transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals(2549.55036657785, transportadoras0.getKmp(), 0.01);
      assertEquals((-248), transportadoras0.getCap());
      assertNull(string0);
      assertFalse(transportadoras0.isMed());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "- Y:", coordenadas0, (-1.0), 0.0, 1696.9662, (-1901.19595491548), true, (-1901.19595491548), (String) null, "- Y:", 0.0, 0);
      transportadoras0.setEmail("- Y:");
      transportadoras0.getEmail();
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals("- Y:", transportadoras0.getPass());
      assertEquals((-1901.19595491548), transportadoras0.getClas(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals(0, transportadoras0.getCap());
      assertEquals((-1.0), transportadoras0.getRange(), 0.01);
      assertEquals("", transportadoras0.getCod());
      assertEquals((-1901.19595491548), transportadoras0.getVkm(), 0.01);
      assertEquals("- Y:", transportadoras0.getNome());
      assertEquals(1696.9662, transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("0zn%tw6Q4Bskg", "0zn%tw6Q4Bskg", (Coordenadas) null, 1384.85, (-350.97), (-1855.856808904356), (-1855.856808904356), false, (-1855.856808904356), "0zn%tw6Q4Bskg", "0zn%tw6Q4Bskg", 411.091462859595, (-25));
      transportadoras0.getCord();
      assertEquals(411.091462859595, transportadoras0.getKmp(), 0.01);
      assertEquals((-25), transportadoras0.getCap());
      assertEquals((-1855.856808904356), transportadoras0.getNif(), 0.01);
      assertEquals((-1855.856808904356), transportadoras0.getVkm(), 0.01);
      assertEquals((-350.97), transportadoras0.getPrkm(), 0.01);
      assertEquals((-1855.856808904356), transportadoras0.getClas(), 0.01);
      assertEquals(1384.85, transportadoras0.getRange(), 0.01);
      assertFalse(transportadoras0.isMed());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), 1.0);
      coordenadas0.setY(0.0);
      Transportadoras transportadoras0 = new Transportadoras("6 tEml)vZGy", "<ot*XG&<fj}]13Vuw", coordenadas0, 0.0, 1.0, 347.20763773, (-2802.675), false, 2507.15129, "<ot*XG&<fj}]13Vuw", "6 tEml)vZGy", 2507.15129, (-1259));
      transportadoras0.getCord();
      assertEquals((-2802.675), transportadoras0.getClas(), 0.01);
      assertEquals(2507.15129, transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals("<ot*XG&<fj}]13Vuw", transportadoras0.getEmail());
      assertEquals((-1259), transportadoras0.getCap());
      assertEquals("6 tEml)vZGy", transportadoras0.getPass());
      assertEquals("<ot*XG&<fj}]13Vuw", transportadoras0.getNome());
      assertEquals("6 tEml)vZGy", transportadoras0.getCod());
      assertEquals(1.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(347.20763773, transportadoras0.getNif(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(2507.15129, transportadoras0.getKmp(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-3123.966), (-3123.966));
      coordenadas0.setX(0.0);
      Transportadoras transportadoras0 = new Transportadoras("(gK", "", coordenadas0, (-2334.832), 1.0, (-3123.966), 0.0, true, 2.0, (String) null, "", 1.0, 3577);
      transportadoras0.getCord();
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals(3577, transportadoras0.getCap());
      assertTrue(transportadoras0.isMed());
      assertEquals(1.0, transportadoras0.getKmp(), 0.01);
      assertEquals("", transportadoras0.getNome());
      assertEquals((-3123.966), transportadoras0.getNif(), 0.01);
      assertEquals(1.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(2.0, transportadoras0.getVkm(), 0.01);
      assertEquals("(gK", transportadoras0.getCod());
      assertEquals((-2334.832), transportadoras0.getRange(), 0.01);
      assertEquals("", transportadoras0.getPass());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 3472.50565519914);
      coordenadas0.setX(1709.4704099);
      Transportadoras transportadoras0 = new Transportadoras("?W{0Bn%6Y", "zVY%/}=.", coordenadas0, 1709.4704099, 1709.4704099, 0.0, (-53.4), true, (-53.4), "?W{0Bn%6Y", "4?uS7", 3472.50565519914, 1);
      transportadoras0.getCord();
      assertEquals("zVY%/}=.", transportadoras0.getNome());
      assertTrue(transportadoras0.isMed());
      assertEquals("?W{0Bn%6Y", transportadoras0.getEmail());
      assertEquals(1709.4704099, transportadoras0.getRange(), 0.01);
      assertEquals(1, transportadoras0.getCap());
      assertEquals((-53.4), transportadoras0.getVkm(), 0.01);
      assertEquals(3472.50565519914, transportadoras0.getKmp(), 0.01);
      assertEquals("4?uS7", transportadoras0.getPass());
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(1709.4704099, transportadoras0.getPrkm(), 0.01);
      assertEquals((-53.4), transportadoras0.getClas(), 0.01);
      assertEquals("?W{0Bn%6Y", transportadoras0.getCod());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, 0.5, 0.0, (-694.7342), 1.0, true, 0.0, "H", (String) null, 0.0, 1);
      String string0 = transportadoras0.getCod();
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals(1.0, transportadoras0.getClas(), 0.01);
      assertEquals((-694.7342), transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertNull(string0);
      assertEquals(1, transportadoras0.getCap());
      assertEquals(0.5, transportadoras0.getRange(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-946.8935621081), (-946.8935621081));
      Transportadoras transportadoras0 = new Transportadoras("^dU\"", "^dU\"", coordenadas0, 0.0, 0.0, 0.0, 2388.5, true, 0.0, "", "", (-946.8935621081), 0);
      String string0 = transportadoras0.getCod();
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals("^dU\"", string0);
      assertEquals("^dU\"", transportadoras0.getNome());
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals(2388.5, transportadoras0.getClas(), 0.01);
      assertEquals((-946.8935621081), transportadoras0.getKmp(), 0.01);
      assertEquals("", transportadoras0.getPass());
      assertTrue(transportadoras0.isMed());
      assertEquals(0, transportadoras0.getCap());
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals("", transportadoras0.getEmail());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 0.0, 0.0, 1646.349988, 1162.2423, true, 0.0, "", "", 0.0, (-1340));
      double double0 = transportadoras0.getClas();
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals(1646.349988, transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals(1162.2423, double0, 0.01);
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals((-1340), transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "- Y:", coordenadas0, (-1.0), 0.0, 1696.9662, (-1901.19595491548), true, (-1901.19595491548), (String) null, "- Y:", 0.0, 0);
      double double0 = transportadoras0.getClas();
      assertTrue(transportadoras0.isMed());
      assertEquals((-1.0), transportadoras0.getRange(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(0, transportadoras0.getCap());
      assertEquals("", transportadoras0.getCod());
      assertEquals("- Y:", transportadoras0.getNome());
      assertEquals(1696.9662, transportadoras0.getNif(), 0.01);
      assertEquals((-1901.19595491548), double0, 0.01);
      assertEquals((-1901.19595491548), transportadoras0.getVkm(), 0.01);
      assertEquals("- Y:", transportadoras0.getPass());
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2190.821742831), 0.0);
      Transportadoras transportadoras0 = new Transportadoras("G,qLXxl'QU<p}ZNT5N", "", coordenadas0, (-1087.187761099764), 0.0, 0.0, 0.0, false, 0.0, "G,qLXxl'QU<p}ZNT5N", "G,qLXxl'QU<p}ZNT5N", (-1087.187761099764), 0);
      int int0 = transportadoras0.getCap();
      assertEquals("G,qLXxl'QU<p}ZNT5N", transportadoras0.getPass());
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals((-1087.187761099764), transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals("G,qLXxl'QU<p}ZNT5N", transportadoras0.getEmail());
      assertEquals("", transportadoras0.getNome());
      assertEquals("G,qLXxl'QU<p}ZNT5N", transportadoras0.getCod());
      assertFalse(transportadoras0.isMed());
      assertEquals((-1087.187761099764), transportadoras0.getRange(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, (-180.69831), 0.0, 0.0, 1342.17965, false, 0.0, "}h", "}h", 0.0, (-1));
      int int0 = transportadoras0.getCap();
      assertEquals((-180.69831), transportadoras0.getRange(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals((-1), int0);
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(1342.17965, transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2836.0), 1732.552);
      Transportadoras transportadoras0 = new Transportadoras("51<lgw`", "- Y:", coordenadas0, 3587.96748, (-2836.0), 3587.96748, 1732.552, false, 0.0, "- Y:", "]x=E2j.ww", (-863.0), 1);
      Coordenadas coordenadas1 = new Coordenadas(0.0, 3587.96748);
      transportadoras0.distanceT(coordenadas1);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals(3587.96748, transportadoras0.getRange(), 0.01);
      assertEquals(1, transportadoras0.getCap());
      assertFalse(transportadoras0.isMed());
      assertEquals("]x=E2j.ww", transportadoras0.getPass());
      assertEquals(3587.96748, transportadoras0.getNif(), 0.01);
      assertEquals("51<lgw`", transportadoras0.getCod());
      assertEquals((-2836.0), transportadoras0.getPrkm(), 0.01);
      assertEquals("- Y:", transportadoras0.getNome());
      assertEquals(1732.552, transportadoras0.getClas(), 0.01);
      assertEquals("- Y:", transportadoras0.getEmail());
      assertEquals((-863.0), transportadoras0.getKmp(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 0.0, 0.0, 0.0, 0.0, true, (-1104.2), "_vU^o,Z", (String) null, (-1104.2), 1338);
      Transportadoras transportadoras1 = transportadoras0.clone();
      assertEquals((-1104.2), transportadoras1.getVkm(), 0.01);
      assertEquals((-1104.2), transportadoras0.getKmp(), 0.01);
      assertEquals(1338, transportadoras1.getCap());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals("", transportadoras1.getCod());
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(1338, transportadoras0.getCap());
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals("_vU^o,Z", transportadoras1.getEmail());
      assertEquals((-1104.2), transportadoras1.getKmp(), 0.01);
      assertEquals("", transportadoras1.getNome());
      assertEquals((-1104.2), transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertTrue(transportadoras1.isMed());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-3072.305918209), 0.0);
      Transportadoras transportadoras0 = new Transportadoras("}TgS{ WyR ", "}TgS{ WyR ", coordenadas0, (-722.79277), 0.0, (-2053.225073), 0.0, true, 1269.5830875149659, "}TgS{ WyR ", "}TgS{ WyR ", 0.0, (-1));
      Transportadoras transportadoras1 = transportadoras0.clone();
      assertEquals((-2053.225073), transportadoras1.getNif(), 0.01);
      assertEquals((-722.79277), transportadoras1.getRange(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertTrue(transportadoras1.isMed());
      assertEquals(1269.5830875149659, transportadoras0.getVkm(), 0.01);
      assertEquals(1269.5830875149659, transportadoras1.getVkm(), 0.01);
      assertEquals((-2053.225073), transportadoras0.getNif(), 0.01);
      assertEquals((-1), transportadoras1.getCap());
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals((-1), transportadoras0.getCap());
      assertEquals((-722.79277), transportadoras0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 1191.2291608);
      Transportadoras transportadoras0 = new Transportadoras("Zu@X%7,mG$ V ", "Zu@X%7,mG$ V ", coordenadas0, (-4284.2509844), 0.0, 1191.2291608, (-4284.2509844), false, 0.0, "", "Zu@X%7,mG$ V ", (-774.186341298), 0);
      Transportadoras transportadoras1 = transportadoras0.clone();
      assertFalse(transportadoras1.isMed());
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals(1191.2291608, transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(0, transportadoras1.getCap());
      assertEquals("", transportadoras1.getEmail());
      assertEquals((-774.186341298), transportadoras1.getKmp(), 0.01);
      assertEquals((-4284.2509844), transportadoras0.getRange(), 0.01);
      assertEquals((-774.186341298), transportadoras0.getKmp(), 0.01);
      assertEquals("Zu@X%7,mG$ V ", transportadoras1.getPass());
      assertEquals((-4284.2509844), transportadoras1.getRange(), 0.01);
      assertEquals("Zu@X%7,mG$ V ", transportadoras1.getNome());
      assertEquals("Zu@X%7,mG$ V ", transportadoras1.getCod());
      assertEquals((-4284.2509844), transportadoras0.getClas(), 0.01);
      assertEquals(1191.2291608, transportadoras1.getNif(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1502.0476509), 3375.3);
      Transportadoras transportadoras0 = new Transportadoras("Q1x:\"Fow\"V'n3", "", coordenadas0, 3375.3, 3375.3, 3375.3, 0.0, true, 2.0, "", "", 887.2018329, (-1467));
      Transportadoras transportadoras1 = transportadoras0.clone();
      assertEquals(887.2018329, transportadoras1.getKmp(), 0.01);
      assertEquals("", transportadoras1.getEmail());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals((-1467), transportadoras0.getCap());
      assertEquals("", transportadoras1.getPass());
      assertEquals(2.0, transportadoras0.getVkm(), 0.01);
      assertEquals(3375.3, transportadoras0.getNif(), 0.01);
      assertEquals(3375.3, transportadoras1.getRange(), 0.01);
      assertEquals("Q1x:\"Fow\"V'n3", transportadoras1.getCod());
      assertEquals(3375.3, transportadoras0.getRange(), 0.01);
      assertEquals("", transportadoras1.getNome());
      assertTrue(transportadoras1.isMed());
      assertEquals(2.0, transportadoras1.getVkm(), 0.01);
      assertEquals(3375.3, transportadoras1.getNif(), 0.01);
      assertEquals((-1467), transportadoras1.getCap());
      assertEquals(887.2018329, transportadoras0.getKmp(), 0.01);
      assertEquals(3375.3, transportadoras0.getPrkm(), 0.01);
      assertEquals(3375.3, transportadoras1.getPrkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Transportadoras transportadoras0 = new Transportadoras("q,wr", "q,wr", coordenadas0, 0.0, 2294.22, (-1.0), (-1561.380193734932), true, 457.384717, "q,wr", "", 2294.22, 0);
      Double double0 = new Double(0.0);
      double double1 = transportadoras0.calcTemp(coordenadas0, coordenadas0, double0);
      assertEquals(0.0, double1, 0.01);
      assertEquals((-1.0), transportadoras0.getNif(), 0.01);
      assertEquals("q,wr", transportadoras0.getEmail());
      assertEquals((-1561.380193734932), transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals("q,wr", transportadoras0.getCod());
      assertEquals("q,wr", transportadoras0.getNome());
      assertTrue(transportadoras0.isMed());
      assertEquals(457.384717, transportadoras0.getVkm(), 0.01);
      assertEquals(2294.22, transportadoras0.getPrkm(), 0.01);
      assertEquals(0, transportadoras0.getCap());
      assertEquals(2294.22, transportadoras0.getKmp(), 0.01);
      assertEquals("", transportadoras0.getPass());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-3580.420658592), (-2359.6442032171));
      Transportadoras transportadoras0 = new Transportadoras("", "Ga@F", coordenadas0, (-320.0), (-2359.6442032171), 0.0, (-1.0), false, (-3044.7645921), "", "", (-3580.420658592), (-1));
      Coordenadas coordenadas1 = new Coordenadas(coordenadas0);
      coordenadas1.setY((-3044.7645921));
      transportadoras0.setCord(coordenadas1);
      Double double0 = new Double(0.0);
      double double1 = transportadoras0.calcTemp(coordenadas0, coordenadas0, double0);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals("Ga@F", transportadoras0.getNome());
      assertEquals("", transportadoras0.getCod());
      assertEquals((-0.2250158815760422), double1, 0.01);
      assertEquals("", transportadoras0.getEmail());
      assertEquals((-2359.6442032171), transportadoras0.getPrkm(), 0.01);
      assertEquals("", transportadoras0.getPass());
      assertEquals((-1), transportadoras0.getCap());
      assertEquals((-320.0), transportadoras0.getRange(), 0.01);
      assertEquals((-1.0), transportadoras0.getClas(), 0.01);
      assertEquals((-3580.420658592), transportadoras0.getKmp(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 3472.50565519914);
      Transportadoras transportadoras0 = new Transportadoras("?W{0Bn%6Y", "zVY%/}=.", coordenadas0, 1709.4704099, 1709.4704099, 0.0, (-53.4), true, (-53.4), "?W{0Bn%6Y", "4?uS7", 3472.50565519914, 1);
      double double0 = transportadoras0.calcCost(coordenadas0, 0.0, coordenadas0);
      assertEquals(1709.4704099, transportadoras0.getRange(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-53.4), transportadoras0.getVkm(), 0.01);
      assertEquals(1709.4704099, transportadoras0.getPrkm(), 0.01);
      assertEquals(1, transportadoras0.getCap());
      assertEquals("4?uS7", transportadoras0.getPass());
      assertTrue(transportadoras0.isMed());
      assertEquals("?W{0Bn%6Y", transportadoras0.getCod());
      assertEquals("?W{0Bn%6Y", transportadoras0.getEmail());
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(3472.50565519914, transportadoras0.getKmp(), 0.01);
      assertEquals("zVY%/}=.", transportadoras0.getNome());
      assertEquals((-53.4), transportadoras0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 3472.50565519914);
      Transportadoras transportadoras0 = new Transportadoras("?W{0Bn%6Y", "zVY%/}=.", coordenadas0, 1709.4704099, 1709.4704099, 0.0, (-53.4), true, (-53.4), "?W{0Bn%6Y", "4?uS7", 3472.50565519914, 1);
      double double0 = transportadoras0.calcCost(coordenadas0, 2.0, coordenadas0);
      assertEquals("4?uS7", transportadoras0.getPass());
      assertEquals("?W{0Bn%6Y", transportadoras0.getCod());
      assertEquals("?W{0Bn%6Y", transportadoras0.getEmail());
      assertEquals(1, transportadoras0.getCap());
      assertEquals(1709.4704099, transportadoras0.getRange(), 0.01);
      assertEquals((-53.4), transportadoras0.getVkm(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(1709.4704099, transportadoras0.getPrkm(), 0.01);
      assertEquals((-53.4), transportadoras0.getClas(), 0.01);
      assertEquals(3472.50565519914, transportadoras0.getKmp(), 0.01);
      assertEquals("zVY%/}=.", transportadoras0.getNome());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-102.6036309), (-102.6036309));
      Coordenadas coordenadas1 = new Coordenadas(coordenadas0);
      Transportadoras transportadoras0 = new Transportadoras("", (String) null, coordenadas1, (-102.6036309), (-102.6036309), (-102.6036309), 0.5, true, 151.0134743, "v-!n%A", (String) null, 0.5, 1);
      coordenadas1.setY(151.0134743);
      double double0 = transportadoras0.calcCost(coordenadas1, 1, coordenadas0);
      assertEquals("", transportadoras0.getCod());
      assertTrue(transportadoras0.isMed());
      assertEquals((-1.9718141353806615), double0, 0.01);
      assertEquals(151.0134743, transportadoras0.getVkm(), 0.01);
      assertEquals(0.5, transportadoras0.getClas(), 0.01);
      assertEquals(0.5, transportadoras0.getKmp(), 0.01);
      assertEquals((-102.6036309), transportadoras0.getRange(), 0.01);
      assertEquals((-102.6036309), transportadoras0.getNif(), 0.01);
      assertEquals(1, transportadoras0.getCap());
      assertEquals("v-!n%A", transportadoras0.getEmail());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("1", (String) null, (Coordenadas) null, (-546.8809479045357), 1494.09, (-485.074963386), (-546.8809479045357), true, 0.5, "", "#[U+5}%]KS", (-1740.757), 68);
      Double double0 = new Double(1477.7675923608);
      // Undeclared exception!
      try { 
        transportadoras0.isRangeT((Coordenadas) null, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("#t", "#t", (Coordenadas) null, (-2355.19), (-2355.19), (-2355.19), 0.0, false, (-1.0), "F", "", 0.0, (-2837));
      // Undeclared exception!
      try { 
        transportadoras0.distanceT((Coordenadas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("u.nEZN}**Y}$K;!C!cE", (String) null, (Coordenadas) null, (-2260.1698826109077), (-2260.1698826109077), (-4583.460051), (-2260.1698826109077), true, 0.0, "", "['\"S~(BA${D%;?8qB", 1.0, 1594);
      // Undeclared exception!
      try { 
        transportadoras0.calcCost((Coordenadas) null, 1.0, (Coordenadas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1280.53153), (-1.0));
      Transportadoras transportadoras0 = new Transportadoras(",$jXZn.y?\"(01WVdyuJ", (String) null, coordenadas0, (-1280.53153), (-1280.53153), (-2450.3779578), (-1280.53153), false, 1155.7249, ",$jXZn.y?\"(01WVdyuJ", "traz_aqui.Transportadoras", (-2694.336989215387), 3508);
      double double0 = transportadoras0.getNif();
      assertEquals((-1280.53153), transportadoras0.getClas(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(1155.7249, transportadoras0.getVkm(), 0.01);
      assertEquals((-1280.53153), transportadoras0.getRange(), 0.01);
      assertEquals((-2450.3779578), double0, 0.01);
      assertEquals(3508, transportadoras0.getCap());
      assertEquals(",$jXZn.y?\"(01WVdyuJ", transportadoras0.getCod());
      assertEquals((-2694.336989215387), transportadoras0.getKmp(), 0.01);
      assertEquals(",$jXZn.y?\"(01WVdyuJ", transportadoras0.getEmail());
      assertEquals("traz_aqui.Transportadoras", transportadoras0.getPass());
      assertEquals((-1280.53153), transportadoras0.getPrkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), 0.0);
      Transportadoras transportadoras0 = new Transportadoras("0>L)iUvUy;6?L", "shS ", coordenadas0, 0.0, 0.5, 0.0, (-1.0), false, (-1.0), "0>L)iUvUy;6?L", "0>L)iUvUy;6?L", 0.0, 0);
      String string0 = transportadoras0.getNome();
      assertEquals("0>L)iUvUy;6?L", transportadoras0.getEmail());
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals("0>L)iUvUy;6?L", transportadoras0.getCod());
      assertEquals("0>L)iUvUy;6?L", transportadoras0.getPass());
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals("shS ", string0);
      assertEquals((-1.0), transportadoras0.getVkm(), 0.01);
      assertEquals((-1.0), transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals(0, transportadoras0.getCap());
      assertEquals(0.5, transportadoras0.getPrkm(), 0.01);
      assertFalse(transportadoras0.isMed());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1502.0476509), 3375.3);
      Transportadoras transportadoras0 = new Transportadoras("Q1x:\"Fow\"V'n3", "", coordenadas0, 3375.3, 3375.3, 3375.3, 0.0, true, 2.0, "", "", 887.2018329, (-1467));
      String string0 = transportadoras0.getPass();
      assertEquals("", string0);
      assertEquals(3375.3, transportadoras0.getRange(), 0.01);
      assertEquals("Q1x:\"Fow\"V'n3", transportadoras0.getCod());
      assertEquals(3375.3, transportadoras0.getPrkm(), 0.01);
      assertEquals("", transportadoras0.getNome());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals(887.2018329, transportadoras0.getKmp(), 0.01);
      assertEquals("", transportadoras0.getEmail());
      assertTrue(transportadoras0.isMed());
      assertEquals(2.0, transportadoras0.getVkm(), 0.01);
      assertEquals(3375.3, transportadoras0.getNif(), 0.01);
      assertEquals((-1467), transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-326.290725627706), (-326.290725627706));
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, (-326.290725627706), (-326.290725627706), 899.4377121082625, 1.0, false, 1.0, "", "traz_aqui.Coordenadas", (-326.290725627706), 0);
      String string0 = transportadoras0.getCod();
      assertEquals(1.0, transportadoras0.getClas(), 0.01);
      assertEquals(899.4377121082625, transportadoras0.getNif(), 0.01);
      assertEquals(0, transportadoras0.getCap());
      assertEquals((-326.290725627706), transportadoras0.getRange(), 0.01);
      assertEquals("", transportadoras0.getNome());
      assertFalse(transportadoras0.isMed());
      assertEquals("", transportadoras0.getEmail());
      assertEquals("traz_aqui.Coordenadas", transportadoras0.getPass());
      assertEquals("", string0);
      assertEquals(1.0, transportadoras0.getVkm(), 0.01);
      assertEquals((-326.290725627706), transportadoras0.getKmp(), 0.01);
      assertEquals((-326.290725627706), transportadoras0.getPrkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1502.0476509), 3375.3);
      Transportadoras transportadoras0 = new Transportadoras("Q1x:\"Fow\"V'n3", "", coordenadas0, 3375.3, 3375.3, 3375.3, 0.0, true, 2.0, "", "", 887.2018329, (-1467));
      double double0 = transportadoras0.getRange();
      assertEquals(3375.3, double0, 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals("", transportadoras0.getPass());
      assertEquals("", transportadoras0.getEmail());
      assertEquals(2.0, transportadoras0.getVkm(), 0.01);
      assertEquals(3375.3, transportadoras0.getNif(), 0.01);
      assertEquals((-1467), transportadoras0.getCap());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals(887.2018329, transportadoras0.getKmp(), 0.01);
      assertEquals(3375.3, transportadoras0.getPrkm(), 0.01);
      assertEquals("", transportadoras0.getNome());
      assertEquals("Q1x:\"Fow\"V'n3", transportadoras0.getCod());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1560.14407511), (-1560.14407511));
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, (-1560.14407511), (-2901.7209315), (-2901.7209315), (-1560.14407511), true, (-1560.14407511), (String) null, (String) null, (-467.0), 618);
      int int0 = transportadoras0.getCap();
      assertEquals((-2901.7209315), transportadoras0.getNif(), 0.01);
      assertEquals((-1560.14407511), transportadoras0.getRange(), 0.01);
      assertEquals((-1560.14407511), transportadoras0.getClas(), 0.01);
      assertEquals((-2901.7209315), transportadoras0.getPrkm(), 0.01);
      assertEquals((-467.0), transportadoras0.getKmp(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals((-1560.14407511), transportadoras0.getVkm(), 0.01);
      assertEquals(618, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-4261.826512768));
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, (-1.0), 0.0, (-4261.826512768), (-1.0), false, (-4261.826512768), "", "", 3271.59784401494, 0);
      double double0 = transportadoras0.getPrkm();
      assertEquals(3271.59784401494, transportadoras0.getKmp(), 0.01);
      assertEquals((-4261.826512768), transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-4261.826512768), transportadoras0.getNif(), 0.01);
      assertEquals((-1.0), transportadoras0.getClas(), 0.01);
      assertEquals((-1.0), transportadoras0.getRange(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(0, transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1502.0476509), 3375.3);
      Transportadoras transportadoras0 = new Transportadoras("Q1x:\"Fow\"V'n3", "", coordenadas0, 3375.3, 3375.3, 3375.3, 0.0, true, 2.0, "", "", 887.2018329, (-1467));
      boolean boolean0 = transportadoras0.isMed();
      assertEquals("Q1x:\"Fow\"V'n3", transportadoras0.getCod());
      assertEquals(3375.3, transportadoras0.getNif(), 0.01);
      assertEquals(3375.3, transportadoras0.getPrkm(), 0.01);
      assertTrue(boolean0);
      assertEquals("", transportadoras0.getNome());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals(887.2018329, transportadoras0.getKmp(), 0.01);
      assertEquals("", transportadoras0.getEmail());
      assertEquals(2.0, transportadoras0.getVkm(), 0.01);
      assertEquals((-1467), transportadoras0.getCap());
      assertEquals("", transportadoras0.getPass());
      assertEquals(3375.3, transportadoras0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras(";m5V5", "- Y:", coordenadas0, 0.0, (-4431.595600246045), (-598.3946138), 0.0, true, 0.0, "", "B.,v%!g3_", 0.0, 1);
      double double0 = transportadoras0.getVkm();
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals("B.,v%!g3_", transportadoras0.getPass());
      assertEquals(";m5V5", transportadoras0.getCod());
      assertEquals((-4431.595600246045), transportadoras0.getPrkm(), 0.01);
      assertEquals(1, transportadoras0.getCap());
      assertEquals("", transportadoras0.getEmail());
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals("- Y:", transportadoras0.getNome());
      assertEquals((-598.3946138), transportadoras0.getNif(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertTrue(transportadoras0.isMed());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2190.821742831), 0.0);
      Transportadoras transportadoras0 = new Transportadoras("G,qLXxl'QU<p}ZNT5N", "", coordenadas0, (-1087.187761099764), 0.0, 0.0, 0.0, false, 0.0, "G,qLXxl'QU<p}ZNT5N", "G,qLXxl'QU<p}ZNT5N", (-1087.187761099764), 0);
      double double0 = transportadoras0.getKmp();
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals("G,qLXxl'QU<p}ZNT5N", transportadoras0.getPass());
      assertEquals(0, transportadoras0.getCap());
      assertEquals("G,qLXxl'QU<p}ZNT5N", transportadoras0.getCod());
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals((-1087.187761099764), transportadoras0.getRange(), 0.01);
      assertEquals("G,qLXxl'QU<p}ZNT5N", transportadoras0.getEmail());
      assertEquals("", transportadoras0.getNome());
      assertEquals((-1087.187761099764), double0, 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-4261.826512768));
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, (-1.0), 0.0, (-4261.826512768), (-1.0), false, (-4261.826512768), "", "", 3271.59784401494, 0);
      transportadoras0.getEmail();
      assertEquals(0, transportadoras0.getCap());
      assertEquals(3271.59784401494, transportadoras0.getKmp(), 0.01);
      assertEquals((-1.0), transportadoras0.getRange(), 0.01);
      assertEquals((-4261.826512768), transportadoras0.getVkm(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals((-4261.826512768), transportadoras0.getNif(), 0.01);
      assertEquals((-1.0), transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Transportadoras transportadoras0 = null;
      try {
        transportadoras0 = new Transportadoras((Transportadoras) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("u.nEZN}**Y}$K;!C!cE", (String) null, (Coordenadas) null, (-2260.1698826109077), (-2260.1698826109077), (-4583.460051), (-2260.1698826109077), true, 0.0, "", "['\"S~(BA${D%;?8qB", 1.0, 1594);
      transportadoras0.dimCap();
      assertEquals(1593, transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(881.2369772711077, 881.2369772711077);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 881.2369772711077, 881.2369772711077, 881.2369772711077, 881.2369772711077, false, 881.2369772711077, "", "", 881.2369772711077, 0);
      transportadoras0.dimCap();
      assertEquals(881.2369772711077, transportadoras0.getVkm(), 0.01);
      assertEquals(0, transportadoras0.getCap());
      assertEquals(881.2369772711077, transportadoras0.getRange(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(881.2369772711077, transportadoras0.getPrkm(), 0.01);
      assertEquals(881.2369772711077, transportadoras0.getNif(), 0.01);
      assertEquals(881.2369772711077, transportadoras0.getKmp(), 0.01);
      assertEquals(881.2369772711077, transportadoras0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), (-1.0));
      Transportadoras transportadoras0 = new Transportadoras("^i\"/[A =", "^i\"/[A =", coordenadas0, (-1.0), (-1.0), (-1.0), (-1.0), true, (-1.0), "^i\"/[A =", "^i\"/[A =", (-1.0), 2146535073);
      transportadoras0.changeR((-1.0));
      assertEquals((-1.0), transportadoras0.getKmp(), 0.01);
      assertEquals((-1.0), transportadoras0.getClas(), 0.01);
      assertEquals((-1.0), transportadoras0.getVkm(), 0.01);
      assertEquals((-1.0), transportadoras0.getNif(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals((-1.0), transportadoras0.getRange(), 0.01);
      assertEquals((-1.0), transportadoras0.getPrkm(), 0.01);
      assertEquals(2146535073, transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("u.nEZN}**Y}$K;!C!cE", (String) null, (Coordenadas) null, (-2260.1698826109077), (-2260.1698826109077), (-4583.460051), (-2260.1698826109077), true, 0.0, "", "['\"S~(BA${D%;?8qB", 1.0, 1594);
      transportadoras0.changeR(0.0);
      assertEquals("", transportadoras0.getEmail());
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals((-4583.460051), transportadoras0.getNif(), 0.01);
      assertEquals((-2260.1698826109077), transportadoras0.getRange(), 0.01);
      assertEquals(1594, transportadoras0.getCap());
      assertEquals("u.nEZN}**Y}$K;!C!cE", transportadoras0.getCod());
      assertEquals(1.0, transportadoras0.getKmp(), 0.01);
      assertEquals((-2260.1698826109077), transportadoras0.getPrkm(), 0.01);
      assertEquals((-2260.1698826109077), transportadoras0.getClas(), 0.01);
      assertEquals("['\"S~(BA${D%;?8qB", transportadoras0.getPass());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1145.2326532548504, 1145.2326532548504);
      Transportadoras transportadoras0 = new Transportadoras("E\"'gLSnY8WWw2yX!#", "E\"'gLSnY8WWw2yX!#", coordenadas0, 1145.2326532548504, 1145.2326532548504, 1145.2326532548504, 1145.2326532548504, true, 1145.2326532548504, "E\"'gLSnY8WWw2yX!#", "E\"'gLSnY8WWw2yX!#", 1145.2326532548504, (-618));
      transportadoras0.setCod("E\"'gLSnY8WWw2yX!#");
      assertEquals(1145.2326532548504, transportadoras0.getClas(), 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getKmp(), 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getRange(), 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getVkm(), 0.01);
      assertEquals((-618), transportadoras0.getCap());
      assertTrue(transportadoras0.isMed());
      assertEquals(1145.2326532548504, transportadoras0.getPrkm(), 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getNif(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("1", (String) null, (Coordenadas) null, (-546.8809479045357), 1494.09, (-485.074963386), (-546.8809479045357), true, 0.5, "", "#[U+5}%]KS", (-1740.757), 68);
      transportadoras0.setVkm(68);
      assertEquals(68.0, transportadoras0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("u.nEZN}**Y}$K;!C!cE", (String) null, (Coordenadas) null, (-2260.1698826109077), (-2260.1698826109077), (-4583.460051), (-2260.1698826109077), true, 0.0, "", "['\"S~(BA${D%;?8qB", 1.0, 1594);
      assertTrue(transportadoras0.isMed());
      
      transportadoras0.setMed(false);
      assertFalse(transportadoras0.isMed());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1145.2326532548504, 1145.2326532548504);
      Transportadoras transportadoras0 = new Transportadoras("E\"'gLSnY8WWw2yX!#", "E\"'gLSnY8WWw2yX!#", coordenadas0, 1145.2326532548504, 1145.2326532548504, 1145.2326532548504, 1145.2326532548504, true, 1145.2326532548504, "E\"'gLSnY8WWw2yX!#", "E\"'gLSnY8WWw2yX!#", 1145.2326532548504, (-618));
      transportadoras0.aumCap();
      assertEquals((-617), transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1145.2326532548504, 1145.2326532548504);
      Transportadoras transportadoras0 = new Transportadoras("E\"'gLSnY8WWw2yX!#", "E\"'gLSnY8WWw2yX!#", coordenadas0, 1145.2326532548504, 1145.2326532548504, 1145.2326532548504, 1145.2326532548504, true, 1145.2326532548504, "E\"'gLSnY8WWw2yX!#", "E\"'gLSnY8WWw2yX!#", 1145.2326532548504, (-618));
      transportadoras0.setNif(1145.2326532548504);
      assertEquals(1145.2326532548504, transportadoras0.getNif(), 0.01);
      assertEquals((-618), transportadoras0.getCap());
      assertEquals(1145.2326532548504, transportadoras0.getKmp(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals(1145.2326532548504, transportadoras0.getClas(), 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getRange(), 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getPrkm(), 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras(";4MLf1t7n~(nzGY%.@", ";4MLf1t7n~(nzGY%.@", (Coordenadas) null, 480.09502985612, 480.09502985612, 480.09502985612, 0.0, true, 480.09502985612, ";4MLf1t7n~(nzGY%.@", ";4MLf1t7n~(nzGY%.@", 0.0, 0);
      transportadoras0.setCap(3084);
      assertEquals(3084, transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1145.2326532548504, 1145.2326532548504);
      Transportadoras transportadoras0 = new Transportadoras("E\"'gLSnY8WWw2yX!#", "E\"'gLSnY8WWw2yX!#", coordenadas0, 1145.2326532548504, 1145.2326532548504, 1145.2326532548504, 1145.2326532548504, true, 1145.2326532548504, "E\"'gLSnY8WWw2yX!#", "E\"'gLSnY8WWw2yX!#", 1145.2326532548504, (-618));
      transportadoras0.setPrkm(1145.2326532548504);
      assertEquals(1145.2326532548504, transportadoras0.getVkm(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals(1145.2326532548504, transportadoras0.getPrkm(), 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getNif(), 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getKmp(), 0.01);
      assertEquals((-618), transportadoras0.getCap());
      assertEquals(1145.2326532548504, transportadoras0.getClas(), 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1145.2326532548504, 1145.2326532548504);
      Transportadoras transportadoras0 = new Transportadoras("E\"'gLSnY8WWw2yX!#", "E\"'gLSnY8WWw2yX!#", coordenadas0, 1145.2326532548504, 1145.2326532548504, 1145.2326532548504, 1145.2326532548504, true, 1145.2326532548504, "E\"'gLSnY8WWw2yX!#", "E\"'gLSnY8WWw2yX!#", 1145.2326532548504, (-618));
      Double double0 = new Double(1145.2326532548504);
      double double1 = transportadoras0.calcTemp(coordenadas0, coordenadas0, double0);
      assertEquals(1145.2326532548504, transportadoras0.getNif(), 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getKmp(), 0.01);
      assertEquals((-618), transportadoras0.getCap());
      assertEquals(1145.2326532548504, transportadoras0.getVkm(), 0.01);
      assertEquals(1145.2326532548504, double1, 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getPrkm(), 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getClas(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals(1145.2326532548504, transportadoras0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1145.2326532548504, 1145.2326532548504);
      Transportadoras transportadoras0 = new Transportadoras("E\"'gLSnY8WWw2yX!#", "E\"'gLSnY8WWw2yX!#", coordenadas0, 1145.2326532548504, 1145.2326532548504, 1145.2326532548504, 1145.2326532548504, true, 1145.2326532548504, "E\"'gLSnY8WWw2yX!#", "E\"'gLSnY8WWw2yX!#", 1145.2326532548504, (-618));
      transportadoras0.distanceT(coordenadas0);
      assertEquals(1145.2326532548504, transportadoras0.getClas(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals(1145.2326532548504, transportadoras0.getRange(), 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getVkm(), 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getKmp(), 0.01);
      assertEquals((-618), transportadoras0.getCap());
      assertEquals(1145.2326532548504, transportadoras0.getPrkm(), 0.01);
      assertEquals(1145.2326532548504, transportadoras0.getNif(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("u.nEZN}**Y}$K;!C!cE", (String) null, (Coordenadas) null, (-2260.1698826109077), (-2260.1698826109077), (-4583.460051), (-2260.1698826109077), true, 0.0, "", "['\"S~(BA${D%;?8qB", 1.0, 1594);
      transportadoras0.setNome("4EWgkRA_|]uF[");
      assertEquals("", transportadoras0.getEmail());
      assertEquals("u.nEZN}**Y}$K;!C!cE", transportadoras0.getCod());
      assertEquals("['\"S~(BA${D%;?8qB", transportadoras0.getPass());
      assertEquals(1.0, transportadoras0.getKmp(), 0.01);
      assertEquals((-2260.1698826109077), transportadoras0.getPrkm(), 0.01);
      assertEquals(1594, transportadoras0.getCap());
      assertEquals((-2260.1698826109077), transportadoras0.getClas(), 0.01);
      assertEquals((-4583.460051), transportadoras0.getNif(), 0.01);
      assertEquals((-2260.1698826109077), transportadoras0.getRange(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertTrue(transportadoras0.isMed());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("t=FZMS6zDkW%", "t=FZMS6zDkW%", coordenadas0, 0.0, 0.0, 0.0, 0.0, false, 0.0, "t=FZMS6zDkW%", "t=FZMS6zDkW%", 0.0, 1);
      transportadoras0.setPass("t=FZMS6zDkW%");
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals(1, transportadoras0.getCap());
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("1", (String) null, (Coordenadas) null, (-546.8809479045357), 1494.09, (-485.074963386), (-546.8809479045357), true, 0.5, "", "#[U+5}%]KS", (-1740.757), 68);
      transportadoras0.setKmp(1477.7675923608);
      assertEquals((-262.98940763919995), transportadoras0.getKmp(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("t=FZMS6zDkW%", "t=FZMS6zDkW%", coordenadas0, 0.0, 0.0, 0.0, 0.0, false, 0.0, "t=FZMS6zDkW%", "t=FZMS6zDkW%", 0.0, 1);
      double double0 = transportadoras0.getClas();
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals(1, transportadoras0.getCap());
      assertFalse(transportadoras0.isMed());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-4904.814332459202), (-4904.814332459202));
      Transportadoras transportadoras0 = new Transportadoras("FAw$R7U(V", "FAw$R7U(V", coordenadas0, (-4904.814332459202), (-4904.814332459202), (-4904.814332459202), (-4904.814332459202), false, (-4904.814332459202), "FAw$R7U(V", "FAw$R7U(V", (-4904.814332459202), 24);
      transportadoras0.setRange((-4904.814332459202));
      assertEquals((-4904.814332459202), transportadoras0.getRange(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getVkm(), 0.01);
      assertEquals(24, transportadoras0.getCap());
      assertEquals((-4904.814332459202), transportadoras0.getClas(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getKmp(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getNif(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getPrkm(), 0.01);
      assertFalse(transportadoras0.isMed());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), (-1.0));
      Transportadoras transportadoras0 = new Transportadoras("^i\"/[A =", "^i\"/[A =", coordenadas0, (-1.0), (-1.0), (-1.0), (-1.0), true, (-1.0), "^i\"/[A =", "^i\"/[A =", (-1.0), 2146535073);
      transportadoras0.setClas((-1.0));
      assertTrue(transportadoras0.isMed());
      assertEquals((-1.0), transportadoras0.getPrkm(), 0.01);
      assertEquals(2146535073, transportadoras0.getCap());
      assertEquals((-1.0), transportadoras0.getRange(), 0.01);
      assertEquals((-1.0), transportadoras0.getVkm(), 0.01);
      assertEquals((-1.0), transportadoras0.getNif(), 0.01);
      assertEquals((-1.0), transportadoras0.getClas(), 0.01);
      assertEquals((-1.0), transportadoras0.getKmp(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-4904.814332459202), (-4904.814332459202));
      Transportadoras transportadoras0 = new Transportadoras("FAw$R7U(V", "FAw$R7U(V", coordenadas0, (-4904.814332459202), (-4904.814332459202), (-4904.814332459202), (-4904.814332459202), false, (-4904.814332459202), "FAw$R7U(V", "FAw$R7U(V", (-4904.814332459202), 24);
      Double double0 = new Double((-4904.814332459202));
      transportadoras0.isRangeT(coordenadas0, double0);
      assertEquals((-4904.814332459202), transportadoras0.getPrkm(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getRange(), 0.01);
      assertEquals(24, transportadoras0.getCap());
      assertFalse(transportadoras0.isMed());
      assertEquals((-4904.814332459202), transportadoras0.getVkm(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getNif(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getKmp(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-4904.814332459202), (-4904.814332459202));
      Transportadoras transportadoras0 = new Transportadoras("FAw$R7U(V", "FAw$R7U(V", coordenadas0, (-4904.814332459202), (-4904.814332459202), (-4904.814332459202), (-4904.814332459202), false, (-4904.814332459202), "FAw$R7U(V", "FAw$R7U(V", (-4904.814332459202), 24);
      Transportadoras transportadoras1 = transportadoras0.clone();
      assertFalse(transportadoras1.isMed());
      assertEquals((-4904.814332459202), transportadoras0.getKmp(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getPrkm(), 0.01);
      assertEquals((-4904.814332459202), transportadoras1.getRange(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getNif(), 0.01);
      assertEquals(24, transportadoras1.getCap());
      assertEquals((-4904.814332459202), transportadoras0.getVkm(), 0.01);
      assertEquals((-4904.814332459202), transportadoras1.getKmp(), 0.01);
      assertEquals((-4904.814332459202), transportadoras1.getNif(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getRange(), 0.01);
      assertEquals((-4904.814332459202), transportadoras1.getPrkm(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getClas(), 0.01);
      assertEquals(24, transportadoras0.getCap());
      assertEquals((-4904.814332459202), transportadoras1.getVkm(), 0.01);
  }
}
