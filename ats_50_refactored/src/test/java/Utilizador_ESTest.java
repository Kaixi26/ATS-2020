/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 31 16:27:21 GMT 2020
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import traz_aqui.Coordenadas;
import traz_aqui.Utilizador;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1.0);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, coordenadas0, (String) null, "");
      String string0 = utilizador0.getPass();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2674.2636598, 2674.2636598);
      Utilizador utilizador0 = new Utilizador("/kd:Gf2L", "/kd:Gf2L", coordenadas0, "/kd:Gf2L", "/kd:Gf2L");
      String string0 = utilizador0.getPass();
      assertEquals("/kd:Gf2L", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(596.87787347, 596.87787347);
      Utilizador utilizador0 = new Utilizador("", "-", coordenadas0, "", "T");
      String string0 = utilizador0.getNome();
      assertEquals("T", utilizador0.getEmail());
      assertEquals("-", string0);
      assertEquals("", utilizador0.getCod());
      assertEquals("", utilizador0.getPass());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1617.0, 1.0);
      Utilizador utilizador0 = new Utilizador("", "", coordenadas0, "", "");
      String string0 = utilizador0.getNome();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2.0, 2.0);
      Utilizador utilizador0 = new Utilizador("B$!&oQ|Td9s$!i:Z5|", "", coordenadas0, "B$!&oQ|Td9s$!i:Z5|", "traz_aqui.Utilizador");
      String string0 = utilizador0.getEmail();
      assertEquals("B$!&oQ|Td9s$!i:Z5|", utilizador0.getCod());
      assertEquals("", utilizador0.getNome());
      assertEquals("traz_aqui.Utilizador", string0);
      assertEquals("B$!&oQ|Td9s$!i:Z5|", utilizador0.getPass());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("", "", (Coordenadas) null, "", "");
      String string0 = utilizador0.getEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-52.043729302), 1.0);
      Utilizador utilizador0 = new Utilizador("- Y:", (String) null, coordenadas0, (String) null, "- Y:");
      Coordenadas coordenadas1 = utilizador0.getCord();
      assertEquals(1.0, coordenadas1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Utilizador utilizador0 = new Utilizador("=D> P", "=D> P", coordenadas0, "=D> P", "=D> P");
      Coordenadas coordenadas1 = utilizador0.getCord();
      assertEquals(0.0, coordenadas1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(3104.406350283, (-1.0));
      Utilizador utilizador0 = new Utilizador("2Z!\"D*a6vUfA", "Yv7m,wx9", coordenadas0, "2Z!\"D*a6vUfA", "-");
      utilizador0.getCord();
      assertEquals("2Z!\"D*a6vUfA", utilizador0.getCod());
      assertEquals("-", utilizador0.getEmail());
      assertEquals("Yv7m,wx9", utilizador0.getNome());
      assertEquals("2Z!\"D*a6vUfA", utilizador0.getPass());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Utilizador utilizador0 = new Utilizador("=D> P", "=D> P", coordenadas0, "=D> P", "=D> P");
      String string0 = utilizador0.getCod();
      assertEquals("=D> P", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1.0);
      Utilizador utilizador0 = new Utilizador("", "", coordenadas0, "", "");
      String string0 = utilizador0.getCod();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("CX69Wm~|Sp'{R[8hod", "CX69Wm~|Sp'{R[8hod", (Coordenadas) null, "CX69Wm~|Sp'{R[8hod", "CX69Wm~|Sp'{R[8hod");
      // Undeclared exception!
      try { 
        utilizador0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("", "", (Coordenadas) null, "- Y:", "- Y:");
      // Undeclared exception!
      try { 
        utilizador0.setCord((Coordenadas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("traz_aqui.Coordenadas", "4l`Ew6", (Coordenadas) null, "traz_aqui.Coordenadas", "4l`Ew6");
      // Undeclared exception!
      try { 
        utilizador0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(14.13131973503414, 14.13131973503414);
      Utilizador utilizador0 = new Utilizador("", (String) null, coordenadas0, "jf8", "WjKO7`'vY_`OK5!g&");
      String string0 = utilizador0.getNome();
      assertNull(string0);
      assertEquals("jf8", utilizador0.getPass());
      assertEquals("WjKO7`'vY_`OK5!g&", utilizador0.getEmail());
      assertEquals("", utilizador0.getCod());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), (-1.0));
      Utilizador utilizador0 = new Utilizador("", "", coordenadas0, "", "Us9ei");
      String string0 = utilizador0.getPass();
      assertEquals("Us9ei", utilizador0.getEmail());
      assertEquals("", utilizador0.getCod());
      assertEquals("", string0);
      assertEquals("", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), 1410.624152332034);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, coordenadas0, (String) null, "-");
      String string0 = utilizador0.getCod();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1.0);
      Utilizador utilizador0 = new Utilizador("", "", coordenadas0, "", "");
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals("", utilizador1.getPass());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1.0);
      Utilizador utilizador0 = new Utilizador("oI<-|7J1sjr8]ks}", "oI<-|7J1sjr8]ks}", coordenadas0, "oI<-|7J1sjr8]ks}", (String) null);
      String string0 = utilizador0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (Coordenadas) null, "_Q]'", (String) null);
      // Undeclared exception!
      try { 
        utilizador0.getCord();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(8.55440871309031, 8.55440871309031);
      Utilizador utilizador0 = new Utilizador("traz_aqui.Coordenadas", "traz_aqui.Coordenadas", coordenadas0, "traz_aqui.Coordenadas", "traz_aqui.Coordenadas");
      utilizador0.setCord(coordenadas0);
      assertEquals("traz_aqui.Coordenadas", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(8.55440871309031, 8.55440871309031);
      Utilizador utilizador0 = new Utilizador("traz_aqui.Coordenadas", "traz_aqui.Coordenadas", coordenadas0, "traz_aqui.Coordenadas", "traz_aqui.Coordenadas");
      utilizador0.setCod("traz_aqui.Coordenadas");
      assertEquals("traz_aqui.Coordenadas", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(8.55440871309031, 8.55440871309031);
      Utilizador utilizador0 = new Utilizador("traz_aqui.Coordenadas", "traz_aqui.Coordenadas", coordenadas0, "traz_aqui.Coordenadas", "traz_aqui.Coordenadas");
      utilizador0.setPass("traz_aqui.Coordenadas");
      assertEquals("traz_aqui.Coordenadas", utilizador0.getCod());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(8.55440871309031, 8.55440871309031);
      Utilizador utilizador0 = new Utilizador("traz_aqui.Coordenadas", "traz_aqui.Coordenadas", coordenadas0, "traz_aqui.Coordenadas", "traz_aqui.Coordenadas");
      utilizador0.setNome("traz_aqui.Coordenadas");
      assertEquals("traz_aqui.Coordenadas", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(8.55440871309031, 8.55440871309031);
      Utilizador utilizador0 = new Utilizador("traz_aqui.Coordenadas", "traz_aqui.Coordenadas", coordenadas0, "traz_aqui.Coordenadas", "traz_aqui.Coordenadas");
      String string0 = utilizador0.toString();
      assertEquals("User: traz_aqui.Coordenadas-traz_aqui.Coordenadas-X: 8.55440871309031- Y:8.55440871309031-traz_aqui.Coordenadas-traz_aqui.Coordenadas", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(8.55440871309031, 8.55440871309031);
      Utilizador utilizador0 = new Utilizador("traz_aqui.Coordenadas", "traz_aqui.Coordenadas", coordenadas0, "traz_aqui.Coordenadas", "traz_aqui.Coordenadas");
      utilizador0.setEmail("traz_aqui.Coordenadas");
      assertEquals("traz_aqui.Coordenadas", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(8.55440871309031, 8.55440871309031);
      Utilizador utilizador0 = new Utilizador("traz_aqui.Coordenadas", "traz_aqui.Coordenadas", coordenadas0, "traz_aqui.Coordenadas", "traz_aqui.Coordenadas");
      Utilizador utilizador1 = utilizador0.clone();
      assertFalse(utilizador1.equals((Object)utilizador0));
  }
}
