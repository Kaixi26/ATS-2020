/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 20 00:37:50 GMT 2020
 */

package traz_aqui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import traz_aqui.Coordenadas;
import traz_aqui.Utilizador;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2680.52602331), (-2680.52602331));
      Utilizador utilizador0 = new Utilizador("CbO0@{)lFyL", "CbO0@{)lFyL", coordenadas0, "CbO0@{)lFyL", "P%");
      String string0 = utilizador0.getPass();
      assertEquals("CbO0@{)lFyL", utilizador0.getCod());
      assertEquals("CbO0@{)lFyL", string0);
      assertEquals("CbO0@{)lFyL", utilizador0.getNome());
      assertEquals("P%", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), (-1.0));
      Utilizador utilizador0 = new Utilizador("", "", coordenadas0, "", "Us9ei");
      String string0 = utilizador0.getPass();
      assertEquals("", string0);
      assertEquals("", utilizador0.getCod());
      assertEquals("", utilizador0.getNome());
      assertEquals("Us9ei", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(14.13131973503414, 14.13131973503414);
      Utilizador utilizador0 = new Utilizador("", (String) null, coordenadas0, "jf8", "WjKO7`'vY_`OK5!g&");
      String string0 = utilizador0.getNome();
      assertEquals("", utilizador0.getCod());
      assertEquals("WjKO7`'vY_`OK5!g&", utilizador0.getEmail());
      assertNull(string0);
      assertEquals("jf8", utilizador0.getPass());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1617.0, 1.0);
      Utilizador utilizador0 = new Utilizador("", "", coordenadas0, "", "");
      String string0 = utilizador0.getNome();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1.0);
      Utilizador utilizador0 = new Utilizador("oI<-|7J1sjr8]ks}", "oI<-|7J1sjr8]ks}", coordenadas0, "oI<-|7J1sjr8]ks}", (String) null);
      String string0 = utilizador0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-566.974728651), (-566.974728651));
      Utilizador utilizador0 = new Utilizador(";^", ";^", coordenadas0, "", "");
      String string0 = utilizador0.getEmail();
      assertEquals("", utilizador0.getPass());
      assertEquals("", string0);
      assertEquals(";^", utilizador0.getNome());
      assertEquals(";^", utilizador0.getCod());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Utilizador utilizador0 = new Utilizador("=D> P", "=D> P", coordenadas0, "=D> P", "=D> P");
      Coordenadas coordenadas1 = utilizador0.getCord();
      assertEquals(0.0, coordenadas1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-859.003498));
      Utilizador utilizador0 = new Utilizador("", (String) null, coordenadas0, (String) null, (String) null);
      Coordenadas coordenadas1 = utilizador0.getCord();
      assertFalse(coordenadas1.equals((Object)coordenadas0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2647.509136, 2647.509136);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, coordenadas0, (String) null, (String) null);
      Coordenadas coordenadas1 = utilizador0.getCord();
      assertNotSame(coordenadas0, coordenadas1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), (-1.0));
      Utilizador utilizador0 = new Utilizador("", "", coordenadas0, "", "Us9ei");
      utilizador0.getCord();
      assertEquals("", utilizador0.getNome());
      assertEquals("Us9ei", utilizador0.getEmail());
      assertEquals("", utilizador0.getPass());
      assertEquals("", utilizador0.getCod());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2647.509136, 2647.509136);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, coordenadas0, (String) null, (String) null);
      String string0 = utilizador0.getCod();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-859.003498));
      Utilizador utilizador0 = new Utilizador("", (String) null, coordenadas0, (String) null, (String) null);
      utilizador0.setCod("vAq!.%/71K)=ljW7U");
      String string0 = utilizador0.getCod();
      assertEquals("vAq!.%/71K)=ljW7U", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("CX69Wm~|Sp'{R[8hod", "CX69Wm~|Sp'{R[8hod", (Coordenadas) null, "CX69Wm~|Sp'{R[8hod", "CX69Wm~|Sp'{R[8hod");
      // Undeclared exception!
      try { 
        utilizador0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("", "", (Coordenadas) null, "- Y:", "- Y:");
      // Undeclared exception!
      try { 
        utilizador0.setCord((Coordenadas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("traz_aqui.Coordenadas", "4l`Ew6", (Coordenadas) null, "traz_aqui.Coordenadas", "4l`Ew6");
      // Undeclared exception!
      try { 
        utilizador0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador(",O7n]j=_u1xbKJ$:", ",O7n]j=_u1xbKJ$:", (Coordenadas) null, ",O7n]j=_u1xbKJ$:", "79o?8YABF!Ds}o3#");
      Utilizador utilizador1 = null;
      try {
        utilizador1 = new Utilizador(utilizador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Utilizador utilizador0 = new Utilizador("", "I_GXp]", coordenadas0, "", (String) null);
      String string0 = utilizador0.getNome();
      assertNotNull(string0);
      assertEquals("", utilizador0.getCod());
      assertEquals("", utilizador0.getPass());
      assertEquals("I_GXp]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-859.003498));
      Utilizador utilizador0 = new Utilizador("", (String) null, coordenadas0, (String) null, (String) null);
      String string0 = utilizador0.getPass();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-859.003498));
      Utilizador utilizador0 = new Utilizador("", (String) null, coordenadas0, (String) null, (String) null);
      String string0 = utilizador0.getCod();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-301.6079), (-301.6079));
      Utilizador utilizador0 = new Utilizador("0AQ6", "0AQ6", coordenadas0, "8Q*T,&Gkz", "8Q*T,&Gkz");
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals("8Q*T,&Gkz", utilizador1.getEmail());
      assertEquals("0AQ6", utilizador1.getCod());
      assertEquals("0AQ6", utilizador1.getNome());
      assertEquals("8Q*T,&Gkz", utilizador1.getPass());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-301.6079), (-301.6079));
      Utilizador utilizador0 = new Utilizador("0AQ6", "0AQ6", coordenadas0, "8Q*T,&Gkz", "8Q*T,&Gkz");
      String string0 = utilizador0.getEmail();
      assertEquals("0AQ6", utilizador0.getNome());
      assertEquals("8Q*T,&Gkz", utilizador0.getPass());
      assertEquals("0AQ6", utilizador0.getCod());
      assertEquals("8Q*T,&Gkz", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (Coordenadas) null, "_Q]'", (String) null);
      // Undeclared exception!
      try { 
        utilizador0.getCord();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1.0);
      Utilizador utilizador0 = new Utilizador("(>'+Lf8C>8^*33", "(>'+Lf8C>8^*33", coordenadas0, "(>'+Lf8C>8^*33", "(>'+Lf8C>8^*33");
      utilizador0.setCord(coordenadas0);
      assertEquals("(>'+Lf8C>8^*33", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1.0);
      Utilizador utilizador0 = new Utilizador("(>'+Lf8C>8^*33", "(>'+Lf8C>8^*33", coordenadas0, "(>'+Lf8C>8^*33", "(>'+Lf8C>8^*33");
      utilizador0.setPass("(>'+Lf8C>8^*33");
      assertEquals("(>'+Lf8C>8^*33", utilizador0.getPass());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1.0);
      Utilizador utilizador0 = new Utilizador("(>'+Lf8C>8^*33", "(>'+Lf8C>8^*33", coordenadas0, "(>'+Lf8C>8^*33", "(>'+Lf8C>8^*33");
      utilizador0.setNome("(>'+Lf8C>8^*33");
      assertEquals("(>'+Lf8C>8^*33", utilizador0.getPass());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1.0);
      Utilizador utilizador0 = new Utilizador("(>'+Lf8C>8^*33", "(>'+Lf8C>8^*33", coordenadas0, "(>'+Lf8C>8^*33", "(>'+Lf8C>8^*33");
      String string0 = utilizador0.toString();
      assertEquals("User: (>'+Lf8C>8^*33-(>'+Lf8C>8^*33-X: 1.0- Y:1.0-(>'+Lf8C>8^*33-(>'+Lf8C>8^*33", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1.0);
      Utilizador utilizador0 = new Utilizador("(>'+Lf8C>8^*33", "(>'+Lf8C>8^*33", coordenadas0, "(>'+Lf8C>8^*33", "(>'+Lf8C>8^*33");
      utilizador0.setEmail("(>'+Lf8C>8^*33");
      assertEquals("(>'+Lf8C>8^*33", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1.0);
      Utilizador utilizador0 = new Utilizador("(>'+Lf8C>8^*33", "(>'+Lf8C>8^*33", coordenadas0, "(>'+Lf8C>8^*33", "(>'+Lf8C>8^*33");
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals("(>'+Lf8C>8^*33", utilizador1.getNome());
  }
}
