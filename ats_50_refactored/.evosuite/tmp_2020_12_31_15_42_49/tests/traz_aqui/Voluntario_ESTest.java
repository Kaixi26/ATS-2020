/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 31 16:21:36 GMT 2020
 */

package traz_aqui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import traz_aqui.Coordenadas;
import traz_aqui.Voluntario;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Voluntario_ESTest extends Voluntario_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-356.18), (-356.18));
      Voluntario voluntario0 = new Voluntario("", "", (-356.18), coordenadas0, (-356.18), false, (-356.18), "", "", 0);
      voluntario0.changeR((-1443.21548993));
      assertEquals((-1799.3954899300002), voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1909.0, 0.0);
      Coordenadas coordenadas1 = new Coordenadas(coordenadas0);
      coordenadas1.setX(154.1648740808);
      Voluntario voluntario0 = new Voluntario("+wI;$.e", "+wI;$.e", 1909.0, coordenadas1, 0.0, false, 1909.0, ":xy+`*$:jz:", "+wI;$.e", 1);
      Double double0 = new Double(0.0);
      double double1 = voluntario0.calcTemp(coordenadas1, coordenadas0, double0);
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals("+wI;$.e", voluntario0.getPass());
      assertEquals(":xy+`*$:jz:", voluntario0.getEmail());
      assertEquals(0.9192431251541121, double1, 0.01);
      assertFalse(voluntario0.isMed());
      assertEquals(1909.0, voluntario0.getRange(), 0.01);
      assertEquals("+wI;$.e", voluntario0.getNome());
      assertEquals(1, voluntario0.getCap());
      assertEquals("+wI;$.e", voluntario0.getCod());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-129.69570177081246), (-129.69570177081246));
      Voluntario voluntario0 = new Voluntario("- Y:", "", (-129.69570177081246), coordenadas0, (-129.69570177081246), true, (-129.69570177081246), "- Y:", "- Y:", (-265));
      Double double0 = new Double(318.72);
      voluntario0.isRangeV(coordenadas0, double0);
      assertEquals("- Y:", voluntario0.getPass());
      assertTrue(voluntario0.isMed());
      assertEquals((-129.69570177081246), voluntario0.getRange(), 0.01);
      assertEquals((-265), voluntario0.getCap());
      assertEquals((-129.69570177081246), voluntario0.getVkm(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals((-129.69570177081246), voluntario0.getClas(), 0.01);
      assertEquals("- Y:", voluntario0.getEmail());
      assertEquals("- Y:", voluntario0.getCod());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario("- Y:", "- Y:", 0.0, coordenadas0, 0.0, false, 110.85118009, "- Y:", (String) null, 0);
      boolean boolean0 = voluntario0.isMed();
      assertEquals(110.85118009, voluntario0.getVkm(), 0.01);
      assertEquals(0, voluntario0.getCap());
      assertFalse(boolean0);
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals(0.0, voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("w", "w", 0.0, (Coordenadas) null, 0.0, true, 0.0, "", "M)3Z-", 0);
      double double0 = voluntario0.getVkm();
      assertEquals("M)3Z-", voluntario0.getPass());
      assertEquals("", voluntario0.getEmail());
      assertTrue(voluntario0.isMed());
      assertEquals(0, voluntario0.getCap());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals("w", voluntario0.getNome());
      assertEquals("w", voluntario0.getCod());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, 0.0, coordenadas0, 0.0, true, 135.451177777, (String) null, "eD{N*v!F ;S[.I", (-2983));
      double double0 = voluntario0.getVkm();
      assertTrue(voluntario0.isMed());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals((-2983), voluntario0.getCap());
      assertEquals(135.451177777, double0, 0.01);
      assertEquals(0.0, voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario((String) null, "traz_aqui.Voluntario", 0.0, (Coordenadas) null, 0.0, false, 0.0, (String) null, "traz_aqui.Voluntario", (-1));
      double double0 = voluntario0.getRange();
      assertEquals((-1), voluntario0.getCap());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertFalse(voluntario0.isMed());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-356.18), (-356.18));
      Voluntario voluntario0 = new Voluntario("", "", (-356.18), coordenadas0, (-356.18), false, (-356.18), "", "", 0);
      double double0 = voluntario0.getRange();
      assertFalse(voluntario0.isMed());
      assertEquals((-356.18), voluntario0.getClas(), 0.01);
      assertEquals(0, voluntario0.getCap());
      assertEquals((-356.18), voluntario0.getVkm(), 0.01);
      assertEquals((-356.18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-36.5771721893), (-36.5771721893));
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, (-36.5771721893), coordenadas0, 217.52, true, 2939.0, (String) null, (String) null, 0);
      voluntario0.getPass();
      assertEquals(0, voluntario0.getCap());
      assertEquals((-36.5771721893), voluntario0.getRange(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals(217.52, voluntario0.getClas(), 0.01);
      assertEquals(2939.0, voluntario0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2.0, 2.0);
      Voluntario voluntario0 = new Voluntario((String) null, "traz_aqui.Voluntario", 2.0, coordenadas0, 1.0, true, (-818.65669953105), "l4Gz*~&.Tgu;=fe[N{Y", "", (-911));
      String string0 = voluntario0.getPass();
      assertEquals((-911), voluntario0.getCap());
      assertEquals(1.0, voluntario0.getClas(), 0.01);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("traz_aqui.Voluntario", voluntario0.getNome());
      assertEquals((-818.65669953105), voluntario0.getVkm(), 0.01);
      assertEquals("l4Gz*~&.Tgu;=fe[N{Y", voluntario0.getEmail());
      assertTrue(voluntario0.isMed());
      assertEquals(2.0, voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1476.293);
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, 2.0, coordenadas0, 1845.401358, false, 0.0, "4UC]", (String) null, (-1));
      String string0 = voluntario0.getNome();
      assertEquals(1845.401358, voluntario0.getClas(), 0.01);
      assertEquals(2.0, voluntario0.getRange(), 0.01);
      assertEquals((-1), voluntario0.getCap());
      assertFalse(voluntario0.isMed());
      assertNull(string0);
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1923.0, 687.535971);
      Voluntario voluntario0 = new Voluntario("%P=D", "", 1923.0, coordenadas0, 687.535971, true, 687.535971, "", "", (-2632));
      String string0 = voluntario0.getNome();
      assertEquals(1923.0, voluntario0.getRange(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals("", string0);
      assertEquals("", voluntario0.getEmail());
      assertEquals((-2632), voluntario0.getCap());
      assertEquals(687.535971, voluntario0.getClas(), 0.01);
      assertEquals("%P=D", voluntario0.getCod());
      assertEquals(687.535971, voluntario0.getVkm(), 0.01);
      assertEquals("", voluntario0.getPass());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1108.676, 2791.0);
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, 2791.0, coordenadas0, 0.0, true, 0.0, (String) null, "X: ", (-3020));
      String string0 = voluntario0.getEmail();
      assertEquals(2791.0, voluntario0.getRange(), 0.01);
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertTrue(voluntario0.isMed());
      assertNull(string0);
      assertEquals((-3020), voluntario0.getCap());
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 3497.4623575525);
      Voluntario voluntario0 = new Voluntario("", "", 2.0, coordenadas0, 3497.4623575525, false, 3497.4623575525, "", "", 3550);
      voluntario0.getEmail();
      assertEquals(2.0, voluntario0.getRange(), 0.01);
      assertEquals(3550, voluntario0.getCap());
      assertEquals(3497.4623575525, voluntario0.getVkm(), 0.01);
      assertFalse(voluntario0.isMed());
      assertEquals(3497.4623575525, voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("#Hqe|Af\"#mwQu", "#Hqe|Af\"#mwQu", (-1.0), (Coordenadas) null, (-1.0), false, 0.0, "", (String) null, (-1637));
      voluntario0.getCord();
      assertFalse(voluntario0.isMed());
      assertEquals("#Hqe|Af\"#mwQu", voluntario0.getNome());
      assertEquals((-1637), voluntario0.getCap());
      assertEquals((-1.0), voluntario0.getRange(), 0.01);
      assertEquals("#Hqe|Af\"#mwQu", voluntario0.getCod());
      assertEquals((-1.0), voluntario0.getClas(), 0.01);
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertEquals("", voluntario0.getEmail());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, 0.0, coordenadas0, 0.0, true, 135.451177777, (String) null, "eD{N*v!F ;S[.I", (-2983));
      voluntario0.getCord();
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals((-2983), voluntario0.getCap());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals(135.451177777, voluntario0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 1.0);
      Voluntario voluntario0 = new Voluntario("", "9pi6", 0.0, coordenadas0, 0.0, false, 1.0, "", "", (-260));
      coordenadas0.setX(1.0);
      voluntario0.getCord();
      assertFalse(voluntario0.isMed());
      assertEquals((-260), voluntario0.getCap());
      assertEquals("", voluntario0.getPass());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals(1.0, voluntario0.getVkm(), 0.01);
      assertEquals("", voluntario0.getCod());
      assertEquals("9pi6", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2.0, 2.0);
      coordenadas0.setX((-3092.767129858994));
      Voluntario voluntario0 = new Voluntario((String) null, "traz_aqui.Voluntario", 2.0, coordenadas0, 1.0, true, (-818.65669953105), "l4Gz*~&.Tgu;=fe[N{Y", "", (-911));
      voluntario0.getCord();
      assertEquals(2.0, voluntario0.getRange(), 0.01);
      assertEquals((-911), voluntario0.getCap());
      assertEquals("", voluntario0.getPass());
      assertEquals(1.0, voluntario0.getClas(), 0.01);
      assertEquals("l4Gz*~&.Tgu;=fe[N{Y", voluntario0.getEmail());
      assertTrue(voluntario0.isMed());
      assertEquals((-818.65669953105), voluntario0.getVkm(), 0.01);
      assertEquals("traz_aqui.Voluntario", voluntario0.getNome());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1108.676, 2791.0);
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, 2791.0, coordenadas0, 0.0, true, 0.0, (String) null, "X: ", (-3020));
      String string0 = voluntario0.getCod();
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertEquals(2791.0, voluntario0.getRange(), 0.01);
      assertEquals((-3020), voluntario0.getCap());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertTrue(voluntario0.isMed());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("BO0RSR!Vs2v", "BO0RSR!Vs2v", 564.1169097, (Coordenadas) null, 20.5656, true, 0.0, "", "BO0RSR!Vs2v", (-1959));
      String string0 = voluntario0.getCod();
      assertEquals(20.5656, voluntario0.getClas(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals("BO0RSR!Vs2v", voluntario0.getNome());
      assertTrue(voluntario0.isMed());
      assertEquals((-1959), voluntario0.getCap());
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertEquals("BO0RSR!Vs2v", string0);
      assertEquals("BO0RSR!Vs2v", voluntario0.getPass());
      assertEquals(564.1169097, voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 1173.001993);
      Voluntario voluntario0 = new Voluntario("", "", 0.0, coordenadas0, 1173.001993, true, 1173.001993, "", "`aKdr-Gy}Wg#Uv ", 0);
      double double0 = voluntario0.getClas();
      assertEquals("", voluntario0.getNome());
      assertTrue(voluntario0.isMed());
      assertEquals(1173.001993, voluntario0.getVkm(), 0.01);
      assertEquals(1173.001993, double0, 0.01);
      assertEquals("`aKdr-Gy}Wg#Uv ", voluntario0.getPass());
      assertEquals("", voluntario0.getCod());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getCap());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2.0, 2.0);
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, 2.0, coordenadas0, 2.0, false, 2.0, "ogb^", (String) null, (-2110));
      voluntario0.changeR((-2110));
      double double0 = voluntario0.getClas();
      assertEquals((-2108.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("!yQDE7-a~(B)P", (String) null, 0.0, (Coordenadas) null, 0.0, true, (-6433.5011443943), "", (String) null, 2032);
      int int0 = voluntario0.getCap();
      assertTrue(voluntario0.isMed());
      assertEquals((-6433.5011443943), voluntario0.getVkm(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals("!yQDE7-a~(B)P", voluntario0.getCod());
      assertEquals(2032, int0);
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals(0.0, voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1108.676, 2791.0);
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, 2791.0, coordenadas0, 0.0, true, 0.0, (String) null, "X: ", (-3020));
      int int0 = voluntario0.getCap();
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals(2791.0, voluntario0.getRange(), 0.01);
      assertEquals((-3020), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, (-1.0));
      Coordenadas coordenadas1 = new Coordenadas(coordenadas0);
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, 1.0, coordenadas1, (-2342.9398113489), false, (-1.0), "Lod*FhIx", "Lod*FhIx", 0);
      coordenadas1.setY(1.0);
      voluntario0.distanceV(coordenadas0);
      assertEquals(0, voluntario0.getCap());
      assertFalse(voluntario0.isMed());
      assertEquals((-1.0), voluntario0.getVkm(), 0.01);
      assertEquals((-2342.9398113489), voluntario0.getClas(), 0.01);
      assertEquals(1.0, voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 1.0);
      Voluntario voluntario0 = new Voluntario("", "9pi6", 0.0, coordenadas0, 0.0, false, 1.0, "", "", (-260));
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals("9pi6", voluntario1.getNome());
      assertEquals((-260), voluntario1.getCap());
      assertFalse(voluntario1.isMed());
      assertEquals(1.0, voluntario0.getVkm(), 0.01);
      assertEquals(1.0, voluntario1.getVkm(), 0.01);
      assertEquals("", voluntario1.getCod());
      assertEquals("", voluntario1.getPass());
      assertEquals((-260), voluntario0.getCap());
      assertEquals("", voluntario1.getEmail());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("X: ", "X: ", 5610.25, (Coordenadas) null, 5610.25, false, 0.0, "I:s#~[bK7wv@", "/|", 0);
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertEquals(5610.25, voluntario0.getClas(), 0.01);
      assertEquals("X: ", voluntario1.getCod());
      assertFalse(voluntario1.isMed());
      assertEquals(0, voluntario1.getCap());
      assertEquals("I:s#~[bK7wv@", voluntario1.getEmail());
      assertEquals("X: ", voluntario1.getNome());
      assertEquals("/|", voluntario1.getPass());
      assertEquals(5610.25, voluntario1.getClas(), 0.01);
      assertEquals(5610.25, voluntario1.getRange(), 0.01);
      assertEquals(5610.25, voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2790.2633637145195), (-2790.2633637145195));
      Voluntario voluntario0 = new Voluntario("", "", (-2790.2633637145195), coordenadas0, (-2790.2633637145195), false, (-2790.2633637145195), "", "", 1);
      assertEquals(1, voluntario0.getCap());
      
      voluntario0.dimCap();
      voluntario0.clone();
      assertEquals(0, voluntario0.getCap());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario("9e6@o{jLY]", (String) null, 0.0, coordenadas0, (-1971.9444884556658), true, 0.0, "\".F<T3rSioD", "rF9$uDV(Ww`dUv~p", 1);
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals("9e6@o{jLY]", voluntario1.getCod());
      assertEquals(1, voluntario1.getCap());
      assertEquals(1, voluntario0.getCap());
      assertTrue(voluntario1.isMed());
      assertEquals("\".F<T3rSioD", voluntario1.getEmail());
      assertEquals("rF9$uDV(Ww`dUv~p", voluntario1.getPass());
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertEquals((-1971.9444884556658), voluntario1.getClas(), 0.01);
      assertEquals((-1971.9444884556658), voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-727.278008), (-727.278008));
      Voluntario voluntario0 = new Voluntario("", "", (-727.278008), coordenadas0, (-727.278008), true, 2932.948915229, "traz_aqui.Coordenadas", "tM,(oO2g", 0);
      Double double0 = new Double(0.0);
      double double1 = voluntario0.calcTemp(coordenadas0, coordenadas0, double0);
      assertEquals("traz_aqui.Coordenadas", voluntario0.getEmail());
      assertEquals("tM,(oO2g", voluntario0.getPass());
      assertEquals(2932.948915229, voluntario0.getVkm(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals("", voluntario0.getCod());
      assertEquals("", voluntario0.getNome());
      assertEquals((-727.278008), voluntario0.getClas(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals(0, voluntario0.getCap());
      assertEquals((-727.278008), voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-12.5091039899), (-12.5091039899));
      Voluntario voluntario0 = new Voluntario("JY:", "JY:", (-12.5091039899), coordenadas0, (-12.5091039899), false, (-12.5091039899), "JY:", "JY:", 6);
      Double double0 = new Double(6);
      double double1 = voluntario0.calcTemp(coordenadas0, coordenadas0, double0);
      assertEquals((-12.5091039899), voluntario0.getVkm(), 0.01);
      assertEquals(6, voluntario0.getCap());
      assertEquals(6.0, double1, 0.01);
      assertFalse(voluntario0.isMed());
      assertEquals((-12.5091039899), voluntario0.getRange(), 0.01);
      assertEquals((-12.5091039899), voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(999.9939473921, 0.0);
      Voluntario voluntario0 = new Voluntario("", "zY", (-1280.37899), coordenadas0, 0.0, false, 160.565816711, "", "", 4526);
      // Undeclared exception!
      try { 
        voluntario0.isRangeV(coordenadas0, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("!yQDE7-a~(B)P", (String) null, 0.0, (Coordenadas) null, 0.0, true, (-6433.5011443943), "", (String) null, 2032);
      // Undeclared exception!
      try { 
        voluntario0.distanceV((Coordenadas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Voluntario voluntario0 = new Voluntario("q7S:ouUzXpBY|SWrZ", "q7S:ouUzXpBY|SWrZ", 3116.0, coordenadas0, 3116.0, true, 3116.0, "_T$?XUx4Htb.M4[", "q7S:ouUzXpBY|SWrZ", (-3690));
      Double double0 = new Double((-940.161189201));
      // Undeclared exception!
      try { 
        voluntario0.calcTemp(coordenadas0, (Coordenadas) null, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Voluntario voluntario0 = null;
      try {
        voluntario0 = new Voluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-356.18), (-356.18));
      Voluntario voluntario0 = new Voluntario("", "", (-356.18), coordenadas0, (-356.18), false, (-356.18), "", "", 0);
      int int0 = voluntario0.getCap();
      assertEquals((-356.18), voluntario0.getVkm(), 0.01);
      assertEquals((-356.18), voluntario0.getClas(), 0.01);
      assertEquals(0, int0);
      assertFalse(voluntario0.isMed());
      assertEquals((-356.18), voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Voluntario voluntario0 = new Voluntario("q7S:ouUzXpBY|SWrZ", "q7S:ouUzXpBY|SWrZ", 3116.0, coordenadas0, 3116.0, true, 3116.0, "_T$?XUx4Htb.M4[", "q7S:ouUzXpBY|SWrZ", (-3690));
      String string0 = voluntario0.getEmail();
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getCod());
      assertEquals(3116.0, voluntario0.getVkm(), 0.01);
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getPass());
      assertEquals(3116.0, voluntario0.getRange(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals((-3690), voluntario0.getCap());
      assertEquals(3116.0, voluntario0.getClas(), 0.01);
      assertEquals("_T$?XUx4Htb.M4[", string0);
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getNome());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1049.3046315122), 2120.0268);
      Voluntario voluntario0 = new Voluntario("I|fnjL{WJewL", "I|fnjL{WJewL", 1698.9, coordenadas0, 0.0, false, 0.0, "I|fnjL{WJewL", "I|fnjL{WJewL", 281);
      double double0 = voluntario0.getRange();
      assertFalse(voluntario0.isMed());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertEquals(281, voluntario0.getCap());
      assertEquals(1698.9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Voluntario voluntario0 = new Voluntario("", "", 434.716475147, coordenadas0, 0.0, false, (-1421.0), "", "", 2656);
      double double0 = voluntario0.getVkm();
      assertFalse(voluntario0.isMed());
      assertEquals(434.716475147, voluntario0.getRange(), 0.01);
      assertEquals((-1421.0), double0, 0.01);
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals(2656, voluntario0.getCap());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-727.278008), (-727.278008));
      Voluntario voluntario0 = new Voluntario("", "", (-727.278008), coordenadas0, (-727.278008), true, 2932.948915229, "traz_aqui.Coordenadas", "tM,(oO2g", 0);
      String string0 = voluntario0.getCod();
      assertEquals((-727.278008), voluntario0.getClas(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals("", voluntario0.getNome());
      assertEquals("tM,(oO2g", voluntario0.getPass());
      assertEquals("traz_aqui.Coordenadas", voluntario0.getEmail());
      assertEquals((-727.278008), voluntario0.getRange(), 0.01);
      assertEquals(0, voluntario0.getCap());
      assertEquals(2932.948915229, voluntario0.getVkm(), 0.01);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-129.69570177081246), (-129.69570177081246));
      Voluntario voluntario0 = new Voluntario("- Y:", "", (-129.69570177081246), coordenadas0, (-129.69570177081246), true, (-129.69570177081246), "- Y:", "- Y:", (-265));
      String string0 = voluntario0.getPass();
      assertEquals((-129.69570177081246), voluntario0.getVkm(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals((-129.69570177081246), voluntario0.getRange(), 0.01);
      assertEquals((-129.69570177081246), voluntario0.getClas(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals((-265), voluntario0.getCap());
      assertEquals("- Y:", voluntario0.getCod());
      assertEquals("- Y:", string0);
      assertEquals("- Y:", voluntario0.getEmail());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1007.42), 952.4);
      Voluntario voluntario0 = new Voluntario("", "", (-1007.42), coordenadas0, 952.4, true, (-3199.1101165790615), "", "", 507);
      Voluntario voluntario1 = new Voluntario(voluntario0);
      assertEquals(507, voluntario1.getCap());
      assertEquals(952.4, voluntario0.getClas(), 0.01);
      assertEquals((-1007.42), voluntario1.getRange(), 0.01);
      assertEquals(952.4, voluntario1.getClas(), 0.01);
      assertEquals(507, voluntario0.getCap());
      assertEquals((-3199.1101165790615), voluntario1.getVkm(), 0.01);
      assertEquals((-1007.42), voluntario0.getRange(), 0.01);
      assertEquals((-3199.1101165790615), voluntario0.getVkm(), 0.01);
      assertTrue(voluntario1.isMed());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario("e9Wi_c^=2DDwX5r$Vh", "e9Wi_c^=2DDwX5r$Vh", 0.0, coordenadas0, 0.0, false, (-974.0539513573459), "X@\"-'j/gA", "", (-1));
      double double0 = voluntario0.getClas();
      assertEquals("X@\"-'j/gA", voluntario0.getEmail());
      assertFalse(voluntario0.isMed());
      assertEquals((-1), voluntario0.getCap());
      assertEquals("", voluntario0.getPass());
      assertEquals("e9Wi_c^=2DDwX5r$Vh", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals((-974.0539513573459), voluntario0.getVkm(), 0.01);
      assertEquals("e9Wi_c^=2DDwX5r$Vh", voluntario0.getCod());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-2108.17655846));
      Voluntario voluntario0 = new Voluntario("traz_aqui.Voluntario", "traz_aqui.Voluntario", 0.0, coordenadas0, 0.0, true, 0.0, "", ":i!tXb#-sC9!`Aq,", 0);
      voluntario0.getCord();
      assertEquals("traz_aqui.Voluntario", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals("traz_aqui.Voluntario", voluntario0.getCod());
      assertEquals(0, voluntario0.getCap());
      assertEquals(":i!tXb#-sC9!`Aq,", voluntario0.getPass());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-917.65431122959));
      Voluntario voluntario0 = new Voluntario("#tf:Cp", "#tf:Cp", (-917.65431122959), coordenadas0, (-917.65431122959), true, 0.0, "#tf:Cp", "#tf:Cp", 0);
      boolean boolean0 = voluntario0.isMed();
      assertEquals((-917.65431122959), voluntario0.getRange(), 0.01);
      assertEquals(0, voluntario0.getCap());
      assertTrue(boolean0);
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertEquals((-917.65431122959), voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 1.0);
      Voluntario voluntario0 = new Voluntario("- Y:", "- Y:", 0.0, coordenadas0, 0.0, true, 1.0, (String) null, (String) null, 0);
      String string0 = voluntario0.getNome();
      assertEquals(0, voluntario0.getCap());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals(1.0, voluntario0.getVkm(), 0.01);
      assertNotNull(string0);
      assertEquals(0.0, voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario("- Y:", "- Y:", 0.0, coordenadas0, 0.0, false, 0.0, "- Y:", "- Y:", (-48));
      voluntario0.dimCap();
      assertEquals((-49), voluntario0.getCap());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "", 3.458691424553, (Coordenadas) null, 3.458691424553, false, 3.458691424553, "", "", 0);
      voluntario0.dimCap();
      assertEquals(3.458691424553, voluntario0.getRange(), 0.01);
      assertEquals(3.458691424553, voluntario0.getVkm(), 0.01);
      assertEquals(0, voluntario0.getCap());
      assertFalse(voluntario0.isMed());
      assertEquals(3.458691424553, voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(4609.678323704, 4609.678323704);
      Voluntario voluntario0 = new Voluntario("", "", 4609.678323704, coordenadas0, (-1.0), true, (-1.0), "", "", 3363);
      voluntario0.changeR((-1.0));
      assertEquals(4609.678323704, voluntario0.getRange(), 0.01);
      assertEquals(3363, voluntario0.getCap());
      assertEquals((-1.0), voluntario0.getClas(), 0.01);
      assertTrue(voluntario0.isMed());
      assertEquals((-1.0), voluntario0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Voluntario voluntario0 = new Voluntario("q7S:ouUzXpBY|SWrZ", "q7S:ouUzXpBY|SWrZ", 3116.0, coordenadas0, 3116.0, true, 3116.0, "_T$?XUx4Htb.M4[", "q7S:ouUzXpBY|SWrZ", (-3690));
      assertEquals("_T$?XUx4Htb.M4[", voluntario0.getEmail());
      
      voluntario0.setEmail("zAtiVc$n+Uln");
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getPass());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("!yQDE7-a~(B)P", (String) null, 0.0, (Coordenadas) null, 0.0, true, (-6433.5011443943), "", (String) null, 2032);
      voluntario0.setNome((String) null);
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals(2032, voluntario0.getCap());
      assertTrue(voluntario0.isMed());
      assertEquals((-6433.5011443943), voluntario0.getVkm(), 0.01);
      assertEquals("!yQDE7-a~(B)P", voluntario0.getCod());
      assertEquals("", voluntario0.getEmail());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("!yQDE7-a~(B)P", (String) null, 0.0, (Coordenadas) null, 0.0, true, (-6433.5011443943), "", (String) null, 2032);
      voluntario0.setVkm(189.59);
      assertEquals(189.59, voluntario0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario("- Y:", "- Y:", 0.0, coordenadas0, 0.0, false, 0.0, "- Y:", "- Y:", (-48));
      voluntario0.setMed(false);
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertEquals((-48), voluntario0.getCap());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertFalse(voluntario0.isMed());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-36.5771721893), (-36.5771721893));
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, (-36.5771721893), coordenadas0, 217.52, true, 2939.0, (String) null, (String) null, 0);
      voluntario0.setPass((String) null);
      assertEquals((-36.5771721893), voluntario0.getRange(), 0.01);
      assertEquals(0, voluntario0.getCap());
      assertEquals(2939.0, voluntario0.getVkm(), 0.01);
      assertEquals(217.52, voluntario0.getClas(), 0.01);
      assertTrue(voluntario0.isMed());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario("- Y:", "- Y:", 0.0, coordenadas0, 0.0, false, 0.0, "- Y:", "- Y:", (-48));
      voluntario0.setClas(0.0);
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals((-48), voluntario0.getCap());
      assertFalse(voluntario0.isMed());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Voluntario voluntario0 = new Voluntario("q7S:ouUzXpBY|SWrZ", "q7S:ouUzXpBY|SWrZ", 3116.0, coordenadas0, 3116.0, true, 3116.0, "_T$?XUx4Htb.M4[", "q7S:ouUzXpBY|SWrZ", (-3690));
      voluntario0.setCap((-3690));
      assertEquals(3116.0, voluntario0.getVkm(), 0.01);
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getNome());
      assertEquals(3116.0, voluntario0.getClas(), 0.01);
      assertEquals((-3690), voluntario0.getCap());
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getPass());
      assertTrue(voluntario0.isMed());
      assertEquals(3116.0, voluntario0.getRange(), 0.01);
      assertEquals("_T$?XUx4Htb.M4[", voluntario0.getEmail());
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getCod());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario("- Y:", "- Y:", 0.0, coordenadas0, 0.0, false, 0.0, "- Y:", "- Y:", (-48));
      voluntario0.distanceV(coordenadas0);
      assertEquals((-48), voluntario0.getCap());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertFalse(voluntario0.isMed());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), (-1.0));
      Voluntario voluntario0 = new Voluntario("!/;$9,l", "!/;$9,l", (-1.0), coordenadas0, (-1.0), false, (-1.0), "!/;$9,l", "!/;$9,l", (-1));
      voluntario0.setRange((-1));
      assertEquals((-1.0), voluntario0.getVkm(), 0.01);
      assertFalse(voluntario0.isMed());
      assertEquals((-1.0), voluntario0.getRange(), 0.01);
      assertEquals((-1), voluntario0.getCap());
      assertEquals((-1.0), voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario("- Y:", "- Y:", 0.0, coordenadas0, 0.0, false, 0.0, "- Y:", "- Y:", (-48));
      voluntario0.setCod("- Y:");
      assertEquals((-48), voluntario0.getCap());
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertFalse(voluntario0.isMed());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Voluntario voluntario0 = new Voluntario("q7S:ouUzXpBY|SWrZ", "q7S:ouUzXpBY|SWrZ", 3116.0, coordenadas0, 3116.0, true, 3116.0, "_T$?XUx4Htb.M4[", "q7S:ouUzXpBY|SWrZ", (-3690));
      Double double0 = new Double((-940.161189201));
      double double1 = voluntario0.calcTemp(coordenadas0, coordenadas0, double0);
      assertEquals((-940.161189201), double1, 0.01);
      assertEquals((-3690), voluntario0.getCap());
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getPass());
      assertTrue(voluntario0.isMed());
      assertEquals(3116.0, voluntario0.getRange(), 0.01);
      assertEquals("_T$?XUx4Htb.M4[", voluntario0.getEmail());
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getCod());
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getNome());
      assertEquals(3116.0, voluntario0.getVkm(), 0.01);
      assertEquals(3116.0, voluntario0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Voluntario voluntario0 = new Voluntario("q7S:ouUzXpBY|SWrZ", "q7S:ouUzXpBY|SWrZ", 3116.0, coordenadas0, 3116.0, true, 3116.0, "_T$?XUx4Htb.M4[", "q7S:ouUzXpBY|SWrZ", (-3690));
      Double double0 = new Double((-940.161189201));
      voluntario0.isRangeV(coordenadas0, double0);
      assertEquals(3116.0, voluntario0.getVkm(), 0.01);
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getCod());
      assertEquals(3116.0, voluntario0.getClas(), 0.01);
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getNome());
      assertTrue(voluntario0.isMed());
      assertEquals("_T$?XUx4Htb.M4[", voluntario0.getEmail());
      assertEquals((-3690), voluntario0.getCap());
      assertEquals("q7S:ouUzXpBY|SWrZ", voluntario0.getPass());
      assertEquals(3116.0, voluntario0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario("- Y:", "- Y:", 0.0, coordenadas0, 0.0, false, 0.0, "- Y:", "- Y:", (-48));
      voluntario0.aumCap();
      assertEquals((-47), voluntario0.getCap());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Voluntario voluntario0 = new Voluntario("- Y:", "- Y:", 0.0, coordenadas0, 0.0, false, 0.0, "- Y:", "- Y:", (-48));
      voluntario0.setCord(coordenadas0);
      assertEquals(0.0, voluntario0.getVkm(), 0.01);
      assertFalse(voluntario0.isMed());
      assertEquals(0.0, voluntario0.getClas(), 0.01);
      assertEquals(0.0, voluntario0.getRange(), 0.01);
      assertEquals((-48), voluntario0.getCap());
  }
}
