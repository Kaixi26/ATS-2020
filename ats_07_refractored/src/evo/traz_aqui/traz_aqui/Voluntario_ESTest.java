/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 20 01:06:12 GMT 2020
 */

package traz_aqui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import traz_aqui.Voluntario;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Voluntario_ESTest extends Voluntario_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      double double0 = voluntario0.getraio();
      assertEquals(0.0, double0, 0.01);
      assertTrue(voluntario0.getlivre());
      assertEquals(0.0, voluntario0.getnumreviews(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("traz_aqui.Voluntario", "traz_aqui.Voluntario", "traz_aqui.Voluntario", 267.0926, (-1.0), "De4HRt^?O$h+`]T h", 1.0, false, 1.0, (-2490.0));
      double double0 = voluntario0.getraio();
      assertEquals(1.0, double0, 0.01);
      assertFalse(voluntario0.getlivre());
      assertEquals(1.0, voluntario0.getnumreviews(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      double double0 = voluntario0.getnumreviews();
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertTrue(voluntario0.getlivre());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("ZO8?", "ZO8?", "ZO8?", 0.0, 0.0, "sJot9l~~#x3eB&32", 0.0, false, 1.0, 0.0);
      double double0 = voluntario0.getnumreviews();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertFalse(voluntario0.getlivre());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("}2)Qnd}A", "'so)tE9{2jC", "}2)Qnd}A", (-48.34683633808987), (-48.34683633808987), "traz_aqui.Voluntario:", (-48.34683633808987), true, 1153.757662119475, (-48.34683633808987));
      double double0 = voluntario0.getavaliacao();
      assertTrue(voluntario0.getlivre());
      assertEquals((-48.34683633808987), voluntario0.getraio(), 0.01);
      assertEquals(1153.757662119475, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "@33=,\"", "", (-696.1130367426073), (-696.1130367426073), "", (-838.0), false, (-696.1130367426073), (-696.1130367426073));
      double double0 = voluntario0.getavaliacao();
      assertFalse(voluntario0.getlivre());
      assertEquals((-838.0), voluntario0.getraio(), 0.01);
      assertEquals((-696.1130367426073), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "", "Test traz_aqui.Voluntario menu:", 1.0, 1.0, "", 1239.83911, true, 224.0210584444, 0.0);
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals(1239.83911, voluntario0.getraio(), 0.01);
      assertEquals(224.0210584444, voluntario1.getavaliacao(), 0.01);
      assertTrue(voluntario1.getlivre());
      assertEquals(1239.83911, voluntario1.getraio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "@33=,\"", "", (-696.1130367426073), (-696.1130367426073), "", (-838.0), false, (-696.1130367426073), (-696.1130367426073));
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals((-838.0), voluntario1.getraio(), 0.01);
      assertFalse(voluntario1.getlivre());
      assertEquals((-838.0), voluntario0.getraio(), 0.01);
      assertEquals((-696.1130367426073), voluntario1.getavaliacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "", " ", 0.0, 3489.217664, "i8%", 631.27064517, true, 683.494, 1389.53297);
      voluntario0.locationX = null;
      // Undeclared exception!
      try { 
        voluntario0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.locationX = null;
      // Undeclared exception!
      try { 
        voluntario1.stringtoFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.locationX = null;
      // Undeclared exception!
      try { 
        voluntario0.equals(voluntario1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.locationX = null;
      // Undeclared exception!
      try { 
        voluntario0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Voluntario voluntario0 = null;
      try {
        voluntario0 = new Voluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "ul||OE", "", 850.186, 0.0, "traz_aqui.User", 0.0, true, (-1420.236157385041), 0.0);
      double double0 = voluntario0.getnumreviews();
      assertEquals((-1420.236157385041), double0, 0.01);
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertTrue(voluntario0.getlivre());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      boolean boolean0 = voluntario0.getlivre();
      assertTrue(boolean0);
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertEquals(0.0, voluntario0.getnumreviews(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("qkxWyX|8E@", "", (String) null, 0.0, (-1.0), "", (-1.0), false, 0.0, 0.0);
      double double0 = voluntario0.getraio();
      assertEquals((-1.0), double0, 0.01);
      assertFalse(voluntario0.getlivre());
      assertEquals(0.0, voluntario0.getavaliacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      double double0 = voluntario0.getavaliacao();
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertTrue(voluntario0.getlivre());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.equals(voluntario1);
      assertTrue(voluntario1.getlivre());
      assertEquals(0.0, voluntario1.getavaliacao(), 0.01);
      assertEquals(0.0, voluntario0.getraio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      boolean boolean0 = voluntario0.equals("");
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertFalse(boolean0);
      assertTrue(voluntario0.getlivre());
      assertEquals(0.0, voluntario0.getavaliacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      boolean boolean0 = voluntario0.equals(voluntario0);
      assertTrue(boolean0);
      assertTrue(voluntario0.getlivre());
      assertEquals(0.0, voluntario0.getavaliacao(), 0.01);
      assertEquals(0.0, voluntario0.getraio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      boolean boolean0 = voluntario0.equals((Object) null);
      assertTrue(voluntario0.getlivre());
      assertEquals(0.0, voluntario0.getnumreviews(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, voluntario0.getraio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setavaliacao((-1712.580704));
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertTrue(voluntario0.getlivre());
      assertEquals(0.0, voluntario0.getnumreviews(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      String string0 = voluntario0.stringtoFile();
      assertEquals("traz_aqui.Voluntario:,,,0.0,0.0,,0.0,true,0.0,0.0", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("cD[nQ", "cD[nQ", "cD[nQ", (-1.0), (-1.0), "cD[nQ", (-1.0), true, (-1.0), (-1.0));
      voluntario0.setraio((-1.0));
      assertEquals((-1.0), voluntario0.getraio(), 0.01);
      assertTrue(voluntario0.getlivre());
      assertEquals((-1.0), voluntario0.getavaliacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.menu();
      assertEquals(0.0, voluntario0.getnumreviews(), 0.01);
      assertTrue(voluntario0.getlivre());
      assertEquals(0.0, voluntario0.getraio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setnumreviews((-1712.580704));
      assertEquals((-1712.580704), voluntario0.getavaliacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      assertTrue(voluntario0.getlivre());
      
      voluntario0.setlivre(false);
      boolean boolean0 = voluntario0.getlivre();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      String string0 = voluntario0.toString();
      assertEquals("  0.0 0.0  0.0true0.00.0", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals(0.0, voluntario1.getavaliacao(), 0.01);
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertTrue(voluntario1.getlivre());
  }
}
