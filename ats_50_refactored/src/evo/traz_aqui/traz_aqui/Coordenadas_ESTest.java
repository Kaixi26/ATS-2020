package traz_aqui;/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 20 00:34:37 GMT 2020
 */

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Coordenadas_ESTest extends Coordenadas_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 1371.4287);
      boolean boolean0 = coordenadas0.isRange(coordenadas0, 0.0);
      assertEquals(1371.4287, coordenadas0.getY(), 0.01);
      assertEquals(0.0, coordenadas0.getX(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), (-1.0));
      coordenadas0.setY(0.0);
      double double0 = coordenadas0.getY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-839.646526));
      double double0 = coordenadas0.getY();
      assertEquals(0.0, coordenadas0.getX(), 0.01);
      assertEquals((-839.646526), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      double double0 = coordenadas0.getX();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, coordenadas0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-932.60041367035), (-932.60041367035));
      double double0 = coordenadas0.getX();
      assertEquals((-932.60041367035), coordenadas0.getY(), 0.01);
      assertEquals((-932.60041367035), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(516.0, 516.0);
      Coordenadas coordenadas1 = new Coordenadas(0.0, (-1.0));
      double double0 = coordenadas0.distancia(coordenadas1);
      assertEquals(516.0, coordenadas0.getY(), 0.01);
      assertEquals(730.441647224472, double0, 0.01);
      assertEquals(0.0, coordenadas1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), (-1.0));
      coordenadas0.setY(0.0);
      coordenadas0.clone();
      assertEquals(0.0, coordenadas0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Coordenadas coordenadas1 = coordenadas0.clone();
      assertEquals(0.0, coordenadas0.getX(), 0.01);
      assertEquals((-1.0), coordenadas1.getY(), 0.01);
      assertEquals((-1.0), coordenadas0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(516.0, 516.0);
      // Undeclared exception!
      try { 
        coordenadas0.distancia((Coordenadas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Coordenadas", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordenadas coordenadas0 = null;
      try {
        coordenadas0 = new Coordenadas((Coordenadas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Coordenadas", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2.0, 2.0);
      double double0 = coordenadas0.getX();
      assertEquals(2.0, double0, 0.01);
      assertEquals(2.0, coordenadas0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(516.0, 516.0);
      Coordenadas coordenadas1 = new Coordenadas(coordenadas0);
      assertEquals(516.0, coordenadas1.getX(), 0.01);
      assertEquals(516.0, coordenadas0.getX(), 0.01);
      assertEquals(516.0, coordenadas0.getY(), 0.01);
      assertEquals(516.0, coordenadas1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(516.0, 516.0);
      double double0 = coordenadas0.getY();
      assertEquals(516.0, double0, 0.01);
      assertEquals(516.0, coordenadas0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(516.0, 516.0);
      double double0 = coordenadas0.distancia(coordenadas0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(516.0, coordenadas0.getX(), 0.01);
      assertEquals(516.0, coordenadas0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(802.4226605874006, 802.4226605874006);
      boolean boolean0 = coordenadas0.isRange(coordenadas0, (-1.0));
      assertFalse(boolean0);
      assertEquals(802.4226605874006, coordenadas0.getY(), 0.01);
      assertEquals(802.4226605874006, coordenadas0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(802.4226605874006, 802.4226605874006);
      String string0 = coordenadas0.toString();
      assertEquals("X: 802.4226605874006- Y:802.4226605874006", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(802.4226605874006, 802.4226605874006);
      Coordenadas coordenadas1 = coordenadas0.clone();
      assertEquals(802.4226605874006, coordenadas1.getX(), 0.01);
      assertEquals(802.4226605874006, coordenadas1.getY(), 0.01);
      assertEquals(802.4226605874006, coordenadas0.getX(), 0.01);
      assertEquals(802.4226605874006, coordenadas0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(802.4226605874006, 802.4226605874006);
      coordenadas0.setX(802.4226605874006);
      assertEquals(802.4226605874006, coordenadas0.getY(), 0.01);
      assertEquals(802.4226605874006, coordenadas0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(802.4226605874006, 802.4226605874006);
      boolean boolean0 = coordenadas0.isRange(coordenadas0, 802.4226605874006);
      assertEquals(802.4226605874006, coordenadas0.getY(), 0.01);
      assertEquals(802.4226605874006, coordenadas0.getX(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      // Undeclared exception!
      try { 
        coordenadas0.isRange((Coordenadas) null, 3439.6516107);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Coordenadas", e);
      }
  }
}
