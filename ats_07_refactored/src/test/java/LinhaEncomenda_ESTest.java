/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 31 14:45:22 GMT 2020
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import traz_aqui.LinhaEncomenda;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinhaEncomenda_ESTest extends LinhaEncomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setcodLinha((String) null);
      linhaEncomenda0.getcodLinha();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.getcodLinha();
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setQuantidade(1672.843783);
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals(1672.843783, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, ":", (-2889.95171), (-2889.95171));
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals((-2889.95171), linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-2889.95171), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setPreco(2487.344972851);
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(2487.344972851, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setPreco((-848.34578338));
      double double0 = linhaEncomenda0.getPreco();
      assertEquals((-848.34578338), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      linhaEncomenda1.getDescricao();
      assertTrue(linhaEncomenda1.equals((Object)linhaEncomenda0));
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("fEk=", "w", 0.0, 0.0);
      String string0 = linhaEncomenda0.getDescricao();
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals("w", string0);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals("fEk=", linhaEncomenda0.getcodLinha());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      // Undeclared exception!
      try { 
        linhaEncomenda1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      // Undeclared exception!
      try { 
        linhaEncomenda1.stringtoFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      // Undeclared exception!
      try { 
        linhaEncomenda1.getQuantidade();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = null;
      try {
        linhaEncomenda0 = new LinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("E\"#5'jJ:LF,", "LDk}", 1.0, 1.0);
      String string0 = linhaEncomenda0.getcodLinha();
      assertEquals("LDk}", linhaEncomenda0.getDescricao());
      assertEquals(1.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals("E\"#5'jJ:LF,", string0);
      assertEquals(1.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.getDescricao();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      boolean boolean0 = linhaEncomenda1.equals(linhaEncomenda0);
      assertTrue(boolean0);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      Object object0 = new Object();
      boolean boolean0 = linhaEncomenda0.equals(object0);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals((Object) null);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda0);
      assertTrue(boolean0);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("traz_qui.LinhaEnc\"mend", "traz_qui.LinhaEnc\"mend", (-3260.4838764564242), (-3260.4838764564242));
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertEquals(0.0, linhaEncomenda1.getQuantidade(), 0.01);
      assertEquals((-3260.4838764564242), linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-3260.4838764564242), linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getPreco(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("traz_qui.LinhaEnc\"mend", "traz_qui.LinhaEnc\"mend", (-3260.4838764564242), (-3260.4838764564242));
      linhaEncomenda0.hashCode();
      assertEquals((-3260.4838764564242), linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals((-3260.4838764564242), linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      String string0 = linhaEncomenda0.toString();
      assertEquals("0.00.0", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setDescicao("traz_aqui.LinhaEncomenda");
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      String string0 = linhaEncomenda0.stringtoFile();
      assertEquals(",,0.0,0.0", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      // Undeclared exception!
      try { 
        linhaEncomenda1.getPreco();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.LinhaEncomenda", e);
      }
  }
}
