/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 20 01:30:38 GMT 2020
 */

package traz_aqui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import traz_aqui.Buyer;
import traz_aqui.Loja;
import traz_aqui.Transportadora;
import traz_aqui.User;
import traz_aqui.Voluntario;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      Transportadora transportadora1 = new Transportadora("", "8M", "", 1295.64480785, 1295.64480785, "8M", 1295.64480785, 1295.64480785, (-1), (-2451), 1.0);
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertFalse(boolean0);
      assertEquals("", transportadora1.getUserName());
      assertEquals(0.0, transportadora0.getLocationY(), 0.01);
      assertEquals(1295.64480785, transportadora1.getLocationX(), 0.01);
      assertEquals("8M", transportadora1.getCodigo());
      assertEquals("8M", transportadora1.getEmail());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("k", "k", "ePW/Z", 490.585721, 490.585721, "k", 0.0, false, 490.585721, (-1.0));
      String string0 = voluntario0.toString();
      assertEquals("k ePW/Z 490.585721 490.585721 k k0.0false490.585721-1.0", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buyer buyer0 = new Buyer();
      String string0 = buyer0.stringtoFile();
      assertEquals("Utilizador:,,,0.0,0.0,", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario((String) null, "eFZ", (String) null, 0.0, 0.0, (String) null, (-939.988), true, 0.0, (-939.988));
      String string0 = voluntario0.getUserName();
      assertNull(string0);
      assertEquals(0.0, voluntario0.getLocationX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("traz_aqui.User", "traz_aqui.User", "", 6652.2712844491525, 0.5, " ", 0.5, 5.0, 206, 0.0, 3147.485);
      String string0 = transportadora0.getUserName();
      assertEquals("traz_aqui.User", string0);
      assertEquals("traz_aqui.User", transportadora0.getCodigo());
      assertNotNull(string0);
      assertEquals(" ", transportadora0.getEmail());
      assertEquals(6652.2712844491525, transportadora0.getLocationY(), 0.01);
      assertEquals("", transportadora0.getPassword());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", (String) null, (String) null, (-1876.944093628311), 1.0, "hs|P#RD{?", 1.0, true, 1.0, 0.0);
      String string0 = voluntario0.getPassword();
      assertNull(string0);
      assertEquals("hs|P#RD{?", voluntario0.getEmail());
      assertEquals((-1876.944093628311), voluntario0.getLocationX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.getLocationY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("k", "k", "ePW/Z", 490.585721, 490.585721, "k", 0.0, false, 490.585721, (-1.0));
      double double0 = voluntario0.getLocationY();
      assertEquals(490.585721, double0, 0.01);
      assertEquals("ePW/Z", voluntario0.getPassword());
      assertEquals("k", voluntario0.getCodigo());
      assertEquals("k", voluntario0.getEmail());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buyer buyer0 = new Buyer("Z15%", "Z15%", "", 0.0, 0.0, "");
      double double0 = buyer0.getLocationX();
      assertEquals("Z15%", buyer0.getCodigo());
      assertEquals(0.0, double0, 0.01);
      assertEquals("", buyer0.getEmail());
      assertEquals("", buyer0.getPassword());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("[ViGi%(wc", "[ViGi%(wc", "[ViGi%(wc", 427.7173950823104, 0.0, "[ViGi%(wc", 0.0, 427.7173950823104, (-1223), 0.0, 1.0);
      double double0 = transportadora0.getLocationX();
      assertEquals(427.7173950823104, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.setEmail("dr]~Zq");
      loja0.getEmail();
      assertEquals("dr]~Zq", loja0.getEmail());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.getEmail();
      assertEquals(0.0, loja0.getLocationY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Loja loja0 = new Loja((String) null, (String) null, (String) null, (-2958.9), (-1.0), (String) null);
      loja0.getCodigo();
      assertEquals((-2958.9), loja0.getLocationY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.getCodigo();
      assertEquals(0.0, transportadora0.getLocationX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.equals(transportadora0);
      assertEquals(0.0, transportadora0.getLocationY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buyer buyer0 = new Buyer("", "", "", 0.0, 895.72706, (String) null);
      User user0 = buyer0.clone();
      assertTrue(user0.equals((Object)buyer0));
      assertEquals(0.0, user0.getLocationY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setLocationX(1667.5538);
      voluntario0.clone();
      assertEquals(1667.5538, voluntario0.getLocationX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, "Mi<gk|HtN", "", (-1.0), 0.0, "Mi<gk|HtN", (-1.0), 1970.8982396080828, 0, (-1.0), 862.6699162032);
      User user0 = transportadora0.clone();
      String string0 = user0.getPassword();
      assertNotNull(string0);
      assertEquals("Mi<gk|HtN", user0.getEmail());
      assertEquals("", user0.getCodigo());
      assertFalse(user0.equals((Object)transportadora0));
      assertEquals((-1.0), transportadora0.getLocationX(), 0.01);
      assertEquals((-1.0), user0.getLocationY(), 0.01);
      assertEquals("Mi<gk|HtN", transportadora0.getEmail());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.locationX = null;
      // Undeclared exception!
      try { 
        loja0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.locationX = null;
      // Undeclared exception!
      try { 
        loja0.stringtoFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.locationX = null;
      // Undeclared exception!
      try { 
        voluntario0.getLocationX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.locationX = null;
      // Undeclared exception!
      try { 
        voluntario0.equals(voluntario1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.locationX = null;
      // Undeclared exception!
      try { 
        transportadora0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buyer buyer0 = new Buyer("", "", "", 0.0, 895.72706, (String) null);
      String string0 = buyer0.getEmail();
      assertNull(string0);
      assertEquals(0.0, buyer0.getLocationX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buyer buyer0 = new Buyer("", "YvD%+", "", 5.0, 1.0, (String) null);
      String string0 = buyer0.getUserName();
      assertEquals("", string0);
      assertEquals(5.0, buyer0.getLocationX(), 0.01);
      assertNotNull(string0);
      assertEquals("YvD%+", buyer0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("wj! \"z&r7R+UUAlMRX", "YvD%+", "wj! \"z&r7R+UUAlMRX", (-605.8951254369981), (-605.8951254369981), (String) null, 1.0, false, (-1.0), (-1.0));
      double double0 = voluntario0.getLocationX();
      assertEquals((-605.8951254369981), double0, 0.01);
      assertEquals("YvD%+", voluntario0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, "Mi<gk|HtN", "", (-1.0), 0.0, "Mi<gk|HtN", (-1.0), 1970.8982396080828, 0, (-1.0), 862.6699162032);
      String string0 = transportadora0.getPassword();
      assertEquals("Mi<gk|HtN", transportadora0.getCodigo());
      assertEquals("", string0);
      assertEquals((-1.0), transportadora0.getLocationY(), 0.01);
      assertEquals("Mi<gk|HtN", transportadora0.getEmail());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", "", (-114.80454), 0.5, "", 0.5, 0.5, 787, 0.0, 0.0);
      double double0 = transportadora0.getLocationY();
      assertEquals((-114.80454), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario((String) null, "eFZ", (String) null, 0.0, 0.0, (String) null, (-939.988), true, 0.0, (-939.988));
      String string0 = voluntario0.getCodigo();
      assertNotNull(string0);
      assertEquals(0.0, voluntario0.getLocationY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buyer buyer0 = new Buyer();
      Buyer buyer1 = new Buyer(buyer0);
      assertTrue(buyer1.equals((Object)buyer0));
      
      buyer1.setCodigo("traz_aqui.Voluntario:,,,0.0,0.0,,0.0,0.0,0.0,0.0");
      boolean boolean0 = buyer1.equals(buyer0);
      assertEquals("traz_aqui.Voluntario:,,,0.0,0.0,,0.0,0.0,0.0,0.0", buyer1.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario();
      voluntario1.password = "]";
      boolean boolean0 = voluntario1.equals(voluntario0);
      assertEquals("]", voluntario1.getPassword());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario();
      voluntario1.email = "S3";
      boolean boolean0 = voluntario0.equals(voluntario1);
      assertEquals("S3", voluntario1.getEmail());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setLocationY(0.0);
      assertEquals(0.0, voluntario0.getLocationX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setPassword("  0.0 0.0  0.00.000.00.0");
      assertEquals("  0.0 0.0  0.00.000.00.0", transportadora0.getPassword());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buyer buyer0 = new Buyer();
      Buyer buyer1 = new Buyer(buyer0);
      boolean boolean0 = buyer1.equals(buyer0);
      assertEquals(0.0, buyer1.getLocationX(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setUserName("S3");
      Transportadora transportadora1 = new Transportadora();
      boolean boolean0 = transportadora0.equals(transportadora1);
      assertEquals("S3", transportadora0.getUserName());
      assertFalse(boolean0);
  }
}
