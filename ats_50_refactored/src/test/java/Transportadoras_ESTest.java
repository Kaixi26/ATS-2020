/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 31 16:20:37 GMT 2020
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import traz_aqui.Coordenadas;
import traz_aqui.Transportadoras;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transportadoras_ESTest extends Transportadoras_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-318.2), 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, (-318.2), (-318.2), (-318.2), (-318.2), false, 0.0, "", "", (-337.91056268), (-1477));
      transportadoras0.dimCap();
      assertEquals((-1478), transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Transportadoras transportadoras0 = new Transportadoras("q,wr", "q,wr", coordenadas0, 0.0, 2294.22, (-1.0), (-1561.380193734932), true, 457.384717, "q,wr", "", 2294.22, 0);
      transportadoras0.changeR((-1.0));
      assertEquals((-1562.380193734932), transportadoras0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("t=FZMS6zDkW%", "t=FZMS6zDkW%", coordenadas0, 0.0, 0.0, 0.0, 0.0, false, 0.0, "t=FZMS6zDkW%", "t=FZMS6zDkW%", 0.0, 1);
      transportadoras0.changeR(0.0);
      assertEquals(1, transportadoras0.getCap());
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-2311.6273225356), 45.2);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 125.654403852, 45.2, (-2311.6273225356), 125.654403852, true, 125.654403852, "", "", 1345.254648208341, 2309);
      Coordenadas coordenadas1 = new Coordenadas(0.0, 597.0);
      double double0 = transportadoras0.calcCost(coordenadas0, (-4091.5048), coordenadas1);
      assertEquals((-2311.6273225356), transportadoras0.getNif(), 0.01);
      assertEquals(1345.254648208341, transportadoras0.getKmp(), 0.01);
      assertEquals(125.654403852, transportadoras0.getRange(), 0.01);
      assertEquals(2309, transportadoras0.getCap());
      assertEquals((-1993.173328548096), double0, 0.01);
      assertEquals(125.654403852, transportadoras0.getClas(), 0.01);
      assertEquals(125.654403852, transportadoras0.getVkm(), 0.01);
      assertTrue(transportadoras0.isMed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), 1.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, (-1.0), 0.0, 0.0, (-3369.82488550313), false, 0.0, "", "\"3", 0.0, 1690);
      Double double0 = new Double(0.0);
      double double1 = transportadoras0.calcTemp(coordenadas0, coordenadas0, double0);
      assertEquals((-3369.82488550313), transportadoras0.getClas(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals((-1.0), transportadoras0.getRange(), 0.01);
      assertEquals("", transportadoras0.getCod());
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals("", transportadoras0.getNome());
      assertEquals("\"3", transportadoras0.getPass());
      assertEquals("", transportadoras0.getEmail());
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(1690, transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), 1.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, (-1.0), 0.0, 0.0, (-3369.82488550313), false, 0.0, "", "\"3", 0.0, 1690);
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals("", transportadoras1.getNome());
      assertEquals((-1.0), transportadoras1.getRange(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals("", transportadoras1.getEmail());
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(1690, transportadoras0.getCap());
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals((-3369.82488550313), transportadoras0.getClas(), 0.01);
      assertEquals("", transportadoras1.getCod());
      assertFalse(transportadoras1.isMed());
      assertEquals((-1.0), transportadoras0.getRange(), 0.01);
      assertEquals("\"3", transportadoras1.getPass());
      assertEquals(1690, transportadoras1.getCap());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(645.369073882, 0.5);
      Transportadoras transportadoras0 = new Transportadoras("traz_aqui.Transportadoras", "traz_aqui.Transportadoras", coordenadas0, 0.5, 1552.10724, 0.5, 0.0, false, 1.0, "~-UO(a\",.\"a37", "t0m<Lux}0aY3y`s2yQ", 0.5, (-1));
      Double double0 = new Double(0.0);
      transportadoras0.isRangeT(coordenadas0, double0);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals((-1), transportadoras0.getCap());
      assertEquals("traz_aqui.Transportadoras", transportadoras0.getNome());
      assertEquals(0.5, transportadoras0.getRange(), 0.01);
      assertEquals("t0m<Lux}0aY3y`s2yQ", transportadoras0.getPass());
      assertEquals("traz_aqui.Transportadoras", transportadoras0.getCod());
      assertEquals(1552.10724, transportadoras0.getPrkm(), 0.01);
      assertEquals("~-UO(a\",.\"a37", transportadoras0.getEmail());
      assertEquals(1.0, transportadoras0.getVkm(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(0.5, transportadoras0.getKmp(), 0.01);
      assertEquals(0.5, transportadoras0.getNif(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1828.864, 1828.864);
      Transportadoras transportadoras0 = new Transportadoras("jFe613Q^", (String) null, coordenadas0, (-1.0), (-1.0), 0.0, (-1.0), true, 1.0, "!H~*X\"P)R;V", (String) null, 1828.864, (-3019));
      boolean boolean0 = transportadoras0.isMed();
      assertEquals((-1.0), transportadoras0.getClas(), 0.01);
      assertTrue(boolean0);
      assertEquals((-1.0), transportadoras0.getPrkm(), 0.01);
      assertEquals(1.0, transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals("!H~*X\"P)R;V", transportadoras0.getEmail());
      assertEquals((-1.0), transportadoras0.getRange(), 0.01);
      assertEquals((-3019), transportadoras0.getCap());
      assertEquals(1828.864, transportadoras0.getKmp(), 0.01);
      assertEquals("jFe613Q^", transportadoras0.getCod());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "traz_aqui.Coordenadas", coordenadas0, 0.0, 2.0, 0.0, 0.0, false, 0.0, "", "", (-1541.415314), 0);
      double double0 = transportadoras0.getVkm();
      assertEquals(0, transportadoras0.getCap());
      assertEquals("", transportadoras0.getPass());
      assertEquals(2.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals("traz_aqui.Coordenadas", transportadoras0.getNome());
      assertEquals("", transportadoras0.getCod());
      assertFalse(transportadoras0.isMed());
      assertEquals((-1541.415314), transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals("", transportadoras0.getEmail());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 2371.8);
      Transportadoras transportadoras0 = new Transportadoras("w%6=", "w%6=", coordenadas0, 2371.8, 2371.8, 2371.8, 1611.744, true, 1611.744, "w%6=", "w%6=", 1.0, 2257);
      double double0 = transportadoras0.getVkm();
      assertEquals(2257, transportadoras0.getCap());
      assertEquals(2371.8, transportadoras0.getRange(), 0.01);
      assertEquals(1611.744, transportadoras0.getClas(), 0.01);
      assertEquals(2371.8, transportadoras0.getNif(), 0.01);
      assertEquals(1.0, transportadoras0.getKmp(), 0.01);
      assertEquals(1611.744, double0, 0.01);
      assertEquals(2371.8, transportadoras0.getPrkm(), 0.01);
      assertTrue(transportadoras0.isMed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 0.0, 0.0, 0.0, 0.0, true, (-1104.2), "_vU^o,Z", (String) null, (-1104.2), 1338);
      double double0 = transportadoras0.getRange();
      assertTrue(transportadoras0.isMed());
      assertEquals("", transportadoras0.getCod());
      assertEquals((-1104.2), transportadoras0.getVkm(), 0.01);
      assertEquals("_vU^o,Z", transportadoras0.getEmail());
      assertEquals((-1104.2), transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1338, transportadoras0.getCap());
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals("", transportadoras0.getNome());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(2032.227698, 1.0);
      Transportadoras transportadoras0 = new Transportadoras("Dx/'dw/<j", "", coordenadas0, 2032.227698, 2032.227698, 2185.082070300706, 0.0, false, 0.0, "F~)AHwuIW_RI#7", "mk.qwKrm.TJP+>:\"mR_", 2185.082070300706, 0);
      double double0 = transportadoras0.getRange();
      assertFalse(transportadoras0.isMed());
      assertEquals(2032.227698, double0, 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals("Dx/'dw/<j", transportadoras0.getCod());
      assertEquals(2185.082070300706, transportadoras0.getNif(), 0.01);
      assertEquals(2185.082070300706, transportadoras0.getKmp(), 0.01);
      assertEquals("", transportadoras0.getNome());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals(0, transportadoras0.getCap());
      assertEquals("mk.qwKrm.TJP+>:\"mR_", transportadoras0.getPass());
      assertEquals(2032.227698, transportadoras0.getPrkm(), 0.01);
      assertEquals("F~)AHwuIW_RI#7", transportadoras0.getEmail());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 0.0, 0.0, 0.0, 0.0, true, (-1104.2), "_vU^o,Z", (String) null, (-1104.2), 1338);
      double double0 = transportadoras0.getPrkm();
      assertEquals((-1104.2), transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(1338, transportadoras0.getCap());
      assertEquals("_vU^o,Z", transportadoras0.getEmail());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals("", transportadoras0.getNome());
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals((-1104.2), transportadoras0.getKmp(), 0.01);
      assertEquals("", transportadoras0.getCod());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-318.2), 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, (-318.2), (-318.2), (-318.2), (-318.2), false, 0.0, "", "", (-337.91056268), (-1477));
      transportadoras0.setPrkm(1883.5167721416979);
      double double0 = transportadoras0.getPrkm();
      assertEquals(1883.5167721416979, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1828.864, 1828.864);
      Transportadoras transportadoras0 = new Transportadoras("jFe613Q^", (String) null, coordenadas0, (-1.0), (-1.0), 0.0, (-1.0), true, 1.0, "!H~*X\"P)R;V", (String) null, 1828.864, (-3019));
      String string0 = transportadoras0.getPass();
      assertEquals((-1.0), transportadoras0.getClas(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals(1828.864, transportadoras0.getKmp(), 0.01);
      assertEquals((-1.0), transportadoras0.getRange(), 0.01);
      assertEquals((-3019), transportadoras0.getCap());
      assertEquals("!H~*X\"P)R;V", transportadoras0.getEmail());
      assertEquals("jFe613Q^", transportadoras0.getCod());
      assertEquals(1.0, transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertNull(string0);
      assertEquals((-1.0), transportadoras0.getPrkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("traz_aqui.Coordenadas", "traz_aqui.Coordenadas", (Coordenadas) null, 0.0, 0.0, (-2246.98), 3370.6253650576, false, (-2531.529614456368), "traz_aqui.Coordenadas", "traz_aqui.Coordenadas", (-2246.98), 3065);
      transportadoras0.getPass();
      assertEquals((-2246.98), transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals((-2246.98), transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(3370.6253650576, transportadoras0.getClas(), 0.01);
      assertEquals((-2531.529614456368), transportadoras0.getVkm(), 0.01);
      assertEquals(3065, transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1560.14407511), (-1560.14407511));
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, (-1560.14407511), (-2901.7209315), (-2901.7209315), (-1560.14407511), true, (-1560.14407511), (String) null, (String) null, (-467.0), 618);
      transportadoras0.getNome();
      assertEquals((-467.0), transportadoras0.getKmp(), 0.01);
      assertEquals((-1560.14407511), transportadoras0.getRange(), 0.01);
      assertEquals((-1560.14407511), transportadoras0.getVkm(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals(618, transportadoras0.getCap());
      assertEquals((-2901.7209315), transportadoras0.getNif(), 0.01);
      assertEquals((-1560.14407511), transportadoras0.getClas(), 0.01);
      assertEquals((-2901.7209315), transportadoras0.getPrkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("traz_aqui.Coordenadas", "traz_aqui.Coordenadas", (Coordenadas) null, 0.0, 0.0, (-2246.98), 3370.6253650576, false, (-2531.529614456368), "traz_aqui.Coordenadas", "traz_aqui.Coordenadas", (-2246.98), 3065);
      transportadoras0.setNome("");
      transportadoras0.getNome();
      assertEquals((-2246.98), transportadoras0.getNif(), 0.01);
      assertEquals((-2531.529614456368), transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals((-2246.98), transportadoras0.getKmp(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(3065, transportadoras0.getCap());
      assertEquals(3370.6253650576, transportadoras0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("=#!<y&+C$9)", "", coordenadas0, 0.0, 0.0, 0.0, 1.0, false, 1.0, "@Osvura\\", "", 0.0, 1516);
      double double0 = transportadoras0.getNif();
      assertEquals(1516, transportadoras0.getCap());
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals("=#!<y&+C$9)", transportadoras0.getCod());
      assertEquals("", transportadoras0.getNome());
      assertEquals(1.0, transportadoras0.getClas(), 0.01);
      assertEquals(1.0, transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals("@Osvura\\", transportadoras0.getEmail());
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals("", transportadoras0.getPass());
      assertFalse(transportadoras0.isMed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 0.0, 0.0, 3728.0454, 0.0, true, 2228.5, "I*;H42=%cPrD%M0", "I*;H42=%cPrD%M0", 0.0, 1337);
      double double0 = transportadoras0.getNif();
      assertEquals("I*;H42=%cPrD%M0", transportadoras0.getPass());
      assertEquals(1337, transportadoras0.getCap());
      assertEquals("I*;H42=%cPrD%M0", transportadoras0.getEmail());
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals("", transportadoras0.getCod());
      assertEquals(3728.0454, double0, 0.01);
      assertEquals(2228.5, transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals("", transportadoras0.getNome());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-2040.605));
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 0.0, 0.0, 0.0, (-2040.605), false, 0.0, "", "", 0.5, 1186);
      double double0 = transportadoras0.getKmp();
      assertEquals((-2040.605), transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(0.5, double0, 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals(1186, transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-318.2), 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, (-318.2), (-318.2), (-318.2), (-318.2), false, 0.0, "", "", (-337.91056268), (-1477));
      double double0 = transportadoras0.getKmp();
      assertEquals((-318.2), transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals((-318.2), transportadoras0.getClas(), 0.01);
      assertEquals((-318.2), transportadoras0.getPrkm(), 0.01);
      assertEquals((-318.2), transportadoras0.getRange(), 0.01);
      assertEquals((-337.91056268), double0, 0.01);
      assertEquals((-1477), transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("traz_aqui.Coordenadas", "traz_aqui.Coordenadas", (Coordenadas) null, 0.0, 0.0, (-2246.98), 3370.6253650576, false, (-2531.529614456368), "traz_aqui.Coordenadas", "traz_aqui.Coordenadas", (-2246.98), 3065);
      transportadoras0.getEmail();
      assertEquals(3370.6253650576, transportadoras0.getClas(), 0.01);
      assertEquals(3065, transportadoras0.getCap());
      assertEquals((-2531.529614456368), transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals((-2246.98), transportadoras0.getKmp(), 0.01);
      assertEquals((-2246.98), transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("", "x~j;X1>NqH&L(oZ", (Coordenadas) null, (-1.0), (-1.0), (-1.0), 0.0, true, 0.0, "Y3&S6Ac2zA8*vFCZ\u0000u", "", 0.0, 3951);
      transportadoras0.getCord();
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals("x~j;X1>NqH&L(oZ", transportadoras0.getNome());
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals("", transportadoras0.getCod());
      assertEquals((-1.0), transportadoras0.getNif(), 0.01);
      assertEquals("Y3&S6Ac2zA8*vFCZ\u0000u", transportadoras0.getEmail());
      assertEquals((-1.0), transportadoras0.getPrkm(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals((-1.0), transportadoras0.getRange(), 0.01);
      assertEquals(3951, transportadoras0.getCap());
      assertEquals("", transportadoras0.getPass());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("- Y:", "bR4e~yfs\"DHN\"", coordenadas0, (-1370.2850173464), 0.0, 0.0, 0.0, true, 0.0, "", "", (-1370.2850173464), (-1));
      transportadoras0.getCord();
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals("", transportadoras0.getPass());
      assertEquals((-1370.2850173464), transportadoras0.getKmp(), 0.01);
      assertEquals("bR4e~yfs\"DHN\"", transportadoras0.getNome());
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals((-1), transportadoras0.getCap());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals("- Y:", transportadoras0.getCod());
      assertEquals("", transportadoras0.getEmail());
      assertEquals((-1370.2850173464), transportadoras0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(122.56348721, 617.58706);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 617.58706, 122.56348721, 0.0, 122.56348721, true, 2.0, "rOgEKx3*h?*#Rl", "", 2.0, (-1));
      transportadoras0.getCord();
      assertTrue(transportadoras0.isMed());
      assertEquals(2.0, transportadoras0.getVkm(), 0.01);
      assertEquals("", transportadoras0.getCod());
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals("rOgEKx3*h?*#Rl", transportadoras0.getEmail());
      assertEquals("", transportadoras0.getNome());
      assertEquals(617.58706, transportadoras0.getRange(), 0.01);
      assertEquals(2.0, transportadoras0.getKmp(), 0.01);
      assertEquals((-1), transportadoras0.getCap());
      assertEquals("", transportadoras0.getPass());
      assertEquals(122.56348721, transportadoras0.getClas(), 0.01);
      assertEquals(122.56348721, transportadoras0.getPrkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, 0.5, 0.0, (-694.7342), 1.0, true, 0.0, "H", (String) null, 0.0, 1);
      String string0 = transportadoras0.getCod();
      assertEquals(1.0, transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(1, transportadoras0.getCap());
      assertEquals((-694.7342), transportadoras0.getNif(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertNull(string0);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals(0.5, transportadoras0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.5);
      Transportadoras transportadoras0 = new Transportadoras("s=", "s=", coordenadas0, 2.0, 2.0, (-1261.777181), 568.5, false, 0.0, (String) null, "", 2549.55036657785, (-248));
      String string0 = transportadoras0.getCod();
      assertEquals(2549.55036657785, transportadoras0.getKmp(), 0.01);
      assertEquals(568.5, transportadoras0.getClas(), 0.01);
      assertEquals((-248), transportadoras0.getCap());
      assertEquals("s=", transportadoras0.getNome());
      assertNotNull(string0);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals("", transportadoras0.getPass());
      assertEquals(2.0, transportadoras0.getRange(), 0.01);
      assertEquals((-1261.777181), transportadoras0.getNif(), 0.01);
      assertEquals(2.0, transportadoras0.getPrkm(), 0.01);
      assertEquals("s=", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("t=FZMS6zDkW%", "t=FZMS6zDkW%", coordenadas0, 0.0, 0.0, 0.0, 0.0, false, 0.0, "t=FZMS6zDkW%", "t=FZMS6zDkW%", 0.0, 1);
      double double0 = transportadoras0.getClas();
      assertEquals(1, transportadoras0.getCap());
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "YM\">p", coordenadas0, 0.0, 0.0, 0.0, (-281.9277860699), true, (-281.9277860699), "", "{em4y", (-281.9277860699), 0);
      double double0 = transportadoras0.getClas();
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals((-281.9277860699), transportadoras0.getVkm(), 0.01);
      assertEquals("", transportadoras0.getCod());
      assertEquals("YM\">p", transportadoras0.getNome());
      assertEquals("", transportadoras0.getEmail());
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals((-281.9277860699), double0, 0.01);
      assertEquals("{em4y", transportadoras0.getPass());
      assertEquals(0, transportadoras0.getCap());
      assertEquals((-281.9277860699), transportadoras0.getKmp(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(992.3294667448787, 992.3294667448787);
      Transportadoras transportadoras0 = new Transportadoras(" -r)h1A9Fm", " -r)h1A9Fm", coordenadas0, 0.0, 992.3294667448787, 0.0, 0.0, false, (-1.0), " -r)h1A9Fm", " -r)h1A9Fm", 0.0, 0);
      int int0 = transportadoras0.getCap();
      assertEquals((-1.0), transportadoras0.getVkm(), 0.01);
      assertEquals(992.3294667448787, transportadoras0.getPrkm(), 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("e({?QO,m&t4:'^f'", "p$b!B$q", coordenadas0, 0.0, 0.0, 0.0, 0.0, true, 381.255524857285, "p$b!B$q", "pST?'$qz=Hn'4LzRL}8", 0.0, (-206));
      int int0 = transportadoras0.getCap();
      assertEquals("p$b!B$q", transportadoras0.getNome());
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals((-206), int0);
      assertEquals("e({?QO,m&t4:'^f'", transportadoras0.getCod());
      assertEquals(381.255524857285, transportadoras0.getVkm(), 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals("p$b!B$q", transportadoras0.getEmail());
      assertEquals("pST?'$qz=Hn'4LzRL}8", transportadoras0.getPass());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.5, 440.2);
      Transportadoras transportadoras0 = new Transportadoras("&eS?EiC36_~5k(Ow", "&eS?EiC36_~5k(Ow", coordenadas0, 0.0, (-257.773449), 440.2, (-895.61), true, 0.0, "&eS?EiC36_~5k(Ow", "&eS?EiC36_~5k(Ow", 0.5, 2006);
      Coordenadas coordenadas1 = new Coordenadas(0.0, (-1.0));
      transportadoras0.distanceT(coordenadas1);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals(2006, transportadoras0.getCap());
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals(440.2, transportadoras0.getNif(), 0.01);
      assertEquals((-257.773449), transportadoras0.getPrkm(), 0.01);
      assertEquals((-895.61), transportadoras0.getClas(), 0.01);
      assertEquals(0.5, transportadoras0.getKmp(), 0.01);
      assertTrue(transportadoras0.isMed());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 1191.2291608);
      Transportadoras transportadoras0 = new Transportadoras("Zu@X%7,mG$ V ", "Zu@X%7,mG$ V ", coordenadas0, (-4284.2509844), 0.0, 1191.2291608, (-4284.2509844), false, 0.0, "", "Zu@X%7,mG$ V ", (-774.186341298), 0);
      Transportadoras transportadoras1 = transportadoras0.clone();
      assertEquals((-774.186341298), transportadoras1.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(1191.2291608, transportadoras0.getNif(), 0.01);
      assertEquals("Zu@X%7,mG$ V ", transportadoras1.getPass());
      assertEquals(0, transportadoras1.getCap());
      assertEquals("", transportadoras1.getEmail());
      assertEquals((-4284.2509844), transportadoras1.getRange(), 0.01);
      assertEquals((-4284.2509844), transportadoras0.getClas(), 0.01);
      assertEquals((-4284.2509844), transportadoras0.getRange(), 0.01);
      assertEquals("Zu@X%7,mG$ V ", transportadoras1.getNome());
      assertEquals(1191.2291608, transportadoras1.getNif(), 0.01);
      assertEquals((-774.186341298), transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals("Zu@X%7,mG$ V ", transportadoras1.getCod());
      assertFalse(transportadoras1.isMed());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 0.0, 0.0, 0.0, 0.0, true, (-1104.2), "_vU^o,Z", (String) null, (-1104.2), 1338);
      Transportadoras transportadoras1 = transportadoras0.clone();
      assertEquals("_vU^o,Z", transportadoras1.getEmail());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals("", transportadoras1.getCod());
      assertTrue(transportadoras1.isMed());
      assertEquals((-1104.2), transportadoras1.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals((-1104.2), transportadoras0.getVkm(), 0.01);
      assertEquals((-1104.2), transportadoras1.getVkm(), 0.01);
      assertEquals("", transportadoras1.getNome());
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals((-1104.2), transportadoras0.getKmp(), 0.01);
      assertEquals(1338, transportadoras0.getCap());
      assertEquals(1338, transportadoras1.getCap());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-4904.814332459202), (-4904.814332459202));
      Transportadoras transportadoras0 = new Transportadoras("FAw$R7U(V", "FAw$R7U(V", coordenadas0, (-4904.814332459202), (-4904.814332459202), (-4904.814332459202), (-4904.814332459202), false, (-4904.814332459202), "FAw$R7U(V", "FAw$R7U(V", (-4904.814332459202), 24);
      Transportadoras transportadoras1 = transportadoras0.clone();
      assertEquals((-4904.814332459202), transportadoras0.getClas(), 0.01);
      assertEquals(24, transportadoras0.getCap());
      assertEquals((-4904.814332459202), transportadoras0.getRange(), 0.01);
      assertFalse(transportadoras1.isMed());
      assertEquals((-4904.814332459202), transportadoras1.getNif(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getVkm(), 0.01);
      assertEquals((-4904.814332459202), transportadoras1.getKmp(), 0.01);
      assertEquals((-4904.814332459202), transportadoras1.getPrkm(), 0.01);
      assertEquals(24, transportadoras1.getCap());
      assertEquals((-4904.814332459202), transportadoras1.getRange(), 0.01);
      assertEquals((-4904.814332459202), transportadoras1.getVkm(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getNif(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getPrkm(), 0.01);
      assertEquals((-4904.814332459202), transportadoras0.getKmp(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-3072.305918209), 0.0);
      Transportadoras transportadoras0 = new Transportadoras("}TgS{ WyR ", "}TgS{ WyR ", coordenadas0, (-722.79277), 0.0, (-2053.225073), 0.0, true, 1269.5830875149659, "}TgS{ WyR ", "}TgS{ WyR ", 0.0, (-1));
      Transportadoras transportadoras1 = transportadoras0.clone();
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals((-1), transportadoras0.getCap());
      assertEquals(1269.5830875149659, transportadoras1.getVkm(), 0.01);
      assertEquals((-2053.225073), transportadoras1.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertTrue(transportadoras1.isMed());
      assertEquals((-722.79277), transportadoras1.getRange(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals((-722.79277), transportadoras0.getRange(), 0.01);
      assertEquals((-2053.225073), transportadoras0.getNif(), 0.01);
      assertEquals(1269.5830875149659, transportadoras0.getVkm(), 0.01);
      assertEquals((-1), transportadoras1.getCap());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Transportadoras transportadoras0 = new Transportadoras("q,wr", "q,wr", coordenadas0, 0.0, 2294.22, (-1.0), (-1561.380193734932), true, 457.384717, "q,wr", "", 2294.22, 0);
      Double double0 = new Double(0.0);
      double double1 = transportadoras0.calcTemp(coordenadas0, coordenadas0, double0);
      assertEquals((-1561.380193734932), transportadoras0.getClas(), 0.01);
      assertEquals(2294.22, transportadoras0.getKmp(), 0.01);
      assertEquals("q,wr", transportadoras0.getEmail());
      assertEquals("", transportadoras0.getPass());
      assertEquals(457.384717, transportadoras0.getVkm(), 0.01);
      assertEquals(2294.22, transportadoras0.getPrkm(), 0.01);
      assertEquals("q,wr", transportadoras0.getNome());
      assertEquals("q,wr", transportadoras0.getCod());
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals(0, transportadoras0.getCap());
      assertEquals(0.0, double1, 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals((-1.0), transportadoras0.getNif(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 0.0);
      Coordenadas coordenadas1 = new Coordenadas(coordenadas0);
      coordenadas1.setX(0.0);
      Transportadoras transportadoras0 = new Transportadoras("=#!<y&+C$9)", "", coordenadas1, 0.0, 0.0, 0.0, 1.0, false, 1.0, "@Osvura\\", "", 0.0, 1516);
      Double double0 = new Double(0.0);
      double double1 = transportadoras0.calcTemp(coordenadas0, coordenadas1, double0);
      assertEquals("=#!<y&+C$9)", transportadoras0.getCod());
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals(1516, transportadoras0.getCap());
      assertFalse(transportadoras0.isMed());
      assertEquals("", transportadoras0.getNome());
      assertEquals(1.0, transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(2.0, double1, 0.01);
      assertEquals("", transportadoras0.getPass());
      assertEquals("@Osvura\\", transportadoras0.getEmail());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-318.2), 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, (-318.2), (-318.2), (-318.2), (-318.2), false, 0.0, "", "", (-337.91056268), (-1477));
      double double0 = transportadoras0.calcCost(coordenadas0, 0.0, coordenadas0);
      assertEquals((-318.2), transportadoras0.getPrkm(), 0.01);
      assertEquals((-1477), transportadoras0.getCap());
      assertFalse(transportadoras0.isMed());
      assertEquals((-337.91056268), transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-318.2), transportadoras0.getClas(), 0.01);
      assertEquals((-318.2), transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals((-318.2), transportadoras0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("1", (String) null, (Coordenadas) null, (-546.8809479045357), 1494.09, (-485.074963386), (-546.8809479045357), true, 0.5, "", "#[U+5}%]KS", (-1740.757), 68);
      Double double0 = new Double(1477.7675923608);
      // Undeclared exception!
      try { 
        transportadoras0.isRangeT((Coordenadas) null, double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("#t", "#t", (Coordenadas) null, (-2355.19), (-2355.19), (-2355.19), 0.0, false, (-1.0), "F", "", 0.0, (-2837));
      // Undeclared exception!
      try { 
        transportadoras0.distanceT((Coordenadas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), 0.0);
      Transportadoras transportadoras0 = new Transportadoras("0>L)iUvUy;6?L", "shS ", coordenadas0, 0.0, 0.5, 0.0, (-1.0), false, (-1.0), "0>L)iUvUy;6?L", "0>L)iUvUy;6?L", 0.0, 0);
      // Undeclared exception!
      try { 
        transportadoras0.calcTemp(coordenadas0, coordenadas0, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("u.nEZN}**Y}$K;!C!cE", (String) null, (Coordenadas) null, (-2260.1698826109077), (-2260.1698826109077), (-4583.460051), (-2260.1698826109077), true, 0.0, "", "['\"S~(BA${D%;?8qB", 1.0, 1594);
      // Undeclared exception!
      try { 
        transportadoras0.calcCost((Coordenadas) null, 1.0, (Coordenadas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1280.53153), (-1.0));
      Transportadoras transportadoras0 = new Transportadoras(",$jXZn.y?\"(01WVdyuJ", (String) null, coordenadas0, (-1280.53153), (-1280.53153), (-2450.3779578), (-1280.53153), false, 1155.7249, ",$jXZn.y?\"(01WVdyuJ", "traz_aqui.Transportadoras", (-2694.336989215387), 3508);
      double double0 = transportadoras0.getNif();
      assertEquals((-1280.53153), transportadoras0.getPrkm(), 0.01);
      assertEquals((-2450.3779578), double0, 0.01);
      assertEquals((-1280.53153), transportadoras0.getClas(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(",$jXZn.y?\"(01WVdyuJ", transportadoras0.getCod());
      assertEquals(3508, transportadoras0.getCap());
      assertEquals("traz_aqui.Transportadoras", transportadoras0.getPass());
      assertEquals(1155.7249, transportadoras0.getVkm(), 0.01);
      assertEquals((-2694.336989215387), transportadoras0.getKmp(), 0.01);
      assertEquals(",$jXZn.y?\"(01WVdyuJ", transportadoras0.getEmail());
      assertEquals((-1280.53153), transportadoras0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), 0.0);
      Transportadoras transportadoras0 = new Transportadoras("0>L)iUvUy;6?L", "shS ", coordenadas0, 0.0, 0.5, 0.0, (-1.0), false, (-1.0), "0>L)iUvUy;6?L", "0>L)iUvUy;6?L", 0.0, 0);
      String string0 = transportadoras0.getNome();
      assertEquals("shS ", string0);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals((-1.0), transportadoras0.getClas(), 0.01);
      assertEquals("0>L)iUvUy;6?L", transportadoras0.getCod());
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(0.5, transportadoras0.getPrkm(), 0.01);
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals(0, transportadoras0.getCap());
      assertEquals("0>L)iUvUy;6?L", transportadoras0.getPass());
      assertEquals("0>L)iUvUy;6?L", transportadoras0.getEmail());
      assertEquals((-1.0), transportadoras0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, (-1.0));
      Transportadoras transportadoras0 = new Transportadoras("q,wr", "q,wr", coordenadas0, 0.0, 2294.22, (-1.0), (-1561.380193734932), true, 457.384717, "q,wr", "", 2294.22, 0);
      String string0 = transportadoras0.getPass();
      assertTrue(transportadoras0.isMed());
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals(457.384717, transportadoras0.getVkm(), 0.01);
      assertEquals(2294.22, transportadoras0.getPrkm(), 0.01);
      assertEquals(0, transportadoras0.getCap());
      assertEquals(2294.22, transportadoras0.getKmp(), 0.01);
      assertEquals("q,wr", transportadoras0.getCod());
      assertEquals("", string0);
      assertEquals((-1.0), transportadoras0.getNif(), 0.01);
      assertEquals("q,wr", transportadoras0.getEmail());
      assertEquals("q,wr", transportadoras0.getNome());
      assertEquals((-1561.380193734932), transportadoras0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-326.290725627706), (-326.290725627706));
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, (-326.290725627706), (-326.290725627706), 899.4377121082625, 1.0, false, 1.0, "", "traz_aqui.Coordenadas", (-326.290725627706), 0);
      String string0 = transportadoras0.getCod();
      assertEquals("", string0);
      assertEquals((-326.290725627706), transportadoras0.getKmp(), 0.01);
      assertEquals((-326.290725627706), transportadoras0.getPrkm(), 0.01);
      assertEquals(1.0, transportadoras0.getVkm(), 0.01);
      assertEquals(1.0, transportadoras0.getClas(), 0.01);
      assertEquals(899.4377121082625, transportadoras0.getNif(), 0.01);
      assertEquals(0, transportadoras0.getCap());
      assertEquals((-326.290725627706), transportadoras0.getRange(), 0.01);
      assertEquals("", transportadoras0.getNome());
      assertFalse(transportadoras0.isMed());
      assertEquals("", transportadoras0.getEmail());
      assertEquals("traz_aqui.Coordenadas", transportadoras0.getPass());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1560.14407511), (-1560.14407511));
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, (-1560.14407511), (-2901.7209315), (-2901.7209315), (-1560.14407511), true, (-1560.14407511), (String) null, (String) null, (-467.0), 618);
      double double0 = transportadoras0.getRange();
      assertEquals((-1560.14407511), double0, 0.01);
      assertEquals((-1560.14407511), transportadoras0.getClas(), 0.01);
      assertEquals(618, transportadoras0.getCap());
      assertEquals((-2901.7209315), transportadoras0.getNif(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals((-2901.7209315), transportadoras0.getPrkm(), 0.01);
      assertEquals((-1560.14407511), transportadoras0.getVkm(), 0.01);
      assertEquals((-467.0), transportadoras0.getKmp(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1560.14407511), (-1560.14407511));
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, (-1560.14407511), (-2901.7209315), (-2901.7209315), (-1560.14407511), true, (-1560.14407511), (String) null, (String) null, (-467.0), 618);
      transportadoras0.getCord();
      assertTrue(transportadoras0.isMed());
      assertEquals((-467.0), transportadoras0.getKmp(), 0.01);
      assertEquals((-1560.14407511), transportadoras0.getRange(), 0.01);
      assertEquals((-1560.14407511), transportadoras0.getVkm(), 0.01);
      assertEquals(618, transportadoras0.getCap());
      assertEquals((-2901.7209315), transportadoras0.getNif(), 0.01);
      assertEquals((-1560.14407511), transportadoras0.getClas(), 0.01);
      assertEquals((-2901.7209315), transportadoras0.getPrkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1560.14407511), (-1560.14407511));
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, (-1560.14407511), (-2901.7209315), (-2901.7209315), (-1560.14407511), true, (-1560.14407511), (String) null, (String) null, (-467.0), 618);
      int int0 = transportadoras0.getCap();
      assertEquals(618, int0);
      assertTrue(transportadoras0.isMed());
      assertEquals((-467.0), transportadoras0.getKmp(), 0.01);
      assertEquals((-2901.7209315), transportadoras0.getPrkm(), 0.01);
      assertEquals((-1560.14407511), transportadoras0.getRange(), 0.01);
      assertEquals((-2901.7209315), transportadoras0.getNif(), 0.01);
      assertEquals((-1560.14407511), transportadoras0.getVkm(), 0.01);
      assertEquals((-1560.14407511), transportadoras0.getClas(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-318.2), 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, (-318.2), (-318.2), (-318.2), (-318.2), false, 0.0, "", "", (-337.91056268), (-1477));
      double double0 = transportadoras0.getPrkm();
      assertEquals((-337.91056268), transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals((-318.2), transportadoras0.getClas(), 0.01);
      assertEquals((-318.2), double0, 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals((-1477), transportadoras0.getCap());
      assertEquals((-318.2), transportadoras0.getRange(), 0.01);
      assertEquals((-318.2), transportadoras0.getNif(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-318.2), 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, (-318.2), (-318.2), (-318.2), (-318.2), false, 0.0, "", "", (-337.91056268), (-1477));
      boolean boolean0 = transportadoras0.isMed();
      assertEquals((-318.2), transportadoras0.getNif(), 0.01);
      assertEquals((-318.2), transportadoras0.getPrkm(), 0.01);
      assertEquals((-318.2), transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals((-337.91056268), transportadoras0.getKmp(), 0.01);
      assertEquals((-1477), transportadoras0.getCap());
      assertEquals((-318.2), transportadoras0.getRange(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 0.0, 0.0, 0.0, 0.0, true, (-1104.2), "_vU^o,Z", (String) null, (-1104.2), 1338);
      double double0 = transportadoras0.getVkm();
      assertEquals((-1104.2), double0, 0.01);
      assertEquals("", transportadoras0.getCod());
      assertEquals(0.0, transportadoras0.getRange(), 0.01);
      assertEquals("_vU^o,Z", transportadoras0.getEmail());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals("", transportadoras0.getNome());
      assertEquals((-1104.2), transportadoras0.getKmp(), 0.01);
      assertEquals(0.0, transportadoras0.getNif(), 0.01);
      assertEquals(0.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(1338, transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(0.0, 0.5);
      Transportadoras transportadoras0 = new Transportadoras("s=", "s=", coordenadas0, 2.0, 2.0, (-1261.777181), 568.5, false, 0.0, (String) null, "", 2549.55036657785, (-248));
      String string0 = transportadoras0.getEmail();
      assertEquals(2.0, transportadoras0.getPrkm(), 0.01);
      assertEquals("", transportadoras0.getPass());
      assertEquals("s=", transportadoras0.getCod());
      assertNull(string0);
      assertEquals(2.0, transportadoras0.getRange(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(2549.55036657785, transportadoras0.getKmp(), 0.01);
      assertEquals((-248), transportadoras0.getCap());
      assertEquals(568.5, transportadoras0.getClas(), 0.01);
      assertEquals(0.0, transportadoras0.getVkm(), 0.01);
      assertEquals("s=", transportadoras0.getNome());
      assertEquals((-1261.777181), transportadoras0.getNif(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Transportadoras transportadoras0 = null;
      try {
        transportadoras0 = new Transportadoras((Transportadoras) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("u.nEZN}**Y}$K;!C!cE", (String) null, (Coordenadas) null, (-2260.1698826109077), (-2260.1698826109077), (-4583.460051), (-2260.1698826109077), true, 0.0, "", "['\"S~(BA${D%;?8qB", 1.0, 1594);
      transportadoras0.dimCap();
      assertEquals(1593, transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(3143.9, 3143.9);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 3143.9, 3143.9, 3143.9, 3143.9, false, 3143.9, "", "", 3143.9, 0);
      transportadoras0.dimCap();
      assertEquals(3143.9, transportadoras0.getVkm(), 0.01);
      assertEquals(3143.9, transportadoras0.getRange(), 0.01);
      assertEquals(0, transportadoras0.getCap());
      assertFalse(transportadoras0.isMed());
      assertEquals(3143.9, transportadoras0.getClas(), 0.01);
      assertEquals(3143.9, transportadoras0.getKmp(), 0.01);
      assertEquals(3143.9, transportadoras0.getPrkm(), 0.01);
      assertEquals(3143.9, transportadoras0.getNif(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), (-1.0));
      Transportadoras transportadoras0 = new Transportadoras("^i\"/[A =", "^i\"/[A =", coordenadas0, (-1.0), (-1.0), (-1.0), (-1.0), true, (-1.0), "^i\"/[A =", "^i\"/[A =", (-1.0), 2146535073);
      transportadoras0.changeR((-1.0));
      assertEquals((-1.0), transportadoras0.getClas(), 0.01);
      assertEquals((-1.0), transportadoras0.getKmp(), 0.01);
      assertEquals((-1.0), transportadoras0.getNif(), 0.01);
      assertEquals((-1.0), transportadoras0.getPrkm(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals((-1.0), transportadoras0.getVkm(), 0.01);
      assertEquals((-1.0), transportadoras0.getRange(), 0.01);
      assertEquals(2146535073, transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("u.nEZN}**Y}$K;!C!cE", (String) null, (Coordenadas) null, (-2260.1698826109077), (-2260.1698826109077), (-4583.460051), (-2260.1698826109077), true, 0.0, "", "['\"S~(BA${D%;?8qB", 1.0, 1594);
      assertEquals("u.nEZN}**Y}$K;!C!cE", transportadoras0.getCod());
      
      transportadoras0.setCod("['\"S~(BA${D%;?8qB");
      assertEquals("['\"S~(BA${D%;?8qB", transportadoras0.getPass());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("1", (String) null, (Coordenadas) null, (-546.8809479045357), 1494.09, (-485.074963386), (-546.8809479045357), true, 0.5, "", "#[U+5}%]KS", (-1740.757), 68);
      transportadoras0.setVkm(68);
      assertEquals(68.0, transportadoras0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("u.nEZN}**Y}$K;!C!cE", (String) null, (Coordenadas) null, (-2260.1698826109077), (-2260.1698826109077), (-4583.460051), (-2260.1698826109077), true, 0.0, "", "['\"S~(BA${D%;?8qB", 1.0, 1594);
      assertTrue(transportadoras0.isMed());
      
      transportadoras0.setMed(false);
      assertFalse(transportadoras0.isMed());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-851.0), (-851.0));
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, (-851.0), (-851.0), (-851.0), (-851.0), true, (-851.0), (String) null, (String) null, (-851.0), 1);
      transportadoras0.aumCap();
      assertEquals(2, transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("1", (String) null, (Coordenadas) null, (-546.8809479045357), 1494.09, (-485.074963386), (-546.8809479045357), true, 0.5, "", "#[U+5}%]KS", (-1740.757), 68);
      assertEquals((-485.074963386), transportadoras0.getNif(), 0.01);
      
      transportadoras0.setNif((-1740.757));
      assertEquals(0.5, transportadoras0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("#t", "#t", (Coordenadas) null, (-2355.19), (-2355.19), (-2355.19), 0.0, false, (-1.0), "F", "", 0.0, (-2837));
      transportadoras0.setCap((-2837));
      assertEquals((-2355.19), transportadoras0.getPrkm(), 0.01);
      assertEquals("", transportadoras0.getPass());
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertEquals((-2355.19), transportadoras0.getRange(), 0.01);
      assertEquals((-1.0), transportadoras0.getVkm(), 0.01);
      assertEquals("F", transportadoras0.getEmail());
      assertEquals("#t", transportadoras0.getCod());
      assertFalse(transportadoras0.isMed());
      assertEquals((-2837), transportadoras0.getCap());
      assertEquals(0.0, transportadoras0.getKmp(), 0.01);
      assertEquals((-2355.19), transportadoras0.getNif(), 0.01);
      assertEquals("#t", transportadoras0.getNome());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 1.0, 1.0, 1.0, 1.0, false, 1.0, "", "", 1.0, (-1811));
      transportadoras0.setCord(coordenadas0);
      assertEquals(1.0, transportadoras0.getClas(), 0.01);
      assertEquals(1.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(1.0, transportadoras0.getNif(), 0.01);
      assertEquals(1.0, transportadoras0.getVkm(), 0.01);
      assertEquals(1.0, transportadoras0.getRange(), 0.01);
      assertEquals(1.0, transportadoras0.getKmp(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals((-1811), transportadoras0.getCap());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-851.0), (-851.0));
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, (-851.0), (-851.0), (-851.0), (-851.0), true, (-851.0), (String) null, (String) null, (-851.0), 1);
      Double double0 = new Double((-851.0));
      double double1 = transportadoras0.calcTemp(coordenadas0, coordenadas0, double0);
      assertEquals((-851.0), transportadoras0.getClas(), 0.01);
      assertEquals((-851.0), double1, 0.01);
      assertEquals((-851.0), transportadoras0.getKmp(), 0.01);
      assertEquals((-851.0), transportadoras0.getRange(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals(1, transportadoras0.getCap());
      assertEquals((-851.0), transportadoras0.getVkm(), 0.01);
      assertEquals((-851.0), transportadoras0.getPrkm(), 0.01);
      assertEquals((-851.0), transportadoras0.getNif(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-851.0), (-851.0));
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, (-851.0), (-851.0), (-851.0), (-851.0), true, (-851.0), (String) null, (String) null, (-851.0), 1);
      transportadoras0.distanceT(coordenadas0);
      assertEquals((-851.0), transportadoras0.getKmp(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals(1, transportadoras0.getCap());
      assertEquals((-851.0), transportadoras0.getNif(), 0.01);
      assertEquals((-851.0), transportadoras0.getPrkm(), 0.01);
      assertEquals((-851.0), transportadoras0.getClas(), 0.01);
      assertEquals((-851.0), transportadoras0.getRange(), 0.01);
      assertEquals((-851.0), transportadoras0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 1.0, 1.0, 1.0, 1.0, false, 1.0, "", "", 1.0, (-1811));
      transportadoras0.setPass("");
      assertEquals(1.0, transportadoras0.getNif(), 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals((-1811), transportadoras0.getCap());
      assertEquals(1.0, transportadoras0.getVkm(), 0.01);
      assertEquals(1.0, transportadoras0.getRange(), 0.01);
      assertEquals(1.0, transportadoras0.getClas(), 0.01);
      assertEquals(1.0, transportadoras0.getKmp(), 0.01);
      assertEquals(1.0, transportadoras0.getPrkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("XbK", "XbK", (Coordenadas) null, 8.769903055790763, 8.769903055790763, 8.769903055790763, 8.769903055790763, true, 8.769903055790763, "XbK", "XbK", 8.769903055790763, 0);
      transportadoras0.setKmp(8.769903055790763);
      assertEquals(17.539806111581527, transportadoras0.getKmp(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1.0, 1.0);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 1.0, 1.0, 1.0, 1.0, false, 1.0, "", "", 1.0, (-1811));
      double double0 = transportadoras0.getClas();
      assertEquals((-1811), transportadoras0.getCap());
      assertEquals(1.0, transportadoras0.getPrkm(), 0.01);
      assertEquals(1.0, transportadoras0.getNif(), 0.01);
      assertEquals(1.0, transportadoras0.getKmp(), 0.01);
      assertEquals(1.0, transportadoras0.getVkm(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertFalse(transportadoras0.isMed());
      assertEquals(1.0, transportadoras0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas(1089.5666276887148, 1089.5666276887148);
      Transportadoras transportadoras0 = new Transportadoras("", "", coordenadas0, 1089.5666276887148, 1089.5666276887148, 1089.5666276887148, 1089.5666276887148, true, 1089.5666276887148, "", "", 1089.5666276887148, 14);
      double double0 = transportadoras0.calcCost(coordenadas0, 1089.5666276887148, coordenadas0);
      assertEquals(14, transportadoras0.getCap());
      assertEquals(1089.5666276887148, transportadoras0.getNif(), 0.01);
      assertEquals(1089.5666276887148, transportadoras0.getRange(), 0.01);
      assertEquals(1089.5666276887148, transportadoras0.getKmp(), 0.01);
      assertEquals(1089.5666276887148, transportadoras0.getPrkm(), 0.01);
      assertEquals(1089.5666276887148, transportadoras0.getClas(), 0.01);
      assertEquals(544.7833138443574, double0, 0.01);
      assertEquals(1089.5666276887148, transportadoras0.getVkm(), 0.01);
      assertTrue(transportadoras0.isMed());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-851.0), (-851.0));
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, (-851.0), (-851.0), (-851.0), (-851.0), true, (-851.0), (String) null, (String) null, (-851.0), 1);
      transportadoras0.setRange((-851.0));
      assertEquals((-851.0), transportadoras0.getClas(), 0.01);
      assertEquals((-851.0), transportadoras0.getPrkm(), 0.01);
      assertEquals((-851.0), transportadoras0.getKmp(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals(1, transportadoras0.getCap());
      assertEquals((-851.0), transportadoras0.getNif(), 0.01);
      assertEquals((-851.0), transportadoras0.getRange(), 0.01);
      assertEquals((-851.0), transportadoras0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-1.0), (-1.0));
      Transportadoras transportadoras0 = new Transportadoras("^i\"/[A =", "^i\"/[A =", coordenadas0, (-1.0), (-1.0), (-1.0), (-1.0), true, (-1.0), "^i\"/[A =", "^i\"/[A =", (-1.0), 2146535073);
      transportadoras0.setClas((-1.0));
      assertTrue(transportadoras0.isMed());
      assertEquals((-1.0), transportadoras0.getClas(), 0.01);
      assertEquals(2146535073, transportadoras0.getCap());
      assertEquals((-1.0), transportadoras0.getPrkm(), 0.01);
      assertEquals((-1.0), transportadoras0.getRange(), 0.01);
      assertEquals((-1.0), transportadoras0.getKmp(), 0.01);
      assertEquals((-1.0), transportadoras0.getNif(), 0.01);
      assertEquals((-1.0), transportadoras0.getVkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Coordenadas coordenadas0 = new Coordenadas((-851.0), (-851.0));
      Transportadoras transportadoras0 = new Transportadoras((String) null, (String) null, coordenadas0, (-851.0), (-851.0), (-851.0), (-851.0), true, (-851.0), (String) null, (String) null, (-851.0), 1);
      Double double0 = new Double((-851.0));
      transportadoras0.isRangeT(coordenadas0, double0);
      assertEquals((-851.0), transportadoras0.getVkm(), 0.01);
      assertEquals((-851.0), transportadoras0.getPrkm(), 0.01);
      assertEquals(1, transportadoras0.getCap());
      assertEquals((-851.0), transportadoras0.getNif(), 0.01);
      assertEquals((-851.0), transportadoras0.getClas(), 0.01);
      assertEquals((-851.0), transportadoras0.getKmp(), 0.01);
      assertTrue(transportadoras0.isMed());
      assertEquals((-851.0), transportadoras0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("XbK", "XbK", (Coordenadas) null, 8.769903055790763, 8.769903055790763, 8.769903055790763, 8.769903055790763, true, 8.769903055790763, "XbK", "XbK", 8.769903055790763, 0);
      Transportadoras transportadoras1 = transportadoras0.clone();
      assertTrue(transportadoras1.isMed());
      assertEquals(8.769903055790763, transportadoras0.getClas(), 0.01);
      assertEquals(0, transportadoras1.getCap());
      assertEquals(8.769903055790763, transportadoras1.getRange(), 0.01);
      assertEquals(8.769903055790763, transportadoras1.getPrkm(), 0.01);
      assertEquals(8.769903055790763, transportadoras0.getPrkm(), 0.01);
      assertEquals(8.769903055790763, transportadoras0.getKmp(), 0.01);
      assertEquals(8.769903055790763, transportadoras1.getVkm(), 0.01);
      assertEquals(8.769903055790763, transportadoras0.getVkm(), 0.01);
      assertEquals(8.769903055790763, transportadoras1.getNif(), 0.01);
      assertEquals(8.769903055790763, transportadoras0.getNif(), 0.01);
      assertEquals(8.769903055790763, transportadoras1.getKmp(), 0.01);
      assertEquals(8.769903055790763, transportadoras0.getRange(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("#t", "#t", (Coordenadas) null, (-2355.19), (-2355.19), (-2355.19), 0.0, false, (-1.0), "F", "", 0.0, (-2837));
      assertEquals("F", transportadoras0.getEmail());
      
      transportadoras0.setEmail("");
      transportadoras0.getEmail();
      assertEquals((-2355.19), transportadoras0.getPrkm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras("#t", "#t", (Coordenadas) null, (-2355.19), (-2355.19), (-2355.19), 0.0, false, (-1.0), "F", "", 0.0, (-2837));
      double double0 = transportadoras0.getKmp();
      assertEquals("F", transportadoras0.getEmail());
      assertEquals((-2837), transportadoras0.getCap());
      assertEquals("#t", transportadoras0.getNome());
      assertEquals((-2355.19), transportadoras0.getPrkm(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals("#t", transportadoras0.getCod());
      assertEquals((-1.0), transportadoras0.getVkm(), 0.01);
      assertEquals("", transportadoras0.getPass());
      assertEquals((-2355.19), transportadoras0.getNif(), 0.01);
      assertEquals((-2355.19), transportadoras0.getRange(), 0.01);
      assertEquals(0.0, transportadoras0.getClas(), 0.01);
      assertFalse(transportadoras0.isMed());
  }
}
