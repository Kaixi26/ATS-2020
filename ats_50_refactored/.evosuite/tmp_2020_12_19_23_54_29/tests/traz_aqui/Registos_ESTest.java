/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 20 00:35:56 GMT 2020
 */

package traz_aqui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;
import traz_aqui.Encomenda;
import traz_aqui.Registos;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Registos_ESTest extends Registos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("", "", "", (-1.0));
      Double double0 = new Double((-1.0));
      Registos registos0 = new Registos(encomenda0, (LocalDateTime) null, "&w?,xY", "ue^rtT\"|:h8Ol\"<h", double0, double0, double0);
      Registos registos1 = new Registos(registos0);
      assertEquals("ue^rtT\"|:h8Ol\"<h", registos1.getDriver());
      assertEquals("&w?,xY", registos1.getUser());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("mFEzil3|6r", "", "", 2105.9238616648);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double(0.0);
      Registos registos0 = new Registos(encomenda0, localDateTime0, (String) null, "Registo: ", double0, (Double) null, double0);
      String string0 = registos0.getUser();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("", "", "", 1.0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Double double0 = new Double(0);
      Registos registos0 = new Registos(encomenda0, localDateTime0, "", "", double0, double0, double0);
      String string0 = registos0.getUser();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double((-2194.1370562934844));
      Encomenda encomenda0 = new Encomenda("traz_aqui.LinhaEncomenda", "${Z2AenhojyykA", "wWOFUaC", 1.0);
      Registos registos0 = new Registos(encomenda0, (LocalDateTime) null, "traz_aqui.LinhaEncomenda", "t-Bw&;lhXl`", (Double) null, double0, double0);
      Double double1 = registos0.getTmp();
      assertNull(double1);
      assertEquals("t-Bw&;lhXl`", registos0.getDriver());
      assertEquals("traz_aqui.LinhaEncomenda", registos0.getUser());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("!]8-fSAaB", "!]8-fSAaB", ":i`1&4RQ5", (-1127.421));
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Double double0 = new Double((-985.21));
      Registos registos0 = new Registos(encomenda0, localDateTime0, "", ", ", double0, double0, double0);
      Double double1 = new Double(1.0);
      registos0.setTmp(double1);
      registos0.getTmp();
      assertEquals(", ", registos0.getDriver());
      assertEquals("", registos0.getUser());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("asS_>uTnYLF*zpSFyG", "91iATkAdv", "", 0.0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double(0.0);
      Registos registos0 = new Registos(encomenda0, localDateTime0, "91iATkAdv", "", double0, double0, double0);
      registos0.getTmp();
      assertEquals("91iATkAdv", registos0.getUser());
      assertEquals("", registos0.getDriver());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("!]8-fSAaB", "!]8-fSAaB", ":i`1&4RQ5", (-1127.421));
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Double double0 = new Double((-985.21));
      Registos registos0 = new Registos(encomenda0, localDateTime0, "", ", ", double0, double0, double0);
      registos0.getTmp();
      assertEquals("", registos0.getUser());
      assertEquals(", ", registos0.getDriver());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda(",xg}", "", "", 0.0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Double double0 = new Double(0.0);
      Registos registos0 = new Registos(encomenda0, localDateTime0, "Sz6o/dLa_", "B<wrDt", double0, double0, double0);
      registos0.getPeso();
      assertEquals("B<wrDt", registos0.getDriver());
      assertEquals("Sz6o/dLa_", registos0.getUser());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("", "Linha Encomenda: ", "", 1.0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double(1.0);
      Registos registos0 = new Registos(encomenda0, localDateTime0, "", "", double0, double0, double0);
      double double1 = registos0.getPeso();
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("", (String) null, (String) null, 1179.3815);
      Instant instant0 = MockInstant.ofEpochSecond(0L, 923L);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      Double double0 = new Double(700.8798449339);
      Registos registos0 = new Registos(encomenda0, localDateTime0, ", ", ", ", (Double) null, (Double) null, double0);
      String string0 = registos0.getLoja();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("", "", "", (-750.829));
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double((-750.829));
      Registos registos0 = new Registos(encomenda0, localDateTime0, "", "", double0, double0, double0);
      String string0 = registos0.getLoja();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double((-1.0));
      Registos registos0 = new Registos((Encomenda) null, localDateTime0, "(7FEyHOoGz%", "Fv|E.A:#L{el", double0, double0, double0);
      registos0.getEnc();
      assertEquals("(7FEyHOoGz%", registos0.getUser());
      assertEquals("Fv|E.A:#L{el", registos0.getDriver());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("", "", "", 1.0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Double double0 = new Double(0);
      Registos registos0 = new Registos(encomenda0, localDateTime0, "", "", double0, double0, double0);
      Encomenda encomenda1 = registos0.getEnc();
      assertEquals("", encomenda1.getUser());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("traz_aqui.Registos", "traz_aqui.Registos", "traz_aqui.Registos", (-8.9260733983078));
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Double double0 = new Double((-399.384576676));
      Registos registos0 = new Registos(encomenda0, localDateTime0, "traz_aqui.Registos", "traz_aqui.Registos", double0, double0, double0);
      Encomenda encomenda1 = registos0.getEnc();
      assertSame(encomenda0, encomenda1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda((String) null, (String) null, (String) null, 866.4127503528);
      Double double0 = new Double(1.0);
      Registos registos0 = new Registos(encomenda0, (LocalDateTime) null, "VMs^4", (String) null, double0, double0, double0);
      String string0 = registos0.getDriver();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("asS_>uTnYLF*zpSFyG", "91iATkAdv", "", 0.0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double(0.0);
      Registos registos0 = new Registos(encomenda0, localDateTime0, "91iATkAdv", "", double0, double0, double0);
      String string0 = registos0.getDriver();
      assertEquals("", string0);
      assertEquals("91iATkAdv", registos0.getUser());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("cc0qs~00-TzEjdQGB2%", "cc0qs~00-TzEjdQGB2%", "cc0qs~00-TzEjdQGB2%", 2585.774135);
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.tickMinutes(zoneId0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Double double0 = new Double(1530.0);
      Registos registos0 = new Registos(encomenda0, localDateTime0, "Registo: ", "cc0qs~00-TzEjdQGB2%", double0, double0, double0);
      registos0.getData();
      assertEquals("Registo: ", registos0.getUser());
      assertEquals("cc0qs~00-TzEjdQGB2%", registos0.getDriver());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("VZ(T)/<reLTU?|%Fpm", "VZ(T)/<reLTU?|%Fpm", "VZ(T)/<reLTU?|%Fpm", 2695.0);
      Double double0 = new Double((-2592.1528349106175));
      Registos registos0 = new Registos(encomenda0, (LocalDateTime) null, "VZ(T)/<reLTU?|%Fpm", "VZ(T)/<reLTU?|%Fpm", double0, double0, double0);
      registos0.setCustoT((Double) null);
      Double double1 = registos0.getCustoT();
      assertNull(double1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda(",xg}", "", "", 0.0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Double double0 = new Double(0.0);
      Registos registos0 = new Registos(encomenda0, localDateTime0, "Sz6o/dLa_", "B<wrDt", double0, double0, double0);
      registos0.getCustoT();
      assertEquals("B<wrDt", registos0.getDriver());
      assertEquals("Sz6o/dLa_", registos0.getUser());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("u6YZ=tFALX", "u6YZ=tFALX", "NClDky8QU", 0.0);
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Double double0 = new Double(120.38);
      Registos registos0 = new Registos(encomenda0, localDateTime0, "NClDky8QU", "u6YZ=tFALX", double0, double0, double0);
      registos0.getCustoT();
      assertEquals("u6YZ=tFALX", registos0.getDriver());
      assertEquals("NClDky8QU", registos0.getUser());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("", "", "pS%fPW", (-157.06468));
      Double double0 = new Double(1.0);
      Registos registos0 = new Registos(encomenda0, (LocalDateTime) null, (String) null, (String) null, (Double) null, (Double) null, double0);
      Double double1 = registos0.getCusto();
      assertNull(double1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("", "", "", (-1.0));
      Double double0 = new Double((-1.0));
      Registos registos0 = new Registos(encomenda0, (LocalDateTime) null, "&w?,xY", "ue^rtT\"|:h8Ol\"<h", double0, double0, double0);
      Double double1 = new Double(0.0);
      registos0.setCusto(double1);
      registos0.getCusto();
      assertEquals("&w?,xY", registos0.getUser());
      assertEquals("ue^rtT\"|:h8Ol\"<h", registos0.getDriver());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("u6YZ=tFALX", "u6YZ=tFALX", "NClDky8QU", 0.0);
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Double double0 = new Double(120.38);
      Registos registos0 = new Registos(encomenda0, localDateTime0, "NClDky8QU", "u6YZ=tFALX", double0, double0, double0);
      registos0.getCusto();
      assertEquals("u6YZ=tFALX", registos0.getDriver());
      assertEquals("NClDky8QU", registos0.getUser());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda(",xg}", "", "", 0.0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Double double0 = new Double(0.0);
      Registos registos0 = new Registos(encomenda0, localDateTime0, "Sz6o/dLa_", "B<wrDt", double0, double0, double0);
      Registos registos1 = registos0.clone();
      assertEquals("Sz6o/dLa_", registos1.getUser());
      assertEquals("B<wrDt", registos1.getDriver());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("", (String) null, "", 777.559948377147);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double(777.559948377147);
      Registos registos0 = new Registos(encomenda0, localDateTime0, "", ", ", double0, double0, double0);
      Registos registos1 = registos0.clone();
      assertEquals(", ", registos1.getDriver());
      assertEquals("", registos1.getUser());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double(0.0);
      Registos registos0 = new Registos((Encomenda) null, localDateTime0, "", "", double0, double0, double0);
      // Undeclared exception!
      try { 
        registos0.getLoja();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Registos", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("", "", "", (-1.0));
      Double double0 = new Double((-1.0));
      Registos registos0 = new Registos(encomenda0, (LocalDateTime) null, "&w?,xY", "ue^rtT\"|:h8Ol\"<h", double0, double0, double0);
      registos0.getData();
      assertEquals("&w?,xY", registos0.getUser());
      assertEquals("ue^rtT\"|:h8Ol\"<h", registos0.getDriver());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("", "", "", 0.0);
      Instant instant0 = MockInstant.ofEpochSecond(1L, (-4664L));
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      Double double0 = new Double(0);
      Registos registos0 = new Registos(encomenda0, localDateTime0, "", "", double0, double0, double0);
      Encomenda encomenda1 = registos0.getEnc();
      assertSame(encomenda0, encomenda1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("!]8-fSAaB", "!]8-fSAaB", ":i`1&4RQ5", (-1127.421));
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Double double0 = new Double((-985.21));
      Registos registos0 = new Registos(encomenda0, localDateTime0, "", ", ", double0, double0, double0);
      String string0 = registos0.getDriver();
      assertEquals(", ", string0);
      assertEquals("", registos0.getUser());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("cc0qs~00-TzEjdQGB2%", "cc0qs~00-TzEjdQGB2%", "cc0qs~00-TzEjdQGB2%", 2585.774135);
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.tickMinutes(zoneId0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Double double0 = new Double(1530.0);
      Registos registos0 = new Registos(encomenda0, localDateTime0, "Registo: ", "cc0qs~00-TzEjdQGB2%", double0, double0, double0);
      String string0 = registos0.getUser();
      assertEquals("cc0qs~00-TzEjdQGB2%", registos0.getDriver());
      assertEquals("Registo: ", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("VZ(T)/<reLTU?|%Fpm", "VZ(T)/<reLTU?|%Fpm", "VZ(T)/<reLTU?|%Fpm", 2695.0);
      Double double0 = new Double((-2592.1528349106175));
      Registos registos0 = new Registos(encomenda0, (LocalDateTime) null, "VZ(T)/<reLTU?|%Fpm", "VZ(T)/<reLTU?|%Fpm", double0, double0, double0);
      Double double1 = registos0.getTmp();
      assertEquals((-2592.1528349106175), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("VZ(T)/<reLTU?|%Fpm", "VZ(T)/<reLTU?|%Fpm", "VZ(T)/<reLTU?|%Fpm", 2695.0);
      Double double0 = new Double((-2592.1528349106175));
      Registos registos0 = new Registos(encomenda0, (LocalDateTime) null, "VZ(T)/<reLTU?|%Fpm", "VZ(T)/<reLTU?|%Fpm", double0, double0, double0);
      Double double1 = registos0.getCustoT();
      assertEquals((-2592.1528349106175), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("VZ(T)/<reLTU?|%Fpm", "VZ(T)/<reLTU?|%Fpm", "VZ(T)/<reLTU?|%Fpm", 2695.0);
      Double double0 = new Double((-2592.1528349106175));
      Registos registos0 = new Registos(encomenda0, (LocalDateTime) null, "VZ(T)/<reLTU?|%Fpm", "VZ(T)/<reLTU?|%Fpm", double0, double0, double0);
      Double double1 = registos0.getCusto();
      assertEquals((-2592.1528349106175), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Registos registos0 = null;
      try {
        registos0 = new Registos((Registos) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Registos", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("PS1QvU$mX593+a+", "PS1QvU$mX593+a+", "PS1QvU$mX593+a+", (-778.6307433658453));
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double((-778.6307433658453));
      Registos registos0 = new Registos(encomenda0, localDateTime0, "PS1QvU$mX593+a+", "PS1QvU$mX593+a+", double0, double0, double0);
      String string0 = registos0.getLoja();
      assertEquals("PS1QvU$mX593+a+", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("R1<L6wKs=]7cG5", "R1<L6wKs=]7cG5", "R1<L6wKs=]7cG5", (-1163.375376573916));
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double((-1163.375376573916));
      Registos registos0 = new Registos(encomenda0, localDateTime0, "R1<L6wKs=]7cG5", "R1<L6wKs=]7cG5", double0, double0, double0);
      registos0.setData(localDateTime0);
      assertEquals("R1<L6wKs=]7cG5", registos0.getUser());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("PS1QvU$mX593+a+", "PS1QvU$mX593+a+", "PS1QvU$mX593+a+", (-778.6307433658453));
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double((-778.6307433658453));
      Registos registos0 = new Registos(encomenda0, localDateTime0, "PS1QvU$mX593+a+", "PS1QvU$mX593+a+", double0, double0, double0);
      registos0.setDriver("PS1QvU$mX593+a+");
      assertEquals("PS1QvU$mX593+a+", registos0.getDriver());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("PS1QvU$mX593+a+", "PS1QvU$mX593+a+", "PS1QvU$mX593+a+", (-778.6307433658453));
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double((-778.6307433658453));
      Registos registos0 = new Registos(encomenda0, localDateTime0, "PS1QvU$mX593+a+", "PS1QvU$mX593+a+", double0, double0, double0);
      double double1 = registos0.getPeso();
      assertEquals((-778.6307433658453), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("PS1QvU$mX593+a+", "PS1QvU$mX593+a+", "PS1QvU$mX593+a+", (-778.6307433658453));
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double((-778.6307433658453));
      Registos registos0 = new Registos(encomenda0, localDateTime0, "PS1QvU$mX593+a+", "PS1QvU$mX593+a+", double0, double0, double0);
      String string0 = registos0.toString();
      assertEquals("Registo: Encomenda: PS1QvU$mX593+a+, PS1QvU$mX593+a+, PS1QvU$mX593+a+, -778.6307433658453, [], 2014-02-14T20:21:21.320, PS1QvU$mX593+a+, PS1QvU$mX593+a+, -778.6307433658453, -778.6307433658453, -778.6307433658453", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("PS1QvU$mX593+a+", "PS1QvU$mX593+a+", "PS1QvU$mX593+a+", (-778.6307433658453));
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double((-778.6307433658453));
      Registos registos0 = new Registos(encomenda0, localDateTime0, "PS1QvU$mX593+a+", "PS1QvU$mX593+a+", double0, double0, double0);
      registos0.setEnc(encomenda0);
      assertEquals((-778.6307433658453), registos0.getCustoT(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("R1<L6wKs=]7cG5", "R1<L6wKs=]7cG5", "R1<L6wKs=]7cG5", (-1163.375376573916));
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double((-1163.375376573916));
      Registos registos0 = new Registos(encomenda0, localDateTime0, "R1<L6wKs=]7cG5", "R1<L6wKs=]7cG5", double0, double0, double0);
      Registos registos1 = registos0.clone();
      assertEquals((-1163.375376573916), registos1.getTmp(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("PS1QvU$mX593+a+", "PS1QvU$mX593+a+", "PS1QvU$mX593+a+", (-778.6307433658453));
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double((-778.6307433658453));
      Registos registos0 = new Registos(encomenda0, localDateTime0, "PS1QvU$mX593+a+", "PS1QvU$mX593+a+", double0, double0, double0);
      registos0.setUser("PS1QvU$mX593+a+");
      assertEquals((-778.6307433658453), registos0.getCustoT(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda("", "", "", (-750.829));
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Double double0 = new Double((-750.829));
      Registos registos0 = new Registos(encomenda0, localDateTime0, "", "", double0, double0, double0);
      registos0.setEnc((Encomenda) null);
      // Undeclared exception!
      try { 
        registos0.getPeso();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Registos", e);
      }
  }
}
