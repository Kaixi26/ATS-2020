/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 31 14:47:52 GMT 2020
 */



import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import traz_aqui.Voluntario;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Voluntario_ESTest extends Voluntario_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      double double0 = voluntario0.getraio();
      assertTrue(voluntario0.getlivre());
      assertEquals(0.0, voluntario0.getnumreviews(), 0.01);
      assertEquals(0.0, voluntario0.getavaliacao(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("traz_aqui.Voluntario", "traz_aqui.Voluntario", "traz_aqui.Voluntario", 267.0926, (-1.0), "De4HRt^?O$h+`]T h", 1.0, false, 1.0, (-2490.0));
      double double0 = voluntario0.getraio();
      assertEquals(1.0, double0, 0.01);
      assertEquals((-2490.0), voluntario0.getavaliacao(), 0.01);
      assertFalse(voluntario0.getlivre());
      assertEquals(1.0, voluntario0.getnumreviews(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      double double0 = voluntario0.getnumreviews();
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertTrue(voluntario0.getlivre());
      assertEquals(0.0, voluntario0.getavaliacao(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("ZO8?", "ZO8?", "ZO8?", 0.0, 0.0, "sJot9l~~#x3eB&32", 0.0, false, 1.0, 0.0);
      double double0 = voluntario0.getnumreviews();
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertEquals(0.0, voluntario0.getavaliacao(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertFalse(voluntario0.getlivre());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "", "", 258.5917272409, 2227.9, "4Z5j`mT", (-4231.0541), true, 2227.9, 258.5917272409);
      double double0 = voluntario0.getavaliacao();
      assertEquals((-4231.0541), voluntario0.getraio(), 0.01);
      assertEquals(258.5917272409, double0, 0.01);
      assertTrue(voluntario0.getlivre());
      assertEquals(2227.9, voluntario0.getnumreviews(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "", "traz_aqui.User", 1227.6134067635098, 1227.6134067635098, "", (-1686.0349356813), true, (-1686.0349356813), (-819.9663));
      double double0 = voluntario0.getavaliacao();
      assertEquals((-1686.0349356813), voluntario0.getraio(), 0.01);
      assertTrue(voluntario0.getlivre());
      assertEquals((-819.9663), double0, 0.01);
      assertEquals((-1686.0349356813), voluntario0.getnumreviews(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario(".", ".", ".", (-5198.69104357592), 0.0, "fcz g~[>!0W3", (-5198.69104357592), true, (-1.0), 0.0);
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals((-1.0), voluntario0.getnumreviews(), 0.01);
      assertTrue(voluntario1.getlivre());
      assertEquals((-1.0), voluntario1.getnumreviews(), 0.01);
      assertEquals(0.0, voluntario0.getavaliacao(), 0.01);
      assertEquals((-5198.69104357592), voluntario0.getraio(), 0.01);
      assertEquals((-5198.69104357592), voluntario1.getraio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("R}*#%cf", "R}*#%cf", "R}*#%cf", 0.0, 0.0, "sKib746yB#\"Dr", 0.0, false, 0.0, 3416.86);
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertEquals(0.0, voluntario0.getnumreviews(), 0.01);
      assertFalse(voluntario1.getlivre());
      assertEquals(3416.86, voluntario0.getavaliacao(), 0.01);
      assertEquals(3416.86, voluntario1.getavaliacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "<5", (String) null, (-1.0), (-1342.779576091), (String) null, 2346.0455, true, 1.0, (-1342.779576091));
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals((-1342.779576091), voluntario1.getavaliacao(), 0.01);
      assertEquals((-1342.779576091), voluntario0.getavaliacao(), 0.01);
      assertEquals(1.0, voluntario0.getnumreviews(), 0.01);
      assertEquals(2346.0455, voluntario1.getraio(), 0.01);
      assertEquals(2346.0455, voluntario0.getraio(), 0.01);
      assertTrue(voluntario1.getlivre());
      assertEquals(1.0, voluntario1.getnumreviews(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "", " ", 0.0, 3489.217664, "i8%", 631.27064517, true, 683.494, 1389.53297);
      voluntario0.locationX = null;
      // Undeclared exception!
      try { 
        voluntario0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.locationX = null;
      // Undeclared exception!
      try { 
        voluntario1.stringtoFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.locationX = null;
      // Undeclared exception!
      try { 
        voluntario0.equals(voluntario1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.locationX = null;
      // Undeclared exception!
      try { 
        voluntario0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Voluntario voluntario0 = null;
      try {
        voluntario0 = new Voluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "ul||OE", "", 850.186, 0.0, "traz_aqui.User", 0.0, true, (-1420.236157385041), 0.0);
      double double0 = voluntario0.getnumreviews();
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertTrue(voluntario0.getlivre());
      assertEquals(0.0, voluntario0.getavaliacao(), 0.01);
      assertEquals((-1420.236157385041), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      boolean boolean0 = voluntario0.getlivre();
      assertEquals(0.0, voluntario0.getnumreviews(), 0.01);
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertEquals(0.0, voluntario0.getavaliacao(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "", "traz_aqui.User", 1227.6134067635098, 1227.6134067635098, "", (-1686.0349356813), true, (-1686.0349356813), (-819.9663));
      double double0 = voluntario0.getraio();
      assertEquals((-1686.0349356813), double0, 0.01);
      assertEquals((-819.9663), voluntario0.getavaliacao(), 0.01);
      assertTrue(voluntario0.getlivre());
      assertEquals((-1686.0349356813), voluntario0.getnumreviews(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      double double0 = voluntario0.getavaliacao();
      assertTrue(voluntario0.getlivre());
      assertEquals(0.0, voluntario0.getnumreviews(), 0.01);
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      boolean boolean0 = voluntario0.equals((Object) null);
      assertEquals(0.0, voluntario0.getnumreviews(), 0.01);
      assertFalse(boolean0);
      assertTrue(voluntario0.getlivre());
      assertEquals(0.0, voluntario0.getavaliacao(), 0.01);
      assertEquals(0.0, voluntario0.getraio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      boolean boolean0 = voluntario0.equals(voluntario0);
      assertTrue(voluntario0.getlivre());
      assertEquals(0.0, voluntario0.getavaliacao(), 0.01);
      assertEquals(0.0, voluntario0.getnumreviews(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, voluntario0.getraio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      boolean boolean0 = voluntario0.equals("");
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertEquals(0.0, voluntario0.getnumreviews(), 0.01);
      assertTrue(voluntario0.getlivre());
      assertFalse(boolean0);
      assertEquals(0.0, voluntario0.getavaliacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setraio((-34.745981262745865));
      assertEquals((-34.745981262745865), voluntario0.getraio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setavaliacao((-1712.580704));
      assertEquals((-1712.580704), voluntario0.getavaliacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      String string0 = voluntario0.stringtoFile();
      assertEquals("traz_aqui.Voluntario:,,,0.0,0.0,,0.0,true,0.0,0.0", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.menu();
      assertEquals(0.0, voluntario0.getraio(), 0.01);
      assertEquals(0.0, voluntario0.getnumreviews(), 0.01);
      assertTrue(voluntario0.getlivre());
      assertEquals(0.0, voluntario0.getavaliacao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("iRp", "iRp", "iRp", 1820.8573378314293, 1820.8573378314293, "iRp", 1820.8573378314293, false, 1820.8573378314293, 1820.8573378314293);
      voluntario0.setnumreviews(1820.8573378314293);
      assertEquals(1820.8573378314293, voluntario0.getavaliacao(), 0.01);
      assertFalse(voluntario0.getlivre());
      assertEquals(1820.8573378314293, voluntario0.getnumreviews(), 0.01);
      assertEquals(1820.8573378314293, voluntario0.getraio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      assertTrue(voluntario0.getlivre());
      
      voluntario0.setlivre(false);
      boolean boolean0 = voluntario0.getlivre();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      String string0 = voluntario0.toString();
      assertEquals("  0.0 0.0  0.0true0.00.0", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("iRp", "iRp", "iRp", 1820.8573378314293, 1820.8573378314293, "iRp", 1820.8573378314293, false, 1820.8573378314293, 1820.8573378314293);
      Voluntario voluntario1 = voluntario0.clone();
      boolean boolean0 = voluntario1.equals(voluntario0);
      assertEquals(1820.8573378314293, voluntario1.getavaliacao(), 0.01);
      assertEquals(1820.8573378314293, voluntario1.getnumreviews(), 0.01);
      assertEquals(1820.8573378314293, voluntario0.getnumreviews(), 0.01);
      assertTrue(boolean0);
      assertEquals(1820.8573378314293, voluntario0.getavaliacao(), 0.01);
      assertEquals(1820.8573378314293, voluntario1.getraio(), 0.01);
      assertEquals(1820.8573378314293, voluntario0.getraio(), 0.01);
      assertFalse(voluntario1.getlivre());
  }
}
