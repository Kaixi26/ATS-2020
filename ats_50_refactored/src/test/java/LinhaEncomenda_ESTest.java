/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 31 16:26:04 GMT 2020
 */

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import traz_aqui.LinhaEncomenda;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinhaEncomenda_ESTest extends LinhaEncomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("31:[-Fa9D=,c4", "", 0.0, 0.0);
      double double0 = linhaEncomenda0.getQnt();
      assertEquals("31:[-Fa9D=,c4", linhaEncomenda0.getCproduto());
      assertEquals("", linhaEncomenda0.getDesc());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 336.1826977426139, 336.1826977426139);
      double double0 = linhaEncomenda0.getQnt();
      assertEquals(336.1826977426139, double0, 0.01);
      assertEquals(336.1826977426139, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("=u#rZh]Ak>y<eeSLYD_", "", 0.0, 0.0);
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(0.0, linhaEncomenda0.getQnt(), 0.01);
      assertEquals("=u#rZh]Ak>y<eeSLYD_", linhaEncomenda0.getCproduto());
      assertEquals(0.0, double0, 0.01);
      assertEquals("", linhaEncomenda0.getDesc());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("SrC-JE ", "SrC-JE ", 1.0, 1.0);
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(1.0, linhaEncomenda0.getQnt(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 0.0, 0.0);
      linhaEncomenda0.getDesc();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQnt(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("4`(Md9yo8_j", "", (-2308.03558116), (-2308.03558116));
      String string0 = linhaEncomenda0.getDesc();
      assertEquals("", string0);
      assertEquals((-2308.03558116), linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-2308.03558116), linhaEncomenda0.getQnt(), 0.01);
      assertEquals("4`(Md9yo8_j", linhaEncomenda0.getCproduto());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 0.0, 0.0);
      linhaEncomenda0.setCproduto("Linha Encomenda: null, null, 0.0, 0.0");
      linhaEncomenda0.getCproduto();
      assertEquals(0.0, linhaEncomenda0.getQnt(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "v", 0.0, 0.0);
      String string0 = linhaEncomenda0.getCproduto();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals("v", linhaEncomenda0.getDesc());
      assertEquals(0.0, linhaEncomenda0.getQnt(), 0.01);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 0.0, 0.0);
      linhaEncomenda0.clone();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQnt(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, (-3738.5949030734), (-3738.5949030734));
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals((-3738.5949030734), linhaEncomenda1.getPreco(), 0.01);
      assertEquals((-3738.5949030734), linhaEncomenda1.getQnt(), 0.01);
      assertEquals((-3738.5949030734), linhaEncomenda0.getQnt(), 0.01);
      assertEquals((-3738.5949030734), linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = null;
      try {
        linhaEncomenda0 = new LinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("traz_aqui.LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("31:[-Fa9D=,c4", "", 0.0, 0.0);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      assertEquals("31:[-Fa9D=,c4", linhaEncomenda1.getCproduto());
      assertEquals(0.0, linhaEncomenda0.getQnt(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals("", linhaEncomenda1.getDesc());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", (-1334.0), (-1334.0));
      double double0 = linhaEncomenda0.getQnt();
      assertEquals((-1334.0), double0, 0.01);
      assertEquals((-1334.0), linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, (-2078.508), (-2078.508));
      double double0 = linhaEncomenda0.getPreco();
      assertEquals((-2078.508), linhaEncomenda0.getQnt(), 0.01);
      assertEquals((-2078.508), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "v", 0.0, 0.0);
      String string0 = linhaEncomenda0.getDesc();
      assertEquals(0.0, linhaEncomenda0.getQnt(), 0.01);
      assertEquals("", linhaEncomenda0.getCproduto());
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals("v", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, (-2078.508), (-2078.508));
      linhaEncomenda0.getCproduto();
      assertEquals((-2078.508), linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-2078.508), linhaEncomenda0.getQnt(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 842.7774758089932, 842.7774758089932);
      linhaEncomenda0.setDesc((String) null);
      assertEquals(842.7774758089932, linhaEncomenda0.getQnt(), 0.01);
      assertEquals(842.7774758089932, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 842.7774758089932, 842.7774758089932);
      linhaEncomenda0.setQnt(842.7774758089932);
      assertEquals(842.7774758089932, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(842.7774758089932, linhaEncomenda0.getQnt(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 842.7774758089932, 842.7774758089932);
      String string0 = linhaEncomenda0.toString();
      assertEquals("Linha Encomenda: null, null, 842.7774758089932, 842.7774758089932", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 842.7774758089932, 842.7774758089932);
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(842.7774758089932, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(842.7774758089932, linhaEncomenda1.getQnt(), 0.01);
      assertEquals(842.7774758089932, linhaEncomenda0.getQnt(), 0.01);
      assertEquals(842.7774758089932, linhaEncomenda1.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 842.7774758089932, 842.7774758089932);
      linhaEncomenda0.setPreco(842.7774758089932);
      assertEquals(842.7774758089932, linhaEncomenda0.getQnt(), 0.01);
      assertEquals(842.7774758089932, linhaEncomenda0.getPreco(), 0.01);
  }
}
